/*!
  * Bootstrap v4.2.1 (https://getbootstrap.com/)
  * Copyright 2011-2018 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
  */!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("popper.js"),require("jquery")):"function"==typeof define&&define.amd?define(["exports","popper.js","jquery"],e):e(t.bootstrap={},t.Popper,t.jQuery);}(this,function(t,u,g){"use strict";function i(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i);}}function s(t,e,n){return e&&i(t.prototype,e),n&&i(t,n),t;}function l(o){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{},e=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(e=e.concat(Object.getOwnPropertySymbols(r).filter(function(t){return Object.getOwnPropertyDescriptor(r,t).enumerable;}))),e.forEach(function(t){var e,n,i;e=o,i=r[n=t],n in e?Object.defineProperty(e,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[n]=i;});}return o;}u=u&&u.hasOwnProperty("default")?u.default:u,g=g&&g.hasOwnProperty("default")?g.default:g;var e="transitionend";function n(t){var e=this,n=!1;return g(this).one(_.TRANSITION_END,function(){n=!0;}),setTimeout(function(){n||_.triggerTransitionEnd(e);},t),this;}var _={TRANSITION_END:"bsTransitionEnd",getUID:function(t){for(;t+=~~(1e6*Math.random()),document.getElementById(t););return t;},getSelectorFromElement:function(t){var e=t.getAttribute("data-target");if(!e||"#"===e){var n=t.getAttribute("href");e=n&&"#"!==n?n.trim():"";}return e&&document.querySelector(e)?e:null;},getTransitionDurationFromElement:function(t){if(!t)return 0;var e=g(t).css("transition-duration"),n=g(t).css("transition-delay"),i=parseFloat(e),o=parseFloat(n);return i||o?(e=e.split(",")[0],n=n.split(",")[0],1e3*(parseFloat(e)+parseFloat(n))):0;},reflow:function(t){return t.offsetHeight;},triggerTransitionEnd:function(t){g(t).trigger(e);},supportsTransitionEnd:function(){return Boolean(e);},isElement:function(t){return(t[0]||t).nodeType;},typeCheckConfig:function(t,e,n){for(var i in n)if(Object.prototype.hasOwnProperty.call(n,i)){var o=n[i],r=e[i],s=r&&_.isElement(r)?"element":(a=r,{}.toString.call(a).match(/\s([a-z]+)/i)[1].toLowerCase());if(!new RegExp(o).test(s))throw new Error(t.toUpperCase()+': Option "'+i+'" provided type "'+s+'" but expected type "'+o+'".');}var a;},findShadowRoot:function(t){if(!document.documentElement.attachShadow)return null;if("function"!=typeof t.getRootNode)return t instanceof ShadowRoot?t:t.parentNode?_.findShadowRoot(t.parentNode):null;var e=t.getRootNode();return e instanceof ShadowRoot?e:null;}};g.fn.emulateTransitionEnd=n,g.event.special[_.TRANSITION_END]={bindType:e,delegateType:e,handle:function(t){if(g(t.target).is(this))return t.handleObj.handler.apply(this,arguments);}};var o="alert",r="bs.alert",a="."+r,c=g.fn[o],h={CLOSE:"close"+a,CLOSED:"closed"+a,CLICK_DATA_API:"click"+a+".data-api"},f="alert",d="fade",m="show",p=function(){function i(t){this._element=t;}var t=i.prototype;return t.close=function(t){var e=this._element;t&&(e=this._getRootElement(t)),this._triggerCloseEvent(e).isDefaultPrevented()||this._removeElement(e);},t.dispose=function(){g.removeData(this._element,r),this._element=null;},t._getRootElement=function(t){var e=_.getSelectorFromElement(t),n=!1;return e&&(n=document.querySelector(e)),n||(n=g(t).closest("."+f)[0]),n;},t._triggerCloseEvent=function(t){var e=g.Event(h.CLOSE);return g(t).trigger(e),e;},t._removeElement=function(e){var n=this;if(g(e).removeClass(m),g(e).hasClass(d)){var t=_.getTransitionDurationFromElement(e);g(e).one(_.TRANSITION_END,function(t){return n._destroyElement(e,t);}).emulateTransitionEnd(t);}else this._destroyElement(e);},t._destroyElement=function(t){g(t).detach().trigger(h.CLOSED).remove();},i._jQueryInterface=function(n){return this.each(function(){var t=g(this),e=t.data(r);e||(e=new i(this),t.data(r,e)),"close"===n&&e[n](this);});},i._handleDismiss=function(e){return function(t){t&&t.preventDefault(),e.close(this);};},s(i,null,[{key:"VERSION",get:function(){return"4.2.1";}}]),i;}();g(document).on(h.CLICK_DATA_API,'[data-dismiss="alert"]',p._handleDismiss(new p())),g.fn[o]=p._jQueryInterface,g.fn[o].Constructor=p,g.fn[o].noConflict=function(){return g.fn[o]=c,p._jQueryInterface;};var v="button",E="bs.button",y="."+E,C=".data-api",T=g.fn[v],S="active",b="btn",I="focus",D='[data-toggle^="button"]',w='[data-toggle="buttons"]',A='input:not([type="hidden"])',N=".active",O=".btn",k={CLICK_DATA_API:"click"+y+C,FOCUS_BLUR_DATA_API:"focus"+y+C+" blur"+y+C},P=function(){function n(t){this._element=t;}var t=n.prototype;return t.toggle=function(){var t=!0,e=!0,n=g(this._element).closest(w)[0];if(n){var i=this._element.querySelector(A);if(i){if("radio"===i.type)if(i.checked&&this._element.classList.contains(S))t=!1;else{var o=n.querySelector(N);o&&g(o).removeClass(S);}if(t){if(i.hasAttribute("disabled")||n.hasAttribute("disabled")||i.classList.contains("disabled")||n.classList.contains("disabled"))return;i.checked=!this._element.classList.contains(S),g(i).trigger("change");}i.focus(),e=!1;}}e&&this._element.setAttribute("aria-pressed",!this._element.classList.contains(S)),t&&g(this._element).toggleClass(S);},t.dispose=function(){g.removeData(this._element,E),this._element=null;},n._jQueryInterface=function(e){return this.each(function(){var t=g(this).data(E);t||(t=new n(this),g(this).data(E,t)),"toggle"===e&&t[e]();});},s(n,null,[{key:"VERSION",get:function(){return"4.2.1";}}]),n;}();g(document).on(k.CLICK_DATA_API,D,function(t){t.preventDefault();var e=t.target;g(e).hasClass(b)||(e=g(e).closest(O)),P._jQueryInterface.call(g(e),"toggle");}).on(k.FOCUS_BLUR_DATA_API,D,function(t){var e=g(t.target).closest(O)[0];g(e).toggleClass(I,/^focus(in)?$/.test(t.type));}),g.fn[v]=P._jQueryInterface,g.fn[v].Constructor=P,g.fn[v].noConflict=function(){return g.fn[v]=T,P._jQueryInterface;};var L="carousel",j="bs.carousel",H="."+j,R=".data-api",U=g.fn[L],W={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0,touch:!0},x={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean",touch:"boolean"},F="next",q="prev",M="left",K="right",Q={SLIDE:"slide"+H,SLID:"slid"+H,KEYDOWN:"keydown"+H,MOUSEENTER:"mouseenter"+H,MOUSELEAVE:"mouseleave"+H,TOUCHSTART:"touchstart"+H,TOUCHMOVE:"touchmove"+H,TOUCHEND:"touchend"+H,POINTERDOWN:"pointerdown"+H,POINTERUP:"pointerup"+H,DRAG_START:"dragstart"+H,LOAD_DATA_API:"load"+H+R,CLICK_DATA_API:"click"+H+R},B="carousel",V="active",Y="slide",X="carousel-item-right",z="carousel-item-left",G="carousel-item-next",J="carousel-item-prev",Z="pointer-event",$=".active",tt=".active.carousel-item",et=".carousel-item",nt=".carousel-item img",it=".carousel-item-next, .carousel-item-prev",ot=".carousel-indicators",rt="[data-slide], [data-slide-to]",st='[data-ride="carousel"]',at={TOUCH:"touch",PEN:"pen"},lt=function(){function r(t,e){this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this.touchTimeout=null,this.touchStartX=0,this.touchDeltaX=0,this._config=this._getConfig(e),this._element=t,this._indicatorsElement=this._element.querySelector(ot),this._touchSupported="ontouchstart"in document.documentElement||0<navigator.maxTouchPoints,this._pointerEvent=Boolean(window.PointerEvent||window.MSPointerEvent),this._addEventListeners();}var t=r.prototype;return t.next=function(){this._isSliding||this._slide(F);},t.nextWhenVisible=function(){!document.hidden&&g(this._element).is(":visible")&&"hidden"!==g(this._element).css("visibility")&&this.next();},t.prev=function(){this._isSliding||this._slide(q);},t.pause=function(t){t||(this._isPaused=!0),this._element.querySelector(it)&&(_.triggerTransitionEnd(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null;},t.cycle=function(t){t||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config.interval&&!this._isPaused&&(this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval));},t.to=function(t){var e=this;this._activeElement=this._element.querySelector(tt);var n=this._getItemIndex(this._activeElement);if(!(t>this._items.length-1||t<0))if(this._isSliding)g(this._element).one(Q.SLID,function(){return e.to(t);});else{if(n===t)return this.pause(),void this.cycle();var i=n<t?F:q;this._slide(i,this._items[t]);}},t.dispose=function(){g(this._element).off(H),g.removeData(this._element,j),this._items=null,this._config=null,this._element=null,this._interval=null,this._isPaused=null,this._isSliding=null,this._activeElement=null,this._indicatorsElement=null;},t._getConfig=function(t){return t=l({},W,t),_.typeCheckConfig(L,t,x),t;},t._handleSwipe=function(){var t=Math.abs(this.touchDeltaX);if(!(t<=40)){var e=t/this.touchDeltaX;0<e&&this.prev(),e<0&&this.next();}},t._addEventListeners=function(){var e=this;this._config.keyboard&&g(this._element).on(Q.KEYDOWN,function(t){return e._keydown(t);}),"hover"===this._config.pause&&g(this._element).on(Q.MOUSEENTER,function(t){return e.pause(t);}).on(Q.MOUSELEAVE,function(t){return e.cycle(t);}),this._addTouchEventListeners();},t._addTouchEventListeners=function(){var n=this;if(this._touchSupported){var e=function(t){n._pointerEvent&&at[t.originalEvent.pointerType.toUpperCase()]?n.touchStartX=t.originalEvent.clientX:n._pointerEvent||(n.touchStartX=t.originalEvent.touches[0].clientX);},i=function(t){n._pointerEvent&&at[t.originalEvent.pointerType.toUpperCase()]&&(n.touchDeltaX=t.originalEvent.clientX-n.touchStartX),n._handleSwipe(),"hover"===n._config.pause&&(n.pause(),n.touchTimeout&&clearTimeout(n.touchTimeout),n.touchTimeout=setTimeout(function(t){return n.cycle(t);},500+n._config.interval));};g(this._element.querySelectorAll(nt)).on(Q.DRAG_START,function(t){return t.preventDefault();}),this._pointerEvent?(g(this._element).on(Q.POINTERDOWN,function(t){return e(t);}),g(this._element).on(Q.POINTERUP,function(t){return i(t);}),this._element.classList.add(Z)):(g(this._element).on(Q.TOUCHSTART,function(t){return e(t);}),g(this._element).on(Q.TOUCHMOVE,function(t){var e;(e=t).originalEvent.touches&&1<e.originalEvent.touches.length?n.touchDeltaX=0:n.touchDeltaX=e.originalEvent.touches[0].clientX-n.touchStartX;}),g(this._element).on(Q.TOUCHEND,function(t){return i(t);}));}},t._keydown=function(t){if(!/input|textarea/i.test(t.target.tagName))switch(t.which){case 37:t.preventDefault(),this.prev();break;case 39:t.preventDefault(),this.next();}},t._getItemIndex=function(t){return this._items=t&&t.parentNode?[].slice.call(t.parentNode.querySelectorAll(et)):[],this._items.indexOf(t);},t._getItemByDirection=function(t,e){var n=t===F,i=t===q,o=this._getItemIndex(e),r=this._items.length-1;if((i&&0===o||n&&o===r)&&!this._config.wrap)return e;var s=(o+(t===q?-1:1))%this._items.length;return-1===s?this._items[this._items.length-1]:this._items[s];},t._triggerSlideEvent=function(t,e){var n=this._getItemIndex(t),i=this._getItemIndex(this._element.querySelector(tt)),o=g.Event(Q.SLIDE,{relatedTarget:t,direction:e,from:i,to:n});return g(this._element).trigger(o),o;},t._setActiveIndicatorElement=function(t){if(this._indicatorsElement){var e=[].slice.call(this._indicatorsElement.querySelectorAll($));g(e).removeClass(V);var n=this._indicatorsElement.children[this._getItemIndex(t)];n&&g(n).addClass(V);}},t._slide=function(t,e){var n,i,o,r=this,s=this._element.querySelector(tt),a=this._getItemIndex(s),l=e||s&&this._getItemByDirection(t,s),c=this._getItemIndex(l),h=Boolean(this._interval);if(o=t===F?(n=z,i=G,M):(n=X,i=J,K),l&&g(l).hasClass(V))this._isSliding=!1;else if(!this._triggerSlideEvent(l,o).isDefaultPrevented()&&s&&l){this._isSliding=!0,h&&this.pause(),this._setActiveIndicatorElement(l);var u=g.Event(Q.SLID,{relatedTarget:l,direction:o,from:a,to:c});if(g(this._element).hasClass(Y)){g(l).addClass(i),_.reflow(l),g(s).addClass(n),g(l).addClass(n);var f=parseInt(l.getAttribute("data-interval"),10);this._config.interval=f?(this._config.defaultInterval=this._config.defaultInterval||this._config.interval,f):this._config.defaultInterval||this._config.interval;var d=_.getTransitionDurationFromElement(s);g(s).one(_.TRANSITION_END,function(){g(l).removeClass(n+" "+i).addClass(V),g(s).removeClass(V+" "+i+" "+n),r._isSliding=!1,setTimeout(function(){return g(r._element).trigger(u);},0);}).emulateTransitionEnd(d);}else g(s).removeClass(V),g(l).addClass(V),this._isSliding=!1,g(this._element).trigger(u);h&&this.cycle();}},r._jQueryInterface=function(i){return this.each(function(){var t=g(this).data(j),e=l({},W,g(this).data());"object"==typeof i&&(e=l({},e,i));var n="string"==typeof i?i:e.slide;if(t||(t=new r(this,e),g(this).data(j,t)),"number"==typeof i)t.to(i);else if("string"==typeof n){if("undefined"==typeof t[n])throw new TypeError('No method named "'+n+'"');t[n]();}else e.interval&&(t.pause(),t.cycle());});},r._dataApiClickHandler=function(t){var e=_.getSelectorFromElement(this);if(e){var n=g(e)[0];if(n&&g(n).hasClass(B)){var i=l({},g(n).data(),g(this).data()),o=this.getAttribute("data-slide-to");o&&(i.interval=!1),r._jQueryInterface.call(g(n),i),o&&g(n).data(j).to(o),t.preventDefault();}}},s(r,null,[{key:"VERSION",get:function(){return"4.2.1";}},{key:"Default",get:function(){return W;}}]),r;}();g(document).on(Q.CLICK_DATA_API,rt,lt._dataApiClickHandler),g(window).on(Q.LOAD_DATA_API,function(){for(var t=[].slice.call(document.querySelectorAll(st)),e=0,n=t.length;e<n;e++){var i=g(t[e]);lt._jQueryInterface.call(i,i.data());}}),g.fn[L]=lt._jQueryInterface,g.fn[L].Constructor=lt,g.fn[L].noConflict=function(){return g.fn[L]=U,lt._jQueryInterface;};var ct="collapse",ht="bs.collapse",ut="."+ht,ft=g.fn[ct],dt={toggle:!0,parent:""},gt={toggle:"boolean",parent:"(string|element)"},_t={SHOW:"show"+ut,SHOWN:"shown"+ut,HIDE:"hide"+ut,HIDDEN:"hidden"+ut,CLICK_DATA_API:"click"+ut+".data-api"},mt="show",pt="collapse",vt="collapsing",Et="collapsed",yt="width",Ct="height",Tt=".show, .collapsing",St='[data-toggle="collapse"]',bt=function(){function a(e,t){this._isTransitioning=!1,this._element=e,this._config=this._getConfig(t),this._triggerArray=[].slice.call(document.querySelectorAll('[data-toggle="collapse"][href="#'+e.id+'"],[data-toggle="collapse"][data-target="#'+e.id+'"]'));for(var n=[].slice.call(document.querySelectorAll(St)),i=0,o=n.length;i<o;i++){var r=n[i],s=_.getSelectorFromElement(r),a=[].slice.call(document.querySelectorAll(s)).filter(function(t){return t===e;});null!==s&&0<a.length&&(this._selector=s,this._triggerArray.push(r));}this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle();}var t=a.prototype;return t.toggle=function(){g(this._element).hasClass(mt)?this.hide():this.show();},t.show=function(){var t,e,n=this;if(!this._isTransitioning&&!g(this._element).hasClass(mt)&&(this._parent&&0===(t=[].slice.call(this._parent.querySelectorAll(Tt)).filter(function(t){return"string"==typeof n._config.parent?t.getAttribute("data-parent")===n._config.parent:t.classList.contains(pt);})).length&&(t=null),!(t&&(e=g(t).not(this._selector).data(ht))&&e._isTransitioning))){var i=g.Event(_t.SHOW);if(g(this._element).trigger(i),!i.isDefaultPrevented()){t&&(a._jQueryInterface.call(g(t).not(this._selector),"hide"),e||g(t).data(ht,null));var o=this._getDimension();g(this._element).removeClass(pt).addClass(vt),this._element.style[o]=0,this._triggerArray.length&&g(this._triggerArray).removeClass(Et).attr("aria-expanded",!0),this.setTransitioning(!0);var r="scroll"+(o[0].toUpperCase()+o.slice(1)),s=_.getTransitionDurationFromElement(this._element);g(this._element).one(_.TRANSITION_END,function(){g(n._element).removeClass(vt).addClass(pt).addClass(mt),n._element.style[o]="",n.setTransitioning(!1),g(n._element).trigger(_t.SHOWN);}).emulateTransitionEnd(s),this._element.style[o]=this._element[r]+"px";}}},t.hide=function(){var t=this;if(!this._isTransitioning&&g(this._element).hasClass(mt)){var e=g.Event(_t.HIDE);if(g(this._element).trigger(e),!e.isDefaultPrevented()){var n=this._getDimension();this._element.style[n]=this._element.getBoundingClientRect()[n]+"px",_.reflow(this._element),g(this._element).addClass(vt).removeClass(pt).removeClass(mt);var i=this._triggerArray.length;if(0<i)for(var o=0;o<i;o++){var r=this._triggerArray[o],s=_.getSelectorFromElement(r);if(null!==s)g([].slice.call(document.querySelectorAll(s))).hasClass(mt)||g(r).addClass(Et).attr("aria-expanded",!1);}this.setTransitioning(!0);this._element.style[n]="";var a=_.getTransitionDurationFromElement(this._element);g(this._element).one(_.TRANSITION_END,function(){t.setTransitioning(!1),g(t._element).removeClass(vt).addClass(pt).trigger(_t.HIDDEN);}).emulateTransitionEnd(a);}}},t.setTransitioning=function(t){this._isTransitioning=t;},t.dispose=function(){g.removeData(this._element,ht),this._config=null,this._parent=null,this._element=null,this._triggerArray=null,this._isTransitioning=null;},t._getConfig=function(t){return(t=l({},dt,t)).toggle=Boolean(t.toggle),_.typeCheckConfig(ct,t,gt),t;},t._getDimension=function(){return g(this._element).hasClass(yt)?yt:Ct;},t._getParent=function(){var t,n=this;_.isElement(this._config.parent)?(t=this._config.parent,"undefined"!=typeof this._config.parent.jquery&&(t=this._config.parent[0])):t=document.querySelector(this._config.parent);var e='[data-toggle="collapse"][data-parent="'+this._config.parent+'"]',i=[].slice.call(t.querySelectorAll(e));return g(i).each(function(t,e){n._addAriaAndCollapsedClass(a._getTargetFromElement(e),[e]);}),t;},t._addAriaAndCollapsedClass=function(t,e){var n=g(t).hasClass(mt);e.length&&g(e).toggleClass(Et,!n).attr("aria-expanded",n);},a._getTargetFromElement=function(t){var e=_.getSelectorFromElement(t);return e?document.querySelector(e):null;},a._jQueryInterface=function(i){return this.each(function(){var t=g(this),e=t.data(ht),n=l({},dt,t.data(),"object"==typeof i&&i?i:{});if(!e&&n.toggle&&/show|hide/.test(i)&&(n.toggle=!1),e||(e=new a(this,n),t.data(ht,e)),"string"==typeof i){if("undefined"==typeof e[i])throw new TypeError('No method named "'+i+'"');e[i]();}});},s(a,null,[{key:"VERSION",get:function(){return"4.2.1";}},{key:"Default",get:function(){return dt;}}]),a;}();g(document).on(_t.CLICK_DATA_API,St,function(t){"A"===t.currentTarget.tagName&&t.preventDefault();var n=g(this),e=_.getSelectorFromElement(this),i=[].slice.call(document.querySelectorAll(e));g(i).each(function(){var t=g(this),e=t.data(ht)?"toggle":n.data();bt._jQueryInterface.call(t,e);});}),g.fn[ct]=bt._jQueryInterface,g.fn[ct].Constructor=bt,g.fn[ct].noConflict=function(){return g.fn[ct]=ft,bt._jQueryInterface;};var It="dropdown",Dt="bs.dropdown",wt="."+Dt,At=".data-api",Nt=g.fn[It],Ot=new RegExp("38|40|27"),kt={HIDE:"hide"+wt,HIDDEN:"hidden"+wt,SHOW:"show"+wt,SHOWN:"shown"+wt,CLICK:"click"+wt,CLICK_DATA_API:"click"+wt+At,KEYDOWN_DATA_API:"keydown"+wt+At,KEYUP_DATA_API:"keyup"+wt+At},Pt="disabled",Lt="show",jt="dropup",Ht="dropright",Rt="dropleft",Ut="dropdown-menu-right",Wt="position-static",xt='[data-toggle="dropdown"]',Ft=".dropdown form",qt=".dropdown-menu",Mt=".navbar-nav",Kt=".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",Qt="top-start",Bt="top-end",Vt="bottom-start",Yt="bottom-end",Xt="right-start",zt="left-start",Gt={offset:0,flip:!0,boundary:"scrollParent",reference:"toggle",display:"dynamic"},Jt={offset:"(number|string|function)",flip:"boolean",boundary:"(string|element)",reference:"(string|element)",display:"string"},Zt=function(){function c(t,e){this._element=t,this._popper=null,this._config=this._getConfig(e),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar(),this._addEventListeners();}var t=c.prototype;return t.toggle=function(){if(!this._element.disabled&&!g(this._element).hasClass(Pt)){var t=c._getParentFromElement(this._element),e=g(this._menu).hasClass(Lt);if(c._clearMenus(),!e){var n={relatedTarget:this._element},i=g.Event(kt.SHOW,n);if(g(t).trigger(i),!i.isDefaultPrevented()){if(!this._inNavbar){if("undefined"==typeof u)throw new TypeError("Bootstrap's dropdowns require Popper.js (https://popper.js.org/)");var o=this._element;"parent"===this._config.reference?o=t:_.isElement(this._config.reference)&&(o=this._config.reference,"undefined"!=typeof this._config.reference.jquery&&(o=this._config.reference[0])),"scrollParent"!==this._config.boundary&&g(t).addClass(Wt),this._popper=new u(o,this._menu,this._getPopperConfig());}"ontouchstart"in document.documentElement&&0===g(t).closest(Mt).length&&g(document.body).children().on("mouseover",null,g.noop),this._element.focus(),this._element.setAttribute("aria-expanded",!0),g(this._menu).toggleClass(Lt),g(t).toggleClass(Lt).trigger(g.Event(kt.SHOWN,n));}}}},t.show=function(){if(!(this._element.disabled||g(this._element).hasClass(Pt)||g(this._menu).hasClass(Lt))){var t={relatedTarget:this._element},e=g.Event(kt.SHOW,t),n=c._getParentFromElement(this._element);g(n).trigger(e),e.isDefaultPrevented()||(g(this._menu).toggleClass(Lt),g(n).toggleClass(Lt).trigger(g.Event(kt.SHOWN,t)));}},t.hide=function(){if(!this._element.disabled&&!g(this._element).hasClass(Pt)&&g(this._menu).hasClass(Lt)){var t={relatedTarget:this._element},e=g.Event(kt.HIDE,t),n=c._getParentFromElement(this._element);g(n).trigger(e),e.isDefaultPrevented()||(g(this._menu).toggleClass(Lt),g(n).toggleClass(Lt).trigger(g.Event(kt.HIDDEN,t)));}},t.dispose=function(){g.removeData(this._element,Dt),g(this._element).off(wt),this._element=null,(this._menu=null)!==this._popper&&(this._popper.destroy(),this._popper=null);},t.update=function(){this._inNavbar=this._detectNavbar(),null!==this._popper&&this._popper.scheduleUpdate();},t._addEventListeners=function(){var e=this;g(this._element).on(kt.CLICK,function(t){t.preventDefault(),t.stopPropagation(),e.toggle();});},t._getConfig=function(t){return t=l({},this.constructor.Default,g(this._element).data(),t),_.typeCheckConfig(It,t,this.constructor.DefaultType),t;},t._getMenuElement=function(){if(!this._menu){var t=c._getParentFromElement(this._element);t&&(this._menu=t.querySelector(qt));}return this._menu;},t._getPlacement=function(){var t=g(this._element.parentNode),e=Vt;return t.hasClass(jt)?(e=Qt,g(this._menu).hasClass(Ut)&&(e=Bt)):t.hasClass(Ht)?e=Xt:t.hasClass(Rt)?e=zt:g(this._menu).hasClass(Ut)&&(e=Yt),e;},t._detectNavbar=function(){return 0<g(this._element).closest(".navbar").length;},t._getPopperConfig=function(){var e=this,t={};"function"==typeof this._config.offset?t.fn=function(t){return t.offsets=l({},t.offsets,e._config.offset(t.offsets)||{}),t;}:t.offset=this._config.offset;var n={placement:this._getPlacement(),modifiers:{offset:t,flip:{enabled:this._config.flip},preventOverflow:{boundariesElement:this._config.boundary}}};return"static"===this._config.display&&(n.modifiers.applyStyle={enabled:!1}),n;},c._jQueryInterface=function(e){return this.each(function(){var t=g(this).data(Dt);if(t||(t=new c(this,"object"==typeof e?e:null),g(this).data(Dt,t)),"string"==typeof e){if("undefined"==typeof t[e])throw new TypeError('No method named "'+e+'"');t[e]();}});},c._clearMenus=function(t){if(!t||3!==t.which&&("keyup"!==t.type||9===t.which))for(var e=[].slice.call(document.querySelectorAll(xt)),n=0,i=e.length;n<i;n++){var o=c._getParentFromElement(e[n]),r=g(e[n]).data(Dt),s={relatedTarget:e[n]};if(t&&"click"===t.type&&(s.clickEvent=t),r){var a=r._menu;if(g(o).hasClass(Lt)&&!(t&&("click"===t.type&&/input|textarea/i.test(t.target.tagName)||"keyup"===t.type&&9===t.which)&&g.contains(o,t.target))){var l=g.Event(kt.HIDE,s);g(o).trigger(l),l.isDefaultPrevented()||("ontouchstart"in document.documentElement&&g(document.body).children().off("mouseover",null,g.noop),e[n].setAttribute("aria-expanded","false"),g(a).removeClass(Lt),g(o).removeClass(Lt).trigger(g.Event(kt.HIDDEN,s)));}}}},c._getParentFromElement=function(t){var e,n=_.getSelectorFromElement(t);return n&&(e=document.querySelector(n)),e||t.parentNode;},c._dataApiKeydownHandler=function(t){if((/input|textarea/i.test(t.target.tagName)?!(32===t.which||27!==t.which&&(40!==t.which&&38!==t.which||g(t.target).closest(qt).length)):Ot.test(t.which))&&(t.preventDefault(),t.stopPropagation(),!this.disabled&&!g(this).hasClass(Pt))){var e=c._getParentFromElement(this),n=g(e).hasClass(Lt);if(n&&(!n||27!==t.which&&32!==t.which)){var i=[].slice.call(e.querySelectorAll(Kt));if(0!==i.length){var o=i.indexOf(t.target);38===t.which&&0<o&&o--,40===t.which&&o<i.length-1&&o++,o<0&&(o=0),i[o].focus();}}else{if(27===t.which){var r=e.querySelector(xt);g(r).trigger("focus");}g(this).trigger("click");}}},s(c,null,[{key:"VERSION",get:function(){return"4.2.1";}},{key:"Default",get:function(){return Gt;}},{key:"DefaultType",get:function(){return Jt;}}]),c;}();g(document).on(kt.KEYDOWN_DATA_API,xt,Zt._dataApiKeydownHandler).on(kt.KEYDOWN_DATA_API,qt,Zt._dataApiKeydownHandler).on(kt.CLICK_DATA_API+" "+kt.KEYUP_DATA_API,Zt._clearMenus).on(kt.CLICK_DATA_API,xt,function(t){t.preventDefault(),t.stopPropagation(),Zt._jQueryInterface.call(g(this),"toggle");}).on(kt.CLICK_DATA_API,Ft,function(t){t.stopPropagation();}),g.fn[It]=Zt._jQueryInterface,g.fn[It].Constructor=Zt,g.fn[It].noConflict=function(){return g.fn[It]=Nt,Zt._jQueryInterface;};var $t="modal",te="bs.modal",ee="."+te,ne=g.fn[$t],ie={backdrop:!0,keyboard:!0,focus:!0,show:!0},oe={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean",show:"boolean"},re={HIDE:"hide"+ee,HIDDEN:"hidden"+ee,SHOW:"show"+ee,SHOWN:"shown"+ee,FOCUSIN:"focusin"+ee,RESIZE:"resize"+ee,CLICK_DISMISS:"click.dismiss"+ee,KEYDOWN_DISMISS:"keydown.dismiss"+ee,MOUSEUP_DISMISS:"mouseup.dismiss"+ee,MOUSEDOWN_DISMISS:"mousedown.dismiss"+ee,CLICK_DATA_API:"click"+ee+".data-api"},se="modal-scrollbar-measure",ae="modal-backdrop",le="modal-open",ce="fade",he="show",ue=".modal-dialog",fe='[data-toggle="modal"]',de='[data-dismiss="modal"]',ge=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",_e=".sticky-top",me=function(){function o(t,e){this._config=this._getConfig(e),this._element=t,this._dialog=t.querySelector(ue),this._backdrop=null,this._isShown=!1,this._isBodyOverflowing=!1,this._ignoreBackdropClick=!1,this._isTransitioning=!1,this._scrollbarWidth=0;}var t=o.prototype;return t.toggle=function(t){return this._isShown?this.hide():this.show(t);},t.show=function(t){var e=this;if(!this._isShown&&!this._isTransitioning){g(this._element).hasClass(ce)&&(this._isTransitioning=!0);var n=g.Event(re.SHOW,{relatedTarget:t});g(this._element).trigger(n),this._isShown||n.isDefaultPrevented()||(this._isShown=!0,this._checkScrollbar(),this._setScrollbar(),this._adjustDialog(),this._setEscapeEvent(),this._setResizeEvent(),g(this._element).on(re.CLICK_DISMISS,de,function(t){return e.hide(t);}),g(this._dialog).on(re.MOUSEDOWN_DISMISS,function(){g(e._element).one(re.MOUSEUP_DISMISS,function(t){g(t.target).is(e._element)&&(e._ignoreBackdropClick=!0);});}),this._showBackdrop(function(){return e._showElement(t);}));}},t.hide=function(t){var e=this;if(t&&t.preventDefault(),this._isShown&&!this._isTransitioning){var n=g.Event(re.HIDE);if(g(this._element).trigger(n),this._isShown&&!n.isDefaultPrevented()){this._isShown=!1;var i=g(this._element).hasClass(ce);if(i&&(this._isTransitioning=!0),this._setEscapeEvent(),this._setResizeEvent(),g(document).off(re.FOCUSIN),g(this._element).removeClass(he),g(this._element).off(re.CLICK_DISMISS),g(this._dialog).off(re.MOUSEDOWN_DISMISS),i){var o=_.getTransitionDurationFromElement(this._element);g(this._element).one(_.TRANSITION_END,function(t){return e._hideModal(t);}).emulateTransitionEnd(o);}else this._hideModal();}}},t.dispose=function(){[window,this._element,this._dialog].forEach(function(t){return g(t).off(ee);}),g(document).off(re.FOCUSIN),g.removeData(this._element,te),this._config=null,this._element=null,this._dialog=null,this._backdrop=null,this._isShown=null,this._isBodyOverflowing=null,this._ignoreBackdropClick=null,this._isTransitioning=null,this._scrollbarWidth=null;},t.handleUpdate=function(){this._adjustDialog();},t._getConfig=function(t){return t=l({},ie,t),_.typeCheckConfig($t,t,oe),t;},t._showElement=function(t){var e=this,n=g(this._element).hasClass(ce);this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.appendChild(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.scrollTop=0,n&&_.reflow(this._element),g(this._element).addClass(he),this._config.focus&&this._enforceFocus();var i=g.Event(re.SHOWN,{relatedTarget:t}),o=function(){e._config.focus&&e._element.focus(),e._isTransitioning=!1,g(e._element).trigger(i);};if(n){var r=_.getTransitionDurationFromElement(this._dialog);g(this._dialog).one(_.TRANSITION_END,o).emulateTransitionEnd(r);}else o();},t._enforceFocus=function(){var e=this;g(document).off(re.FOCUSIN).on(re.FOCUSIN,function(t){document!==t.target&&e._element!==t.target&&0===g(e._element).has(t.target).length&&e._element.focus();});},t._setEscapeEvent=function(){var e=this;this._isShown&&this._config.keyboard?g(this._element).on(re.KEYDOWN_DISMISS,function(t){27===t.which&&(t.preventDefault(),e.hide());}):this._isShown||g(this._element).off(re.KEYDOWN_DISMISS);},t._setResizeEvent=function(){var e=this;this._isShown?g(window).on(re.RESIZE,function(t){return e.handleUpdate(t);}):g(window).off(re.RESIZE);},t._hideModal=function(){var t=this;this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._isTransitioning=!1,this._showBackdrop(function(){g(document.body).removeClass(le),t._resetAdjustments(),t._resetScrollbar(),g(t._element).trigger(re.HIDDEN);});},t._removeBackdrop=function(){this._backdrop&&(g(this._backdrop).remove(),this._backdrop=null);},t._showBackdrop=function(t){var e=this,n=g(this._element).hasClass(ce)?ce:"";if(this._isShown&&this._config.backdrop){if(this._backdrop=document.createElement("div"),this._backdrop.className=ae,n&&this._backdrop.classList.add(n),g(this._backdrop).appendTo(document.body),g(this._element).on(re.CLICK_DISMISS,function(t){e._ignoreBackdropClick?e._ignoreBackdropClick=!1:t.target===t.currentTarget&&("static"===e._config.backdrop?e._element.focus():e.hide());}),n&&_.reflow(this._backdrop),g(this._backdrop).addClass(he),!t)return;if(!n)return void t();var i=_.getTransitionDurationFromElement(this._backdrop);g(this._backdrop).one(_.TRANSITION_END,t).emulateTransitionEnd(i);}else if(!this._isShown&&this._backdrop){g(this._backdrop).removeClass(he);var o=function(){e._removeBackdrop(),t&&t();};if(g(this._element).hasClass(ce)){var r=_.getTransitionDurationFromElement(this._backdrop);g(this._backdrop).one(_.TRANSITION_END,o).emulateTransitionEnd(r);}else o();}else t&&t();},t._adjustDialog=function(){var t=this._element.scrollHeight>document.documentElement.clientHeight;!this._isBodyOverflowing&&t&&(this._element.style.paddingLeft=this._scrollbarWidth+"px"),this._isBodyOverflowing&&!t&&(this._element.style.paddingRight=this._scrollbarWidth+"px");},t._resetAdjustments=function(){this._element.style.paddingLeft="",this._element.style.paddingRight="";},t._checkScrollbar=function(){var t=document.body.getBoundingClientRect();this._isBodyOverflowing=t.left+t.right<window.innerWidth,this._scrollbarWidth=this._getScrollbarWidth();},t._setScrollbar=function(){var o=this;if(this._isBodyOverflowing){var t=[].slice.call(document.querySelectorAll(ge)),e=[].slice.call(document.querySelectorAll(_e));g(t).each(function(t,e){var n=e.style.paddingRight,i=g(e).css("padding-right");g(e).data("padding-right",n).css("padding-right",parseFloat(i)+o._scrollbarWidth+"px");}),g(e).each(function(t,e){var n=e.style.marginRight,i=g(e).css("margin-right");g(e).data("margin-right",n).css("margin-right",parseFloat(i)-o._scrollbarWidth+"px");});var n=document.body.style.paddingRight,i=g(document.body).css("padding-right");g(document.body).data("padding-right",n).css("padding-right",parseFloat(i)+this._scrollbarWidth+"px");}g(document.body).addClass(le);},t._resetScrollbar=function(){var t=[].slice.call(document.querySelectorAll(ge));g(t).each(function(t,e){var n=g(e).data("padding-right");g(e).removeData("padding-right"),e.style.paddingRight=n||"";});var e=[].slice.call(document.querySelectorAll(""+_e));g(e).each(function(t,e){var n=g(e).data("margin-right");"undefined"!=typeof n&&g(e).css("margin-right",n).removeData("margin-right");});var n=g(document.body).data("padding-right");g(document.body).removeData("padding-right"),document.body.style.paddingRight=n||"";},t._getScrollbarWidth=function(){var t=document.createElement("div");t.className=se,document.body.appendChild(t);var e=t.getBoundingClientRect().width-t.clientWidth;return document.body.removeChild(t),e;},o._jQueryInterface=function(n,i){return this.each(function(){var t=g(this).data(te),e=l({},ie,g(this).data(),"object"==typeof n&&n?n:{});if(t||(t=new o(this,e),g(this).data(te,t)),"string"==typeof n){if("undefined"==typeof t[n])throw new TypeError('No method named "'+n+'"');t[n](i);}else e.show&&t.show(i);});},s(o,null,[{key:"VERSION",get:function(){return"4.2.1";}},{key:"Default",get:function(){return ie;}}]),o;}();g(document).on(re.CLICK_DATA_API,fe,function(t){var e,n=this,i=_.getSelectorFromElement(this);i&&(e=document.querySelector(i));var o=g(e).data(te)?"toggle":l({},g(e).data(),g(this).data());"A"!==this.tagName&&"AREA"!==this.tagName||t.preventDefault();var r=g(e).one(re.SHOW,function(t){t.isDefaultPrevented()||r.one(re.HIDDEN,function(){g(n).is(":visible")&&n.focus();});});me._jQueryInterface.call(g(e),o,this);}),g.fn[$t]=me._jQueryInterface,g.fn[$t].Constructor=me,g.fn[$t].noConflict=function(){return g.fn[$t]=ne,me._jQueryInterface;};var pe="tooltip",ve="bs.tooltip",Ee="."+ve,ye=g.fn[pe],Ce="bs-tooltip",Te=new RegExp("(^|\\s)"+Ce+"\\S+","g"),Se={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(number|string)",container:"(string|element|boolean)",fallbackPlacement:"(string|array)",boundary:"(string|element)"},be={AUTO:"auto",TOP:"top",RIGHT:"right",BOTTOM:"bottom",LEFT:"left"},Ie={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,selector:!1,placement:"top",offset:0,container:!1,fallbackPlacement:"flip",boundary:"scrollParent"},De="show",we="out",Ae={HIDE:"hide"+Ee,HIDDEN:"hidden"+Ee,SHOW:"show"+Ee,SHOWN:"shown"+Ee,INSERTED:"inserted"+Ee,CLICK:"click"+Ee,FOCUSIN:"focusin"+Ee,FOCUSOUT:"focusout"+Ee,MOUSEENTER:"mouseenter"+Ee,MOUSELEAVE:"mouseleave"+Ee},Ne="fade",Oe="show",ke=".tooltip-inner",Pe=".arrow",Le="hover",je="focus",He="click",Re="manual",Ue=function(){function i(t,e){if("undefined"==typeof u)throw new TypeError("Bootstrap's tooltips require Popper.js (https://popper.js.org/)");this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._popper=null,this.element=t,this.config=this._getConfig(e),this.tip=null,this._setListeners();}var t=i.prototype;return t.enable=function(){this._isEnabled=!0;},t.disable=function(){this._isEnabled=!1;},t.toggleEnabled=function(){this._isEnabled=!this._isEnabled;},t.toggle=function(t){if(this._isEnabled)if(t){var e=this.constructor.DATA_KEY,n=g(t.currentTarget).data(e);n||(n=new this.constructor(t.currentTarget,this._getDelegateConfig()),g(t.currentTarget).data(e,n)),n._activeTrigger.click=!n._activeTrigger.click,n._isWithActiveTrigger()?n._enter(null,n):n._leave(null,n);}else{if(g(this.getTipElement()).hasClass(Oe))return void this._leave(null,this);this._enter(null,this);}},t.dispose=function(){clearTimeout(this._timeout),g.removeData(this.element,this.constructor.DATA_KEY),g(this.element).off(this.constructor.EVENT_KEY),g(this.element).closest(".modal").off("hide.bs.modal"),this.tip&&g(this.tip).remove(),this._isEnabled=null,this._timeout=null,this._hoverState=null,(this._activeTrigger=null)!==this._popper&&this._popper.destroy(),this._popper=null,this.element=null,this.config=null,this.tip=null;},t.show=function(){var e=this;if("none"===g(this.element).css("display"))throw new Error("Please use show on visible elements");var t=g.Event(this.constructor.Event.SHOW);if(this.isWithContent()&&this._isEnabled){g(this.element).trigger(t);var n=_.findShadowRoot(this.element),i=g.contains(null!==n?n:this.element.ownerDocument.documentElement,this.element);if(t.isDefaultPrevented()||!i)return;var o=this.getTipElement(),r=_.getUID(this.constructor.NAME);o.setAttribute("id",r),this.element.setAttribute("aria-describedby",r),this.setContent(),this.config.animation&&g(o).addClass(Ne);var s="function"==typeof this.config.placement?this.config.placement.call(this,o,this.element):this.config.placement,a=this._getAttachment(s);this.addAttachmentClass(a);var l=this._getContainer();g(o).data(this.constructor.DATA_KEY,this),g.contains(this.element.ownerDocument.documentElement,this.tip)||g(o).appendTo(l),g(this.element).trigger(this.constructor.Event.INSERTED),this._popper=new u(this.element,o,{placement:a,modifiers:{offset:{offset:this.config.offset},flip:{behavior:this.config.fallbackPlacement},arrow:{element:Pe},preventOverflow:{boundariesElement:this.config.boundary}},onCreate:function(t){t.originalPlacement!==t.placement&&e._handlePopperPlacementChange(t);},onUpdate:function(t){return e._handlePopperPlacementChange(t);}}),g(o).addClass(Oe),"ontouchstart"in document.documentElement&&g(document.body).children().on("mouseover",null,g.noop);var c=function(){e.config.animation&&e._fixTransition();var t=e._hoverState;e._hoverState=null,g(e.element).trigger(e.constructor.Event.SHOWN),t===we&&e._leave(null,e);};if(g(this.tip).hasClass(Ne)){var h=_.getTransitionDurationFromElement(this.tip);g(this.tip).one(_.TRANSITION_END,c).emulateTransitionEnd(h);}else c();}},t.hide=function(t){var e=this,n=this.getTipElement(),i=g.Event(this.constructor.Event.HIDE),o=function(){e._hoverState!==De&&n.parentNode&&n.parentNode.removeChild(n),e._cleanTipClass(),e.element.removeAttribute("aria-describedby"),g(e.element).trigger(e.constructor.Event.HIDDEN),null!==e._popper&&e._popper.destroy(),t&&t();};if(g(this.element).trigger(i),!i.isDefaultPrevented()){if(g(n).removeClass(Oe),"ontouchstart"in document.documentElement&&g(document.body).children().off("mouseover",null,g.noop),this._activeTrigger[He]=!1,this._activeTrigger[je]=!1,this._activeTrigger[Le]=!1,g(this.tip).hasClass(Ne)){var r=_.getTransitionDurationFromElement(n);g(n).one(_.TRANSITION_END,o).emulateTransitionEnd(r);}else o();this._hoverState="";}},t.update=function(){null!==this._popper&&this._popper.scheduleUpdate();},t.isWithContent=function(){return Boolean(this.getTitle());},t.addAttachmentClass=function(t){g(this.getTipElement()).addClass(Ce+"-"+t);},t.getTipElement=function(){return this.tip=this.tip||g(this.config.template)[0],this.tip;},t.setContent=function(){var t=this.getTipElement();this.setElementContent(g(t.querySelectorAll(ke)),this.getTitle()),g(t).removeClass(Ne+" "+Oe);},t.setElementContent=function(t,e){var n=this.config.html;"object"==typeof e&&(e.nodeType||e.jquery)?n?g(e).parent().is(t)||t.empty().append(e):t.text(g(e).text()):t[n?"html":"text"](e);},t.getTitle=function(){var t=this.element.getAttribute("data-original-title");return t||(t="function"==typeof this.config.title?this.config.title.call(this.element):this.config.title),t;},t._getContainer=function(){return!1===this.config.container?document.body:_.isElement(this.config.container)?g(this.config.container):g(document).find(this.config.container);},t._getAttachment=function(t){return be[t.toUpperCase()];},t._setListeners=function(){var i=this;this.config.trigger.split(" ").forEach(function(t){if("click"===t)g(i.element).on(i.constructor.Event.CLICK,i.config.selector,function(t){return i.toggle(t);});else if(t!==Re){var e=t===Le?i.constructor.Event.MOUSEENTER:i.constructor.Event.FOCUSIN,n=t===Le?i.constructor.Event.MOUSELEAVE:i.constructor.Event.FOCUSOUT;g(i.element).on(e,i.config.selector,function(t){return i._enter(t);}).on(n,i.config.selector,function(t){return i._leave(t);});}}),g(this.element).closest(".modal").on("hide.bs.modal",function(){i.element&&i.hide();}),this.config.selector?this.config=l({},this.config,{trigger:"manual",selector:""}):this._fixTitle();},t._fixTitle=function(){var t=typeof this.element.getAttribute("data-original-title");(this.element.getAttribute("title")||"string"!==t)&&(this.element.setAttribute("data-original-title",this.element.getAttribute("title")||""),this.element.setAttribute("title",""));},t._enter=function(t,e){var n=this.constructor.DATA_KEY;(e=e||g(t.currentTarget).data(n))||(e=new this.constructor(t.currentTarget,this._getDelegateConfig()),g(t.currentTarget).data(n,e)),t&&(e._activeTrigger["focusin"===t.type?je:Le]=!0),g(e.getTipElement()).hasClass(Oe)||e._hoverState===De?e._hoverState=De:(clearTimeout(e._timeout),e._hoverState=De,e.config.delay&&e.config.delay.show?e._timeout=setTimeout(function(){e._hoverState===De&&e.show();},e.config.delay.show):e.show());},t._leave=function(t,e){var n=this.constructor.DATA_KEY;(e=e||g(t.currentTarget).data(n))||(e=new this.constructor(t.currentTarget,this._getDelegateConfig()),g(t.currentTarget).data(n,e)),t&&(e._activeTrigger["focusout"===t.type?je:Le]=!1),e._isWithActiveTrigger()||(clearTimeout(e._timeout),e._hoverState=we,e.config.delay&&e.config.delay.hide?e._timeout=setTimeout(function(){e._hoverState===we&&e.hide();},e.config.delay.hide):e.hide());},t._isWithActiveTrigger=function(){for(var t in this._activeTrigger)if(this._activeTrigger[t])return!0;return!1;},t._getConfig=function(t){return"number"==typeof(t=l({},this.constructor.Default,g(this.element).data(),"object"==typeof t&&t?t:{})).delay&&(t.delay={show:t.delay,hide:t.delay}),"number"==typeof t.title&&(t.title=t.title.toString()),"number"==typeof t.content&&(t.content=t.content.toString()),_.typeCheckConfig(pe,t,this.constructor.DefaultType),t;},t._getDelegateConfig=function(){var t={};if(this.config)for(var e in this.config)this.constructor.Default[e]!==this.config[e]&&(t[e]=this.config[e]);return t;},t._cleanTipClass=function(){var t=g(this.getTipElement()),e=t.attr("class").match(Te);null!==e&&e.length&&t.removeClass(e.join(""));},t._handlePopperPlacementChange=function(t){var e=t.instance;this.tip=e.popper,this._cleanTipClass(),this.addAttachmentClass(this._getAttachment(t.placement));},t._fixTransition=function(){var t=this.getTipElement(),e=this.config.animation;null===t.getAttribute("x-placement")&&(g(t).removeClass(Ne),this.config.animation=!1,this.hide(),this.show(),this.config.animation=e);},i._jQueryInterface=function(n){return this.each(function(){var t=g(this).data(ve),e="object"==typeof n&&n;if((t||!/dispose|hide/.test(n))&&(t||(t=new i(this,e),g(this).data(ve,t)),"string"==typeof n)){if("undefined"==typeof t[n])throw new TypeError('No method named "'+n+'"');t[n]();}});},s(i,null,[{key:"VERSION",get:function(){return"4.2.1";}},{key:"Default",get:function(){return Ie;}},{key:"NAME",get:function(){return pe;}},{key:"DATA_KEY",get:function(){return ve;}},{key:"Event",get:function(){return Ae;}},{key:"EVENT_KEY",get:function(){return Ee;}},{key:"DefaultType",get:function(){return Se;}}]),i;}();g.fn[pe]=Ue._jQueryInterface,g.fn[pe].Constructor=Ue,g.fn[pe].noConflict=function(){return g.fn[pe]=ye,Ue._jQueryInterface;};var We="popover",xe="bs.popover",Fe="."+xe,qe=g.fn[We],Me="bs-popover",Ke=new RegExp("(^|\\s)"+Me+"\\S+","g"),Qe=l({},Ue.Default,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'}),Be=l({},Ue.DefaultType,{content:"(string|element|function)"}),Ve="fade",Ye="show",Xe=".popover-header",ze=".popover-body",Ge={HIDE:"hide"+Fe,HIDDEN:"hidden"+Fe,SHOW:"show"+Fe,SHOWN:"shown"+Fe,INSERTED:"inserted"+Fe,CLICK:"click"+Fe,FOCUSIN:"focusin"+Fe,FOCUSOUT:"focusout"+Fe,MOUSEENTER:"mouseenter"+Fe,MOUSELEAVE:"mouseleave"+Fe},Je=function(t){var e,n;function i(){return t.apply(this,arguments)||this;}n=t,(e=i).prototype=Object.create(n.prototype),(e.prototype.constructor=e).__proto__=n;var o=i.prototype;return o.isWithContent=function(){return this.getTitle()||this._getContent();},o.addAttachmentClass=function(t){g(this.getTipElement()).addClass(Me+"-"+t);},o.getTipElement=function(){return this.tip=this.tip||g(this.config.template)[0],this.tip;},o.setContent=function(){var t=g(this.getTipElement());this.setElementContent(t.find(Xe),this.getTitle());var e=this._getContent();"function"==typeof e&&(e=e.call(this.element)),this.setElementContent(t.find(ze),e),t.removeClass(Ve+" "+Ye);},o._getContent=function(){return this.element.getAttribute("data-content")||this.config.content;},o._cleanTipClass=function(){var t=g(this.getTipElement()),e=t.attr("class").match(Ke);null!==e&&0<e.length&&t.removeClass(e.join(""));},i._jQueryInterface=function(n){return this.each(function(){var t=g(this).data(xe),e="object"==typeof n?n:null;if((t||!/dispose|hide/.test(n))&&(t||(t=new i(this,e),g(this).data(xe,t)),"string"==typeof n)){if("undefined"==typeof t[n])throw new TypeError('No method named "'+n+'"');t[n]();}});},s(i,null,[{key:"VERSION",get:function(){return"4.2.1";}},{key:"Default",get:function(){return Qe;}},{key:"NAME",get:function(){return We;}},{key:"DATA_KEY",get:function(){return xe;}},{key:"Event",get:function(){return Ge;}},{key:"EVENT_KEY",get:function(){return Fe;}},{key:"DefaultType",get:function(){return Be;}}]),i;}(Ue);g.fn[We]=Je._jQueryInterface,g.fn[We].Constructor=Je,g.fn[We].noConflict=function(){return g.fn[We]=qe,Je._jQueryInterface;};var Ze="scrollspy",$e="bs.scrollspy",tn="."+$e,en=g.fn[Ze],nn={offset:10,method:"auto",target:""},on={offset:"number",method:"string",target:"(string|element)"},rn={ACTIVATE:"activate"+tn,SCROLL:"scroll"+tn,LOAD_DATA_API:"load"+tn+".data-api"},sn="dropdown-item",an="active",ln='[data-spy="scroll"]',cn=".nav, .list-group",hn=".nav-link",un=".nav-item",fn=".list-group-item",dn=".dropdown",gn=".dropdown-item",_n=".dropdown-toggle",mn="offset",pn="position",vn=function(){function n(t,e){var n=this;this._element=t,this._scrollElement="BODY"===t.tagName?window:t,this._config=this._getConfig(e),this._selector=this._config.target+" "+hn+","+this._config.target+" "+fn+","+this._config.target+" "+gn,this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,g(this._scrollElement).on(rn.SCROLL,function(t){return n._process(t);}),this.refresh(),this._process();}var t=n.prototype;return t.refresh=function(){var e=this,t=this._scrollElement===this._scrollElement.window?mn:pn,o="auto"===this._config.method?t:this._config.method,r=o===pn?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight(),[].slice.call(document.querySelectorAll(this._selector)).map(function(t){var e,n=_.getSelectorFromElement(t);if(n&&(e=document.querySelector(n)),e){var i=e.getBoundingClientRect();if(i.width||i.height)return[g(e)[o]().top+r,n];}return null;}).filter(function(t){return t;}).sort(function(t,e){return t[0]-e[0];}).forEach(function(t){e._offsets.push(t[0]),e._targets.push(t[1]);});},t.dispose=function(){g.removeData(this._element,$e),g(this._scrollElement).off(tn),this._element=null,this._scrollElement=null,this._config=null,this._selector=null,this._offsets=null,this._targets=null,this._activeTarget=null,this._scrollHeight=null;},t._getConfig=function(t){if("string"!=typeof(t=l({},nn,"object"==typeof t&&t?t:{})).target){var e=g(t.target).attr("id");e||(e=_.getUID(Ze),g(t.target).attr("id",e)),t.target="#"+e;}return _.typeCheckConfig(Ze,t,on),t;},t._getScrollTop=function(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop;},t._getScrollHeight=function(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight);},t._getOffsetHeight=function(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height;},t._process=function(){var t=this._getScrollTop()+this._config.offset,e=this._getScrollHeight(),n=this._config.offset+e-this._getOffsetHeight();if(this._scrollHeight!==e&&this.refresh(),n<=t){var i=this._targets[this._targets.length-1];this._activeTarget!==i&&this._activate(i);}else{if(this._activeTarget&&t<this._offsets[0]&&0<this._offsets[0])return this._activeTarget=null,void this._clear();for(var o=this._offsets.length;o--;){this._activeTarget!==this._targets[o]&&t>=this._offsets[o]&&("undefined"==typeof this._offsets[o+1]||t<this._offsets[o+1])&&this._activate(this._targets[o]);}}},t._activate=function(e){this._activeTarget=e,this._clear();var t=this._selector.split(",").map(function(t){return t+'[data-target="'+e+'"],'+t+'[href="'+e+'"]';}),n=g([].slice.call(document.querySelectorAll(t.join(","))));n.hasClass(sn)?(n.closest(dn).find(_n).addClass(an),n.addClass(an)):(n.addClass(an),n.parents(cn).prev(hn+", "+fn).addClass(an),n.parents(cn).prev(un).children(hn).addClass(an)),g(this._scrollElement).trigger(rn.ACTIVATE,{relatedTarget:e});},t._clear=function(){[].slice.call(document.querySelectorAll(this._selector)).filter(function(t){return t.classList.contains(an);}).forEach(function(t){return t.classList.remove(an);});},n._jQueryInterface=function(e){return this.each(function(){var t=g(this).data($e);if(t||(t=new n(this,"object"==typeof e&&e),g(this).data($e,t)),"string"==typeof e){if("undefined"==typeof t[e])throw new TypeError('No method named "'+e+'"');t[e]();}});},s(n,null,[{key:"VERSION",get:function(){return"4.2.1";}},{key:"Default",get:function(){return nn;}}]),n;}();g(window).on(rn.LOAD_DATA_API,function(){for(var t=[].slice.call(document.querySelectorAll(ln)),e=t.length;e--;){var n=g(t[e]);vn._jQueryInterface.call(n,n.data());}}),g.fn[Ze]=vn._jQueryInterface,g.fn[Ze].Constructor=vn,g.fn[Ze].noConflict=function(){return g.fn[Ze]=en,vn._jQueryInterface;};var En="bs.tab",yn="."+En,Cn=g.fn.tab,Tn={HIDE:"hide"+yn,HIDDEN:"hidden"+yn,SHOW:"show"+yn,SHOWN:"shown"+yn,CLICK_DATA_API:"click"+yn+".data-api"},Sn="dropdown-menu",bn="active",In="disabled",Dn="fade",wn="show",An=".dropdown",Nn=".nav, .list-group",On=".active",kn="> li > .active",Pn='[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',Ln=".dropdown-toggle",jn="> .dropdown-menu .active",Hn=function(){function i(t){this._element=t;}var t=i.prototype;return t.show=function(){var n=this;if(!(this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&g(this._element).hasClass(bn)||g(this._element).hasClass(In))){var t,i,e=g(this._element).closest(Nn)[0],o=_.getSelectorFromElement(this._element);if(e){var r="UL"===e.nodeName||"OL"===e.nodeName?kn:On;i=(i=g.makeArray(g(e).find(r)))[i.length-1];}var s=g.Event(Tn.HIDE,{relatedTarget:this._element}),a=g.Event(Tn.SHOW,{relatedTarget:i});if(i&&g(i).trigger(s),g(this._element).trigger(a),!a.isDefaultPrevented()&&!s.isDefaultPrevented()){o&&(t=document.querySelector(o)),this._activate(this._element,e);var l=function(){var t=g.Event(Tn.HIDDEN,{relatedTarget:n._element}),e=g.Event(Tn.SHOWN,{relatedTarget:i});g(i).trigger(t),g(n._element).trigger(e);};t?this._activate(t,t.parentNode,l):l();}}},t.dispose=function(){g.removeData(this._element,En),this._element=null;},t._activate=function(t,e,n){var i=this,o=(!e||"UL"!==e.nodeName&&"OL"!==e.nodeName?g(e).children(On):g(e).find(kn))[0],r=n&&o&&g(o).hasClass(Dn),s=function(){return i._transitionComplete(t,o,n);};if(o&&r){var a=_.getTransitionDurationFromElement(o);g(o).removeClass(wn).one(_.TRANSITION_END,s).emulateTransitionEnd(a);}else s();},t._transitionComplete=function(t,e,n){if(e){g(e).removeClass(bn);var i=g(e.parentNode).find(jn)[0];i&&g(i).removeClass(bn),"tab"===e.getAttribute("role")&&e.setAttribute("aria-selected",!1);}if(g(t).addClass(bn),"tab"===t.getAttribute("role")&&t.setAttribute("aria-selected",!0),_.reflow(t),g(t).addClass(wn),t.parentNode&&g(t.parentNode).hasClass(Sn)){var o=g(t).closest(An)[0];if(o){var r=[].slice.call(o.querySelectorAll(Ln));g(r).addClass(bn);}t.setAttribute("aria-expanded",!0);}n&&n();},i._jQueryInterface=function(n){return this.each(function(){var t=g(this),e=t.data(En);if(e||(e=new i(this),t.data(En,e)),"string"==typeof n){if("undefined"==typeof e[n])throw new TypeError('No method named "'+n+'"');e[n]();}});},s(i,null,[{key:"VERSION",get:function(){return"4.2.1";}}]),i;}();g(document).on(Tn.CLICK_DATA_API,Pn,function(t){t.preventDefault(),Hn._jQueryInterface.call(g(this),"show");}),g.fn.tab=Hn._jQueryInterface,g.fn.tab.Constructor=Hn,g.fn.tab.noConflict=function(){return g.fn.tab=Cn,Hn._jQueryInterface;};var Rn="toast",Un="bs.toast",Wn="."+Un,xn=g.fn[Rn],Fn={CLICK_DISMISS:"click.dismiss"+Wn,HIDE:"hide"+Wn,HIDDEN:"hidden"+Wn,SHOW:"show"+Wn,SHOWN:"shown"+Wn},qn="fade",Mn="hide",Kn="show",Qn="showing",Bn={animation:"boolean",autohide:"boolean",delay:"number"},Vn={animation:!0,autohide:!0,delay:500},Yn='[data-dismiss="toast"]',Xn=function(){function i(t,e){this._element=t,this._config=this._getConfig(e),this._timeout=null,this._setListeners();}var t=i.prototype;return t.show=function(){var t=this;g(this._element).trigger(Fn.SHOW),this._config.animation&&this._element.classList.add(qn);var e=function(){t._element.classList.remove(Qn),t._element.classList.add(Kn),g(t._element).trigger(Fn.SHOWN),t._config.autohide&&t.hide();};if(this._element.classList.remove(Mn),this._element.classList.add(Qn),this._config.animation){var n=_.getTransitionDurationFromElement(this._element);g(this._element).one(_.TRANSITION_END,e).emulateTransitionEnd(n);}else e();},t.hide=function(t){var e=this;this._element.classList.contains(Kn)&&(g(this._element).trigger(Fn.HIDE),t?this._close():this._timeout=setTimeout(function(){e._close();},this._config.delay));},t.dispose=function(){clearTimeout(this._timeout),this._timeout=null,this._element.classList.contains(Kn)&&this._element.classList.remove(Kn),g(this._element).off(Fn.CLICK_DISMISS),g.removeData(this._element,Un),this._element=null,this._config=null;},t._getConfig=function(t){return t=l({},Vn,g(this._element).data(),"object"==typeof t&&t?t:{}),_.typeCheckConfig(Rn,t,this.constructor.DefaultType),t;},t._setListeners=function(){var t=this;g(this._element).on(Fn.CLICK_DISMISS,Yn,function(){return t.hide(!0);});},t._close=function(){var t=this,e=function(){t._element.classList.add(Mn),g(t._element).trigger(Fn.HIDDEN);};if(this._element.classList.remove(Kn),this._config.animation){var n=_.getTransitionDurationFromElement(this._element);g(this._element).one(_.TRANSITION_END,e).emulateTransitionEnd(n);}else e();},i._jQueryInterface=function(n){return this.each(function(){var t=g(this),e=t.data(Un);if(e||(e=new i(this,"object"==typeof n&&n),t.data(Un,e)),"string"==typeof n){if("undefined"==typeof e[n])throw new TypeError('No method named "'+n+'"');e[n](this);}});},s(i,null,[{key:"VERSION",get:function(){return"4.2.1";}},{key:"DefaultType",get:function(){return Bn;}}]),i;}();g.fn[Rn]=Xn._jQueryInterface,g.fn[Rn].Constructor=Xn,g.fn[Rn].noConflict=function(){return g.fn[Rn]=xn,Xn._jQueryInterface;},function(){if("undefined"==typeof g)throw new TypeError("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");var t=g.fn.jquery.split(" ")[0].split(".");if(t[0]<2&&t[1]<9||1===t[0]&&9===t[1]&&t[2]<1||4<=t[0])throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0");}(),t.Util=_,t.Alert=p,t.Button=P,t.Carousel=lt,t.Collapse=bt,t.Dropdown=Zt,t.Modal=me,t.Popover=Je,t.Scrollspy=vn,t.Tab=Hn,t.Toast=Xn,t.Tooltip=Ue,Object.defineProperty(t,"__esModule",{value:!0});});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2pzL3NyYy91dGlsLmpzIiwiLi4vLi4vanMvc3JjL2FsZXJ0LmpzIiwiLi4vLi4vanMvc3JjL2J1dHRvbi5qcyIsIi4uLy4uL2pzL3NyYy9jYXJvdXNlbC5qcyIsIi4uLy4uL2pzL3NyYy9jb2xsYXBzZS5qcyIsIi4uLy4uL2pzL3NyYy9kcm9wZG93bi5qcyIsIi4uLy4uL2pzL3NyYy9tb2RhbC5qcyIsIi4uLy4uL2pzL3NyYy90b29sdGlwLmpzIiwiLi4vLi4vanMvc3JjL3BvcG92ZXIuanMiLCIuLi8uLi9qcy9zcmMvc2Nyb2xsc3B5LmpzIiwiLi4vLi4vanMvc3JjL3RhYi5qcyIsIi4uLy4uL2pzL3NyYy90b2FzdC5qcyIsIi4uLy4uL2pzL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJUUkFOU0lUSU9OX0VORCIsInRyYW5zaXRpb25FbmRFbXVsYXRvciIsImR1cmF0aW9uIiwiY2FsbGVkIiwiJCIsInRoaXMiLCJvbmUiLCJVdGlsIiwic2V0VGltZW91dCIsInRyaWdnZXJUcmFuc2l0aW9uRW5kIiwiX3RoaXMiLCJnZXRVSUQiLCJwcmVmaXgiLCJNYXRoIiwicmFuZG9tIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImdldFNlbGVjdG9yRnJvbUVsZW1lbnQiLCJlbGVtZW50Iiwic2VsZWN0b3IiLCJnZXRBdHRyaWJ1dGUiLCJocmVmQXR0ciIsInRyaW0iLCJxdWVyeVNlbGVjdG9yIiwiZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQiLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJjc3MiLCJ0cmFuc2l0aW9uRGVsYXkiLCJmbG9hdFRyYW5zaXRpb25EdXJhdGlvbiIsInBhcnNlRmxvYXQiLCJmbG9hdFRyYW5zaXRpb25EZWxheSIsInNwbGl0IiwicmVmbG93Iiwib2Zmc2V0SGVpZ2h0IiwidHJpZ2dlciIsInN1cHBvcnRzVHJhbnNpdGlvbkVuZCIsIkJvb2xlYW4iLCJpc0VsZW1lbnQiLCJvYmoiLCJub2RlVHlwZSIsInR5cGVDaGVja0NvbmZpZyIsImNvbXBvbmVudE5hbWUiLCJjb25maWciLCJjb25maWdUeXBlcyIsInByb3BlcnR5IiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZXhwZWN0ZWRUeXBlcyIsInZhbHVlIiwidmFsdWVUeXBlIiwidG9TdHJpbmciLCJtYXRjaCIsInRvTG93ZXJDYXNlIiwiUmVnRXhwIiwidGVzdCIsIkVycm9yIiwidG9VcHBlckNhc2UiLCJmaW5kU2hhZG93Um9vdCIsImRvY3VtZW50RWxlbWVudCIsImF0dGFjaFNoYWRvdyIsImdldFJvb3ROb2RlIiwiU2hhZG93Um9vdCIsInBhcmVudE5vZGUiLCJyb290IiwiZm4iLCJlbXVsYXRlVHJhbnNpdGlvbkVuZCIsImV2ZW50Iiwic3BlY2lhbCIsImJpbmRUeXBlIiwiZGVsZWdhdGVUeXBlIiwiaGFuZGxlIiwidGFyZ2V0IiwiaXMiLCJoYW5kbGVPYmoiLCJoYW5kbGVyIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJOQU1FIiwiREFUQV9LRVkiLCJFVkVOVF9LRVkiLCJKUVVFUllfTk9fQ09ORkxJQ1QiLCJFdmVudCIsIkNMT1NFIiwiQ0xPU0VEIiwiQ0xJQ0tfREFUQV9BUEkiLCJDbGFzc05hbWUiLCJBbGVydCIsIl9lbGVtZW50IiwiY2xvc2UiLCJyb290RWxlbWVudCIsIl9nZXRSb290RWxlbWVudCIsIl90cmlnZ2VyQ2xvc2VFdmVudCIsImlzRGVmYXVsdFByZXZlbnRlZCIsIl9yZW1vdmVFbGVtZW50IiwiZGlzcG9zZSIsInJlbW92ZURhdGEiLCJwYXJlbnQiLCJjbG9zZXN0IiwiY2xvc2VFdmVudCIsInJlbW92ZUNsYXNzIiwiaGFzQ2xhc3MiLCJfZGVzdHJveUVsZW1lbnQiLCJkZXRhY2giLCJyZW1vdmUiLCJfalF1ZXJ5SW50ZXJmYWNlIiwiZWFjaCIsIiRlbGVtZW50IiwiZGF0YSIsIl9oYW5kbGVEaXNtaXNzIiwiYWxlcnRJbnN0YW5jZSIsInByZXZlbnREZWZhdWx0Iiwib24iLCJDb25zdHJ1Y3RvciIsIm5vQ29uZmxpY3QiLCJEQVRBX0FQSV9LRVkiLCJTZWxlY3RvciIsIkZPQ1VTX0JMVVJfREFUQV9BUEkiLCJCdXR0b24iLCJ0b2dnbGUiLCJ0cmlnZ2VyQ2hhbmdlRXZlbnQiLCJhZGRBcmlhUHJlc3NlZCIsImlucHV0IiwidHlwZSIsImNoZWNrZWQiLCJjbGFzc0xpc3QiLCJjb250YWlucyIsImFjdGl2ZUVsZW1lbnQiLCJoYXNBdHRyaWJ1dGUiLCJmb2N1cyIsInNldEF0dHJpYnV0ZSIsInRvZ2dsZUNsYXNzIiwiYnV0dG9uIiwiRGVmYXVsdCIsImludGVydmFsIiwia2V5Ym9hcmQiLCJzbGlkZSIsInBhdXNlIiwid3JhcCIsInRvdWNoIiwiRGVmYXVsdFR5cGUiLCJEaXJlY3Rpb24iLCJTTElERSIsIlNMSUQiLCJLRVlET1dOIiwiTU9VU0VFTlRFUiIsIk1PVVNFTEVBVkUiLCJUT1VDSFNUQVJUIiwiVE9VQ0hNT1ZFIiwiVE9VQ0hFTkQiLCJQT0lOVEVSRE9XTiIsIlBPSU5URVJVUCIsIkRSQUdfU1RBUlQiLCJMT0FEX0RBVEFfQVBJIiwiUG9pbnRlclR5cGUiLCJUT1VDSCIsIlBFTiIsIkNhcm91c2VsIiwiX2l0ZW1zIiwiX2ludGVydmFsIiwiX2FjdGl2ZUVsZW1lbnQiLCJfaXNQYXVzZWQiLCJfaXNTbGlkaW5nIiwidG91Y2hUaW1lb3V0IiwidG91Y2hTdGFydFgiLCJ0b3VjaERlbHRhWCIsIl9jb25maWciLCJfZ2V0Q29uZmlnIiwiX2luZGljYXRvcnNFbGVtZW50IiwiX3RvdWNoU3VwcG9ydGVkIiwibmF2aWdhdG9yIiwibWF4VG91Y2hQb2ludHMiLCJfcG9pbnRlckV2ZW50Iiwid2luZG93IiwiUG9pbnRlckV2ZW50IiwiTVNQb2ludGVyRXZlbnQiLCJfYWRkRXZlbnRMaXN0ZW5lcnMiLCJuZXh0IiwiX3NsaWRlIiwibmV4dFdoZW5WaXNpYmxlIiwiaGlkZGVuIiwicHJldiIsImN5Y2xlIiwiY2xlYXJJbnRlcnZhbCIsInNldEludGVydmFsIiwidmlzaWJpbGl0eVN0YXRlIiwiYmluZCIsInRvIiwiaW5kZXgiLCJhY3RpdmVJbmRleCIsIl9nZXRJdGVtSW5kZXgiLCJsZW5ndGgiLCJkaXJlY3Rpb24iLCJvZmYiLCJfb2JqZWN0U3ByZWFkIiwiX2hhbmRsZVN3aXBlIiwiYWJzRGVsdGF4IiwiYWJzIiwiX3RoaXMyIiwiX2tleWRvd24iLCJfYWRkVG91Y2hFdmVudExpc3RlbmVycyIsInN0YXJ0IiwiX3RoaXMzIiwib3JpZ2luYWxFdmVudCIsInBvaW50ZXJUeXBlIiwiY2xpZW50WCIsInRvdWNoZXMiLCJlbmQiLCJjbGVhclRpbWVvdXQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZSIsImFkZCIsInRhZ05hbWUiLCJ3aGljaCIsInNsaWNlIiwiaW5kZXhPZiIsIl9nZXRJdGVtQnlEaXJlY3Rpb24iLCJpc05leHREaXJlY3Rpb24iLCJpc1ByZXZEaXJlY3Rpb24iLCJsYXN0SXRlbUluZGV4IiwiaXRlbUluZGV4IiwiX3RyaWdnZXJTbGlkZUV2ZW50IiwicmVsYXRlZFRhcmdldCIsImV2ZW50RGlyZWN0aW9uTmFtZSIsInRhcmdldEluZGV4IiwiZnJvbUluZGV4Iiwic2xpZGVFdmVudCIsImZyb20iLCJfc2V0QWN0aXZlSW5kaWNhdG9yRWxlbWVudCIsImluZGljYXRvcnMiLCJuZXh0SW5kaWNhdG9yIiwiY2hpbGRyZW4iLCJhZGRDbGFzcyIsImRpcmVjdGlvbmFsQ2xhc3NOYW1lIiwib3JkZXJDbGFzc05hbWUiLCJhY3RpdmVFbGVtZW50SW5kZXgiLCJuZXh0RWxlbWVudCIsIm5leHRFbGVtZW50SW5kZXgiLCJpc0N5Y2xpbmciLCJzbGlkRXZlbnQiLCJuZXh0RWxlbWVudEludGVydmFsIiwicGFyc2VJbnQiLCJkZWZhdWx0SW50ZXJ2YWwiLCJfdGhpczQiLCJhY3Rpb24iLCJUeXBlRXJyb3IiLCJfZGF0YUFwaUNsaWNrSGFuZGxlciIsInNsaWRlSW5kZXgiLCJjYXJvdXNlbHMiLCJpIiwibGVuIiwiJGNhcm91c2VsIiwiU0hPVyIsIlNIT1dOIiwiSElERSIsIkhJRERFTiIsIkRpbWVuc2lvbiIsIkNvbGxhcHNlIiwiX2lzVHJhbnNpdGlvbmluZyIsIl90cmlnZ2VyQXJyYXkiLCJpZCIsInRvZ2dsZUxpc3QiLCJlbGVtIiwiZmlsdGVyRWxlbWVudCIsImZpbHRlciIsImZvdW5kRWxlbSIsIl9zZWxlY3RvciIsInB1c2giLCJfcGFyZW50IiwiX2dldFBhcmVudCIsIl9hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3MiLCJoaWRlIiwic2hvdyIsImFjdGl2ZXMiLCJhY3RpdmVzRGF0YSIsIm5vdCIsInN0YXJ0RXZlbnQiLCJkaW1lbnNpb24iLCJfZ2V0RGltZW5zaW9uIiwic3R5bGUiLCJhdHRyIiwic2V0VHJhbnNpdGlvbmluZyIsInNjcm9sbFNpemUiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJ0cmlnZ2VyQXJyYXlMZW5ndGgiLCJpc1RyYW5zaXRpb25pbmciLCJqcXVlcnkiLCJfZ2V0VGFyZ2V0RnJvbUVsZW1lbnQiLCJ0cmlnZ2VyQXJyYXkiLCJpc09wZW4iLCIkdGhpcyIsImN1cnJlbnRUYXJnZXQiLCIkdHJpZ2dlciIsInNlbGVjdG9ycyIsIiR0YXJnZXQiLCJSRUdFWFBfS0VZRE9XTiIsIkFSUk9XX1VQX0tFWUNPREUiLCJDTElDSyIsIktFWURPV05fREFUQV9BUEkiLCJLRVlVUF9EQVRBX0FQSSIsIkF0dGFjaG1lbnRNYXAiLCJvZmZzZXQiLCJmbGlwIiwiYm91bmRhcnkiLCJyZWZlcmVuY2UiLCJkaXNwbGF5IiwiRHJvcGRvd24iLCJfcG9wcGVyIiwiX21lbnUiLCJfZ2V0TWVudUVsZW1lbnQiLCJfaW5OYXZiYXIiLCJfZGV0ZWN0TmF2YmFyIiwiZGlzYWJsZWQiLCJfZ2V0UGFyZW50RnJvbUVsZW1lbnQiLCJpc0FjdGl2ZSIsIl9jbGVhck1lbnVzIiwic2hvd0V2ZW50IiwiUG9wcGVyIiwicmVmZXJlbmNlRWxlbWVudCIsIl9nZXRQb3BwZXJDb25maWciLCJib2R5Iiwibm9vcCIsImhpZGVFdmVudCIsImRlc3Ryb3kiLCJ1cGRhdGUiLCJzY2hlZHVsZVVwZGF0ZSIsInN0b3BQcm9wYWdhdGlvbiIsImNvbnN0cnVjdG9yIiwiX2dldFBsYWNlbWVudCIsIiRwYXJlbnREcm9wZG93biIsInBsYWNlbWVudCIsIm9mZnNldENvbmYiLCJvZmZzZXRzIiwicG9wcGVyQ29uZmlnIiwibW9kaWZpZXJzIiwiZW5hYmxlZCIsInByZXZlbnRPdmVyZmxvdyIsImJvdW5kYXJpZXNFbGVtZW50IiwiYXBwbHlTdHlsZSIsInRvZ2dsZXMiLCJjb250ZXh0IiwiY2xpY2tFdmVudCIsImRyb3Bkb3duTWVudSIsIl9kYXRhQXBpS2V5ZG93bkhhbmRsZXIiLCJpdGVtcyIsImJhY2tkcm9wIiwiRk9DVVNJTiIsIlJFU0laRSIsIkNMSUNLX0RJU01JU1MiLCJLRVlET1dOX0RJU01JU1MiLCJNT1VTRVVQX0RJU01JU1MiLCJNT1VTRURPV05fRElTTUlTUyIsIk1vZGFsIiwiX2RpYWxvZyIsIl9iYWNrZHJvcCIsIl9pc1Nob3duIiwiX2lzQm9keU92ZXJmbG93aW5nIiwiX2lnbm9yZUJhY2tkcm9wQ2xpY2siLCJfc2Nyb2xsYmFyV2lkdGgiLCJfY2hlY2tTY3JvbGxiYXIiLCJfc2V0U2Nyb2xsYmFyIiwiX2FkanVzdERpYWxvZyIsIl9zZXRFc2NhcGVFdmVudCIsIl9zZXRSZXNpemVFdmVudCIsIl9zaG93QmFja2Ryb3AiLCJfc2hvd0VsZW1lbnQiLCJ0cmFuc2l0aW9uIiwiX2hpZGVNb2RhbCIsImZvckVhY2giLCJodG1sRWxlbWVudCIsImhhbmRsZVVwZGF0ZSIsIk5vZGUiLCJFTEVNRU5UX05PREUiLCJhcHBlbmRDaGlsZCIsInJlbW92ZUF0dHJpYnV0ZSIsInNjcm9sbFRvcCIsIl9lbmZvcmNlRm9jdXMiLCJzaG93bkV2ZW50IiwidHJhbnNpdGlvbkNvbXBsZXRlIiwiaGFzIiwiX3RoaXM1IiwiX3RoaXM2IiwiX3RoaXM3IiwiX3Jlc2V0QWRqdXN0bWVudHMiLCJfcmVzZXRTY3JvbGxiYXIiLCJfcmVtb3ZlQmFja2Ryb3AiLCJjYWxsYmFjayIsImFuaW1hdGUiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lIiwiYXBwZW5kVG8iLCJfdGhpczgiLCJiYWNrZHJvcFRyYW5zaXRpb25EdXJhdGlvbiIsImNhbGxiYWNrUmVtb3ZlIiwiaXNNb2RhbE92ZXJmbG93aW5nIiwic2Nyb2xsSGVpZ2h0IiwiY2xpZW50SGVpZ2h0IiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJyZWN0IiwibGVmdCIsInJpZ2h0IiwiaW5uZXJXaWR0aCIsIl9nZXRTY3JvbGxiYXJXaWR0aCIsImZpeGVkQ29udGVudCIsInN0aWNreUNvbnRlbnQiLCJhY3R1YWxQYWRkaW5nIiwiY2FsY3VsYXRlZFBhZGRpbmciLCJfdGhpczkiLCJhY3R1YWxNYXJnaW4iLCJtYXJnaW5SaWdodCIsImNhbGN1bGF0ZWRNYXJnaW4iLCJwYWRkaW5nIiwiZWxlbWVudHMiLCJtYXJnaW4iLCJzY3JvbGxEaXYiLCJzY3JvbGxiYXJXaWR0aCIsIndpZHRoIiwiY2xpZW50V2lkdGgiLCJyZW1vdmVDaGlsZCIsIl90aGlzMTAiLCJDTEFTU19QUkVGSVgiLCJCU0NMU19QUkVGSVhfUkVHRVgiLCJhbmltYXRpb24iLCJ0ZW1wbGF0ZSIsInRpdGxlIiwiZGVsYXkiLCJodG1sIiwiY29udGFpbmVyIiwiZmFsbGJhY2tQbGFjZW1lbnQiLCJBVVRPIiwiVE9QIiwiUklHSFQiLCJCT1RUT00iLCJMRUZUIiwiSG92ZXJTdGF0ZSIsIklOU0VSVEVEIiwiRk9DVVNPVVQiLCJUcmlnZ2VyIiwiVG9vbHRpcCIsIl9pc0VuYWJsZWQiLCJfdGltZW91dCIsIl9ob3ZlclN0YXRlIiwiX2FjdGl2ZVRyaWdnZXIiLCJ0aXAiLCJfc2V0TGlzdGVuZXJzIiwiZW5hYmxlIiwiZGlzYWJsZSIsInRvZ2dsZUVuYWJsZWQiLCJkYXRhS2V5IiwiX2dldERlbGVnYXRlQ29uZmlnIiwiY2xpY2siLCJfaXNXaXRoQWN0aXZlVHJpZ2dlciIsIl9lbnRlciIsIl9sZWF2ZSIsImdldFRpcEVsZW1lbnQiLCJpc1dpdGhDb250ZW50Iiwic2hhZG93Um9vdCIsImlzSW5UaGVEb20iLCJvd25lckRvY3VtZW50IiwidGlwSWQiLCJzZXRDb250ZW50IiwiYXR0YWNobWVudCIsIl9nZXRBdHRhY2htZW50IiwiYWRkQXR0YWNobWVudENsYXNzIiwiX2dldENvbnRhaW5lciIsImJlaGF2aW9yIiwiYXJyb3ciLCJvbkNyZWF0ZSIsIm9yaWdpbmFsUGxhY2VtZW50IiwiX2hhbmRsZVBvcHBlclBsYWNlbWVudENoYW5nZSIsIm9uVXBkYXRlIiwiY29tcGxldGUiLCJfZml4VHJhbnNpdGlvbiIsInByZXZIb3ZlclN0YXRlIiwiX2NsZWFuVGlwQ2xhc3MiLCJnZXRUaXRsZSIsInNldEVsZW1lbnRDb250ZW50IiwiY29udGVudCIsImVtcHR5IiwiYXBwZW5kIiwidGV4dCIsImZpbmQiLCJldmVudEluIiwiZXZlbnRPdXQiLCJfZml4VGl0bGUiLCJ0aXRsZVR5cGUiLCJrZXkiLCIkdGlwIiwidGFiQ2xhc3MiLCJqb2luIiwicG9wcGVyRGF0YSIsInBvcHBlckluc3RhbmNlIiwiaW5zdGFuY2UiLCJwb3BwZXIiLCJpbml0Q29uZmlnQW5pbWF0aW9uIiwiUG9wb3ZlciIsIl9nZXRDb250ZW50IiwibWV0aG9kIiwiQUNUSVZBVEUiLCJTQ1JPTEwiLCJPZmZzZXRNZXRob2QiLCJTY3JvbGxTcHkiLCJfc2Nyb2xsRWxlbWVudCIsIl9vZmZzZXRzIiwiX3RhcmdldHMiLCJfYWN0aXZlVGFyZ2V0IiwiX3Njcm9sbEhlaWdodCIsIl9wcm9jZXNzIiwicmVmcmVzaCIsImF1dG9NZXRob2QiLCJvZmZzZXRNZXRob2QiLCJvZmZzZXRCYXNlIiwiX2dldFNjcm9sbFRvcCIsIl9nZXRTY3JvbGxIZWlnaHQiLCJtYXAiLCJ0YXJnZXRTZWxlY3RvciIsInRhcmdldEJDUiIsImhlaWdodCIsInRvcCIsIml0ZW0iLCJzb3J0IiwiYSIsImIiLCJwYWdlWU9mZnNldCIsIm1heCIsIl9nZXRPZmZzZXRIZWlnaHQiLCJpbm5lckhlaWdodCIsIm1heFNjcm9sbCIsIl9hY3RpdmF0ZSIsIl9jbGVhciIsInF1ZXJpZXMiLCIkbGluayIsInBhcmVudHMiLCJub2RlIiwic2Nyb2xsU3B5cyIsIiRzcHkiLCJUYWIiLCJwcmV2aW91cyIsImxpc3RFbGVtZW50IiwiaXRlbVNlbGVjdG9yIiwibm9kZU5hbWUiLCJtYWtlQXJyYXkiLCJoaWRkZW5FdmVudCIsImFjdGl2ZSIsIl90cmFuc2l0aW9uQ29tcGxldGUiLCJkcm9wZG93bkNoaWxkIiwiZHJvcGRvd25FbGVtZW50IiwiZHJvcGRvd25Ub2dnbGVMaXN0IiwiYXV0b2hpZGUiLCJUb2FzdCIsIndpdGhvdXRUaW1lb3V0IiwiX2Nsb3NlIiwidmVyc2lvbiJdLCJtYXBwaW5ncyI6Ijs7Ozs4L0JBZUEsR0FBTUEsQ0FBQUEsQ0FBQUEsQ0FBaUIsZUFBdkIsQ0FzQkEsUUFBU0MsQ0FBQUEsQ0FBVCxDQUErQkMsQ0FBL0IsQ0FBK0JBLENBQVUsR0FBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQ25DQyxDQUFBQSxDQUFBQSxDQUFTLENBRDBCLENBYXZDLE1BVkFDLENBQUFBLENBQUFBLENBQUVDLElBQUZELENBQUFBLENBQVFFLEdBQVJGLENBQVlHLENBQUFBLENBQUtQLGNBQWpCSSxDQUFpQyxVQUFBLENBQy9CRCxDQUFBQSxDQUFBQSxDQUFTLENBQVRBLENBQVMsQ0FEWEMsRUFJQUksVUFBQUEsQ0FBVyxVQUFBLENBQ0pMLENBQUFBLEVBQ0hJLENBQUFBLENBQUtFLG9CQUFMRixDQUEwQkcsQ0FBMUJILENBREdKLENBQ3VCTyxDQUY5QkYsQ0FJR04sQ0FKSE0sQ0FKQUosQ0FVT0MsSUFBUCxDQWNGLElBQU1FLENBQUFBLENBQUFBLENBQU8sQ0FFWFAsY0FBQUEsQ0FBZ0IsaUJBRkwsQ0FJWFcsTUFBQUEsQ0FKVyxTQUlKQyxDQUpJLENBSUpBLENBQ0wsS0FFRUEsQ0FBQUEsRUFBQUEsQ0FBQUEsRUF2RFUsSUF1REdDLElBQUFBLENBQUtDLE1BQUxELEVBQWJELENBQUFBLENBQ09HLFFBQUFBLENBQVNDLGNBQVRELENBQXdCSCxDQUF4QkcsQ0FIVCxFQUdpQ0gsQ0FDakMsTUFBT0EsQ0FBQUEsQ0FBUCxDQUFPQSxDQVRF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QSxDQUFBLEtBQUEsQ0FBQSxFRGtNQUEsQ0NsTUEsQ0FBQSxDQUFBLE9BQUEsQ0FBQSxFRGtNQUEsQ0NsTUEsTUFBQSxDQUFBLGNBQUEsQ0FBQSxDQUFBLENBQUEsWUFBQSxDQUFBLENBQUEsS0FBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLENEa01BQSxDQ2xNQSxDIiwiZmlsZSI6ImxpYnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY0LjIuMSk6IHV0aWwuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmltcG9ydCAkIGZyb20gJ2pxdWVyeSdcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIFByaXZhdGUgVHJhbnNpdGlvbkVuZCBIZWxwZXJzXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jb25zdCBUUkFOU0lUSU9OX0VORCA9ICd0cmFuc2l0aW9uZW5kJ1xuY29uc3QgTUFYX1VJRCA9IDEwMDAwMDBcbmNvbnN0IE1JTExJU0VDT05EU19NVUxUSVBMSUVSID0gMTAwMFxuXG4vLyBTaG91dG91dCBBbmd1c0Nyb2xsIChodHRwczovL2dvby5nbC9weHdRR3ApXG5mdW5jdGlvbiB0b1R5cGUob2JqKSB7XG4gIHJldHVybiB7fS50b1N0cmluZy5jYWxsKG9iaikubWF0Y2goL1xccyhbYS16XSspL2kpWzFdLnRvTG93ZXJDYXNlKClcbn1cblxuZnVuY3Rpb24gZ2V0U3BlY2lhbFRyYW5zaXRpb25FbmRFdmVudCgpIHtcbiAgcmV0dXJuIHtcbiAgICBiaW5kVHlwZTogVFJBTlNJVElPTl9FTkQsXG4gICAgZGVsZWdhdGVUeXBlOiBUUkFOU0lUSU9OX0VORCxcbiAgICBoYW5kbGUoZXZlbnQpIHtcbiAgICAgIGlmICgkKGV2ZW50LnRhcmdldCkuaXModGhpcykpIHtcbiAgICAgICAgcmV0dXJuIGV2ZW50LmhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgLy8gZXNsaW50LWRpc2FibGUtbGluZSBwcmVmZXItcmVzdC1wYXJhbXNcbiAgICAgIH1cbiAgICAgIHJldHVybiB1bmRlZmluZWQgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZmluZWRcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdHJhbnNpdGlvbkVuZEVtdWxhdG9yKGR1cmF0aW9uKSB7XG4gIGxldCBjYWxsZWQgPSBmYWxzZVxuXG4gICQodGhpcykub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsICgpID0+IHtcbiAgICBjYWxsZWQgPSB0cnVlXG4gIH0pXG5cbiAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgaWYgKCFjYWxsZWQpIHtcbiAgICAgIFV0aWwudHJpZ2dlclRyYW5zaXRpb25FbmQodGhpcylcbiAgICB9XG4gIH0sIGR1cmF0aW9uKVxuXG4gIHJldHVybiB0aGlzXG59XG5cbmZ1bmN0aW9uIHNldFRyYW5zaXRpb25FbmRTdXBwb3J0KCkge1xuICAkLmZuLmVtdWxhdGVUcmFuc2l0aW9uRW5kID0gdHJhbnNpdGlvbkVuZEVtdWxhdG9yXG4gICQuZXZlbnQuc3BlY2lhbFtVdGlsLlRSQU5TSVRJT05fRU5EXSA9IGdldFNwZWNpYWxUcmFuc2l0aW9uRW5kRXZlbnQoKVxufVxuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBQdWJsaWMgVXRpbCBBcGlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuY29uc3QgVXRpbCA9IHtcblxuICBUUkFOU0lUSU9OX0VORDogJ2JzVHJhbnNpdGlvbkVuZCcsXG5cbiAgZ2V0VUlEKHByZWZpeCkge1xuICAgIGRvIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1iaXR3aXNlXG4gICAgICBwcmVmaXggKz0gfn4oTWF0aC5yYW5kb20oKSAqIE1BWF9VSUQpIC8vIFwifn5cIiBhY3RzIGxpa2UgYSBmYXN0ZXIgTWF0aC5mbG9vcigpIGhlcmVcbiAgICB9IHdoaWxlIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChwcmVmaXgpKVxuICAgIHJldHVybiBwcmVmaXhcbiAgfSxcblxuICBnZXRTZWxlY3RvckZyb21FbGVtZW50KGVsZW1lbnQpIHtcbiAgICBsZXQgc2VsZWN0b3IgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS10YXJnZXQnKVxuXG4gICAgaWYgKCFzZWxlY3RvciB8fCBzZWxlY3RvciA9PT0gJyMnKSB7XG4gICAgICBjb25zdCBocmVmQXR0ciA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdocmVmJylcbiAgICAgIHNlbGVjdG9yID0gaHJlZkF0dHIgJiYgaHJlZkF0dHIgIT09ICcjJyA/IGhyZWZBdHRyLnRyaW0oKSA6ICcnXG4gICAgfVxuXG4gICAgcmV0dXJuIHNlbGVjdG9yICYmIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpID8gc2VsZWN0b3IgOiBudWxsXG4gIH0sXG5cbiAgZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQoZWxlbWVudCkge1xuICAgIGlmICghZWxlbWVudCkge1xuICAgICAgcmV0dXJuIDBcbiAgICB9XG5cbiAgICAvLyBHZXQgdHJhbnNpdGlvbi1kdXJhdGlvbiBvZiB0aGUgZWxlbWVudFxuICAgIGxldCB0cmFuc2l0aW9uRHVyYXRpb24gPSAkKGVsZW1lbnQpLmNzcygndHJhbnNpdGlvbi1kdXJhdGlvbicpXG4gICAgbGV0IHRyYW5zaXRpb25EZWxheSA9ICQoZWxlbWVudCkuY3NzKCd0cmFuc2l0aW9uLWRlbGF5JylcblxuICAgIGNvbnN0IGZsb2F0VHJhbnNpdGlvbkR1cmF0aW9uID0gcGFyc2VGbG9hdCh0cmFuc2l0aW9uRHVyYXRpb24pXG4gICAgY29uc3QgZmxvYXRUcmFuc2l0aW9uRGVsYXkgPSBwYXJzZUZsb2F0KHRyYW5zaXRpb25EZWxheSlcblxuICAgIC8vIFJldHVybiAwIGlmIGVsZW1lbnQgb3IgdHJhbnNpdGlvbiBkdXJhdGlvbiBpcyBub3QgZm91bmRcbiAgICBpZiAoIWZsb2F0VHJhbnNpdGlvbkR1cmF0aW9uICYmICFmbG9hdFRyYW5zaXRpb25EZWxheSkge1xuICAgICAgcmV0dXJuIDBcbiAgICB9XG5cbiAgICAvLyBJZiBtdWx0aXBsZSBkdXJhdGlvbnMgYXJlIGRlZmluZWQsIHRha2UgdGhlIGZpcnN0XG4gICAgdHJhbnNpdGlvbkR1cmF0aW9uID0gdHJhbnNpdGlvbkR1cmF0aW9uLnNwbGl0KCcsJylbMF1cbiAgICB0cmFuc2l0aW9uRGVsYXkgPSB0cmFuc2l0aW9uRGVsYXkuc3BsaXQoJywnKVswXVxuXG4gICAgcmV0dXJuIChwYXJzZUZsb2F0KHRyYW5zaXRpb25EdXJhdGlvbikgKyBwYXJzZUZsb2F0KHRyYW5zaXRpb25EZWxheSkpICogTUlMTElTRUNPTkRTX01VTFRJUExJRVJcbiAgfSxcblxuICByZWZsb3coZWxlbWVudCkge1xuICAgIHJldHVybiBlbGVtZW50Lm9mZnNldEhlaWdodFxuICB9LFxuXG4gIHRyaWdnZXJUcmFuc2l0aW9uRW5kKGVsZW1lbnQpIHtcbiAgICAkKGVsZW1lbnQpLnRyaWdnZXIoVFJBTlNJVElPTl9FTkQpXG4gIH0sXG5cbiAgLy8gVE9ETzogUmVtb3ZlIGluIHY1XG4gIHN1cHBvcnRzVHJhbnNpdGlvbkVuZCgpIHtcbiAgICByZXR1cm4gQm9vbGVhbihUUkFOU0lUSU9OX0VORClcbiAgfSxcblxuICBpc0VsZW1lbnQob2JqKSB7XG4gICAgcmV0dXJuIChvYmpbMF0gfHwgb2JqKS5ub2RlVHlwZVxuICB9LFxuXG4gIHR5cGVDaGVja0NvbmZpZyhjb21wb25lbnROYW1lLCBjb25maWcsIGNvbmZpZ1R5cGVzKSB7XG4gICAgZm9yIChjb25zdCBwcm9wZXJ0eSBpbiBjb25maWdUeXBlcykge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChjb25maWdUeXBlcywgcHJvcGVydHkpKSB7XG4gICAgICAgIGNvbnN0IGV4cGVjdGVkVHlwZXMgPSBjb25maWdUeXBlc1twcm9wZXJ0eV1cbiAgICAgICAgY29uc3QgdmFsdWUgICAgICAgICA9IGNvbmZpZ1twcm9wZXJ0eV1cbiAgICAgICAgY29uc3QgdmFsdWVUeXBlICAgICA9IHZhbHVlICYmIFV0aWwuaXNFbGVtZW50KHZhbHVlKVxuICAgICAgICAgID8gJ2VsZW1lbnQnIDogdG9UeXBlKHZhbHVlKVxuXG4gICAgICAgIGlmICghbmV3IFJlZ0V4cChleHBlY3RlZFR5cGVzKS50ZXN0KHZhbHVlVHlwZSkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICBgJHtjb21wb25lbnROYW1lLnRvVXBwZXJDYXNlKCl9OiBgICtcbiAgICAgICAgICAgIGBPcHRpb24gXCIke3Byb3BlcnR5fVwiIHByb3ZpZGVkIHR5cGUgXCIke3ZhbHVlVHlwZX1cIiBgICtcbiAgICAgICAgICAgIGBidXQgZXhwZWN0ZWQgdHlwZSBcIiR7ZXhwZWN0ZWRUeXBlc31cIi5gKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGZpbmRTaGFkb3dSb290KGVsZW1lbnQpIHtcbiAgICBpZiAoIWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5hdHRhY2hTaGFkb3cpIHtcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuXG4gICAgLy8gQ2FuIGZpbmQgdGhlIHNoYWRvdyByb290IG90aGVyd2lzZSBpdCdsbCByZXR1cm4gdGhlIGRvY3VtZW50XG4gICAgaWYgKHR5cGVvZiBlbGVtZW50LmdldFJvb3ROb2RlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBjb25zdCByb290ID0gZWxlbWVudC5nZXRSb290Tm9kZSgpXG4gICAgICByZXR1cm4gcm9vdCBpbnN0YW5jZW9mIFNoYWRvd1Jvb3QgPyByb290IDogbnVsbFxuICAgIH1cblxuICAgIGlmIChlbGVtZW50IGluc3RhbmNlb2YgU2hhZG93Um9vdCkge1xuICAgICAgcmV0dXJuIGVsZW1lbnRcbiAgICB9XG5cbiAgICAvLyB3aGVuIHdlIGRvbid0IGZpbmQgYSBzaGFkb3cgcm9vdFxuICAgIGlmICghZWxlbWVudC5wYXJlbnROb2RlKSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cblxuICAgIHJldHVybiBVdGlsLmZpbmRTaGFkb3dSb290KGVsZW1lbnQucGFyZW50Tm9kZSlcbiAgfVxufVxuXG5zZXRUcmFuc2l0aW9uRW5kU3VwcG9ydCgpXG5cbmV4cG9ydCBkZWZhdWx0IFV0aWxcbiIsIi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjQuMi4xKTogYWxlcnQuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmltcG9ydCAkIGZyb20gJ2pxdWVyeSdcbmltcG9ydCBVdGlsIGZyb20gJy4vdXRpbCdcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvbnN0YW50c1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuY29uc3QgTkFNRSAgICAgICAgICAgICAgICA9ICdhbGVydCdcbmNvbnN0IFZFUlNJT04gICAgICAgICAgICAgPSAnNC4yLjEnXG5jb25zdCBEQVRBX0tFWSAgICAgICAgICAgID0gJ2JzLmFsZXJ0J1xuY29uc3QgRVZFTlRfS0VZICAgICAgICAgICA9IGAuJHtEQVRBX0tFWX1gXG5jb25zdCBEQVRBX0FQSV9LRVkgICAgICAgID0gJy5kYXRhLWFwaSdcbmNvbnN0IEpRVUVSWV9OT19DT05GTElDVCAgPSAkLmZuW05BTUVdXG5cbmNvbnN0IFNlbGVjdG9yID0ge1xuICBESVNNSVNTIDogJ1tkYXRhLWRpc21pc3M9XCJhbGVydFwiXSdcbn1cblxuY29uc3QgRXZlbnQgPSB7XG4gIENMT1NFICAgICAgICAgIDogYGNsb3NlJHtFVkVOVF9LRVl9YCxcbiAgQ0xPU0VEICAgICAgICAgOiBgY2xvc2VkJHtFVkVOVF9LRVl9YCxcbiAgQ0xJQ0tfREFUQV9BUEkgOiBgY2xpY2ske0VWRU5UX0tFWX0ke0RBVEFfQVBJX0tFWX1gXG59XG5cbmNvbnN0IENsYXNzTmFtZSA9IHtcbiAgQUxFUlQgOiAnYWxlcnQnLFxuICBGQURFICA6ICdmYWRlJyxcbiAgU0hPVyAgOiAnc2hvdydcbn1cblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENsYXNzIERlZmluaXRpb25cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNsYXNzIEFsZXJ0IHtcbiAgY29uc3RydWN0b3IoZWxlbWVudCkge1xuICAgIHRoaXMuX2VsZW1lbnQgPSBlbGVtZW50XG4gIH1cblxuICAvLyBHZXR0ZXJzXG5cbiAgc3RhdGljIGdldCBWRVJTSU9OKCkge1xuICAgIHJldHVybiBWRVJTSU9OXG4gIH1cblxuICAvLyBQdWJsaWNcblxuICBjbG9zZShlbGVtZW50KSB7XG4gICAgbGV0IHJvb3RFbGVtZW50ID0gdGhpcy5fZWxlbWVudFxuICAgIGlmIChlbGVtZW50KSB7XG4gICAgICByb290RWxlbWVudCA9IHRoaXMuX2dldFJvb3RFbGVtZW50KGVsZW1lbnQpXG4gICAgfVxuXG4gICAgY29uc3QgY3VzdG9tRXZlbnQgPSB0aGlzLl90cmlnZ2VyQ2xvc2VFdmVudChyb290RWxlbWVudClcblxuICAgIGlmIChjdXN0b21FdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdGhpcy5fcmVtb3ZlRWxlbWVudChyb290RWxlbWVudClcbiAgfVxuXG4gIGRpc3Bvc2UoKSB7XG4gICAgJC5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsIERBVEFfS0VZKVxuICAgIHRoaXMuX2VsZW1lbnQgPSBudWxsXG4gIH1cblxuICAvLyBQcml2YXRlXG5cbiAgX2dldFJvb3RFbGVtZW50KGVsZW1lbnQpIHtcbiAgICBjb25zdCBzZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudChlbGVtZW50KVxuICAgIGxldCBwYXJlbnQgICAgID0gZmFsc2VcblxuICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgcGFyZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3RvcilcbiAgICB9XG5cbiAgICBpZiAoIXBhcmVudCkge1xuICAgICAgcGFyZW50ID0gJChlbGVtZW50KS5jbG9zZXN0KGAuJHtDbGFzc05hbWUuQUxFUlR9YClbMF1cbiAgICB9XG5cbiAgICByZXR1cm4gcGFyZW50XG4gIH1cblxuICBfdHJpZ2dlckNsb3NlRXZlbnQoZWxlbWVudCkge1xuICAgIGNvbnN0IGNsb3NlRXZlbnQgPSAkLkV2ZW50KEV2ZW50LkNMT1NFKVxuXG4gICAgJChlbGVtZW50KS50cmlnZ2VyKGNsb3NlRXZlbnQpXG4gICAgcmV0dXJuIGNsb3NlRXZlbnRcbiAgfVxuXG4gIF9yZW1vdmVFbGVtZW50KGVsZW1lbnQpIHtcbiAgICAkKGVsZW1lbnQpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5TSE9XKVxuXG4gICAgaWYgKCEkKGVsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5GQURFKSkge1xuICAgICAgdGhpcy5fZGVzdHJveUVsZW1lbnQoZWxlbWVudClcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IHRyYW5zaXRpb25EdXJhdGlvbiA9IFV0aWwuZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQoZWxlbWVudClcblxuICAgICQoZWxlbWVudClcbiAgICAgIC5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgKGV2ZW50KSA9PiB0aGlzLl9kZXN0cm95RWxlbWVudChlbGVtZW50LCBldmVudCkpXG4gICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQodHJhbnNpdGlvbkR1cmF0aW9uKVxuICB9XG5cbiAgX2Rlc3Ryb3lFbGVtZW50KGVsZW1lbnQpIHtcbiAgICAkKGVsZW1lbnQpXG4gICAgICAuZGV0YWNoKClcbiAgICAgIC50cmlnZ2VyKEV2ZW50LkNMT1NFRClcbiAgICAgIC5yZW1vdmUoKVxuICB9XG5cbiAgLy8gU3RhdGljXG5cbiAgc3RhdGljIF9qUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCAkZWxlbWVudCA9ICQodGhpcylcbiAgICAgIGxldCBkYXRhICAgICAgID0gJGVsZW1lbnQuZGF0YShEQVRBX0tFWSlcblxuICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgIGRhdGEgPSBuZXcgQWxlcnQodGhpcylcbiAgICAgICAgJGVsZW1lbnQuZGF0YShEQVRBX0tFWSwgZGF0YSlcbiAgICAgIH1cblxuICAgICAgaWYgKGNvbmZpZyA9PT0gJ2Nsb3NlJykge1xuICAgICAgICBkYXRhW2NvbmZpZ10odGhpcylcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgc3RhdGljIF9oYW5kbGVEaXNtaXNzKGFsZXJ0SW5zdGFuY2UpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoZXZlbnQpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgfVxuXG4gICAgICBhbGVydEluc3RhbmNlLmNsb3NlKHRoaXMpXG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBEYXRhIEFwaSBpbXBsZW1lbnRhdGlvblxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuJChkb2N1bWVudCkub24oXG4gIEV2ZW50LkNMSUNLX0RBVEFfQVBJLFxuICBTZWxlY3Rvci5ESVNNSVNTLFxuICBBbGVydC5faGFuZGxlRGlzbWlzcyhuZXcgQWxlcnQoKSlcbilcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIGpRdWVyeVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuJC5mbltOQU1FXSAgICAgICAgICAgICA9IEFsZXJ0Ll9qUXVlcnlJbnRlcmZhY2VcbiQuZm5bTkFNRV0uQ29uc3RydWN0b3IgPSBBbGVydFxuJC5mbltOQU1FXS5ub0NvbmZsaWN0ICA9ICgpID0+IHtcbiAgJC5mbltOQU1FXSA9IEpRVUVSWV9OT19DT05GTElDVFxuICByZXR1cm4gQWxlcnQuX2pRdWVyeUludGVyZmFjZVxufVxuXG5leHBvcnQgZGVmYXVsdCBBbGVydFxuIiwiLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NC4yLjEpOiBidXR0b24uanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmltcG9ydCAkIGZyb20gJ2pxdWVyeSdcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvbnN0YW50c1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuY29uc3QgTkFNRSAgICAgICAgICAgICAgICA9ICdidXR0b24nXG5jb25zdCBWRVJTSU9OICAgICAgICAgICAgID0gJzQuMi4xJ1xuY29uc3QgREFUQV9LRVkgICAgICAgICAgICA9ICdicy5idXR0b24nXG5jb25zdCBFVkVOVF9LRVkgICAgICAgICAgID0gYC4ke0RBVEFfS0VZfWBcbmNvbnN0IERBVEFfQVBJX0tFWSAgICAgICAgPSAnLmRhdGEtYXBpJ1xuY29uc3QgSlFVRVJZX05PX0NPTkZMSUNUICA9ICQuZm5bTkFNRV1cblxuY29uc3QgQ2xhc3NOYW1lID0ge1xuICBBQ1RJVkUgOiAnYWN0aXZlJyxcbiAgQlVUVE9OIDogJ2J0bicsXG4gIEZPQ1VTICA6ICdmb2N1cydcbn1cblxuY29uc3QgU2VsZWN0b3IgPSB7XG4gIERBVEFfVE9HR0xFX0NBUlJPVCA6ICdbZGF0YS10b2dnbGVePVwiYnV0dG9uXCJdJyxcbiAgREFUQV9UT0dHTEUgICAgICAgIDogJ1tkYXRhLXRvZ2dsZT1cImJ1dHRvbnNcIl0nLFxuICBJTlBVVCAgICAgICAgICAgICAgOiAnaW5wdXQ6bm90KFt0eXBlPVwiaGlkZGVuXCJdKScsXG4gIEFDVElWRSAgICAgICAgICAgICA6ICcuYWN0aXZlJyxcbiAgQlVUVE9OICAgICAgICAgICAgIDogJy5idG4nXG59XG5cbmNvbnN0IEV2ZW50ID0ge1xuICBDTElDS19EQVRBX0FQSSAgICAgIDogYGNsaWNrJHtFVkVOVF9LRVl9JHtEQVRBX0FQSV9LRVl9YCxcbiAgRk9DVVNfQkxVUl9EQVRBX0FQSSA6IGBmb2N1cyR7RVZFTlRfS0VZfSR7REFUQV9BUElfS0VZfSBgICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYGJsdXIke0VWRU5UX0tFWX0ke0RBVEFfQVBJX0tFWX1gXG59XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDbGFzcyBEZWZpbml0aW9uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jbGFzcyBCdXR0b24ge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50KSB7XG4gICAgdGhpcy5fZWxlbWVudCA9IGVsZW1lbnRcbiAgfVxuXG4gIC8vIEdldHRlcnNcblxuICBzdGF0aWMgZ2V0IFZFUlNJT04oKSB7XG4gICAgcmV0dXJuIFZFUlNJT05cbiAgfVxuXG4gIC8vIFB1YmxpY1xuXG4gIHRvZ2dsZSgpIHtcbiAgICBsZXQgdHJpZ2dlckNoYW5nZUV2ZW50ID0gdHJ1ZVxuICAgIGxldCBhZGRBcmlhUHJlc3NlZCA9IHRydWVcbiAgICBjb25zdCByb290RWxlbWVudCA9ICQodGhpcy5fZWxlbWVudCkuY2xvc2VzdChcbiAgICAgIFNlbGVjdG9yLkRBVEFfVE9HR0xFXG4gICAgKVswXVxuXG4gICAgaWYgKHJvb3RFbGVtZW50KSB7XG4gICAgICBjb25zdCBpbnB1dCA9IHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihTZWxlY3Rvci5JTlBVVClcblxuICAgICAgaWYgKGlucHV0KSB7XG4gICAgICAgIGlmIChpbnB1dC50eXBlID09PSAncmFkaW8nKSB7XG4gICAgICAgICAgaWYgKGlucHV0LmNoZWNrZWQgJiZcbiAgICAgICAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKENsYXNzTmFtZS5BQ1RJVkUpKSB7XG4gICAgICAgICAgICB0cmlnZ2VyQ2hhbmdlRXZlbnQgPSBmYWxzZVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBhY3RpdmVFbGVtZW50ID0gcm9vdEVsZW1lbnQucXVlcnlTZWxlY3RvcihTZWxlY3Rvci5BQ1RJVkUpXG5cbiAgICAgICAgICAgIGlmIChhY3RpdmVFbGVtZW50KSB7XG4gICAgICAgICAgICAgICQoYWN0aXZlRWxlbWVudCkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHJpZ2dlckNoYW5nZUV2ZW50KSB7XG4gICAgICAgICAgaWYgKGlucHV0Lmhhc0F0dHJpYnV0ZSgnZGlzYWJsZWQnKSB8fFxuICAgICAgICAgICAgcm9vdEVsZW1lbnQuaGFzQXR0cmlidXRlKCdkaXNhYmxlZCcpIHx8XG4gICAgICAgICAgICBpbnB1dC5jbGFzc0xpc3QuY29udGFpbnMoJ2Rpc2FibGVkJykgfHxcbiAgICAgICAgICAgIHJvb3RFbGVtZW50LmNsYXNzTGlzdC5jb250YWlucygnZGlzYWJsZWQnKSkge1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgfVxuICAgICAgICAgIGlucHV0LmNoZWNrZWQgPSAhdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoQ2xhc3NOYW1lLkFDVElWRSlcbiAgICAgICAgICAkKGlucHV0KS50cmlnZ2VyKCdjaGFuZ2UnKVxuICAgICAgICB9XG5cbiAgICAgICAgaW5wdXQuZm9jdXMoKVxuICAgICAgICBhZGRBcmlhUHJlc3NlZCA9IGZhbHNlXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGFkZEFyaWFQcmVzc2VkKSB7XG4gICAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1wcmVzc2VkJyxcbiAgICAgICAgIXRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKENsYXNzTmFtZS5BQ1RJVkUpKVxuICAgIH1cblxuICAgIGlmICh0cmlnZ2VyQ2hhbmdlRXZlbnQpIHtcbiAgICAgICQodGhpcy5fZWxlbWVudCkudG9nZ2xlQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSlcbiAgICB9XG4gIH1cblxuICBkaXNwb3NlKCkge1xuICAgICQucmVtb3ZlRGF0YSh0aGlzLl9lbGVtZW50LCBEQVRBX0tFWSlcbiAgICB0aGlzLl9lbGVtZW50ID0gbnVsbFxuICB9XG5cbiAgLy8gU3RhdGljXG5cbiAgc3RhdGljIF9qUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgZGF0YSA9ICQodGhpcykuZGF0YShEQVRBX0tFWSlcblxuICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgIGRhdGEgPSBuZXcgQnV0dG9uKHRoaXMpXG4gICAgICAgICQodGhpcykuZGF0YShEQVRBX0tFWSwgZGF0YSlcbiAgICAgIH1cblxuICAgICAgaWYgKGNvbmZpZyA9PT0gJ3RvZ2dsZScpIHtcbiAgICAgICAgZGF0YVtjb25maWddKClcbiAgICAgIH1cbiAgICB9KVxuICB9XG59XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBEYXRhIEFwaSBpbXBsZW1lbnRhdGlvblxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuJChkb2N1bWVudClcbiAgLm9uKEV2ZW50LkNMSUNLX0RBVEFfQVBJLCBTZWxlY3Rvci5EQVRBX1RPR0dMRV9DQVJST1QsIChldmVudCkgPT4ge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcblxuICAgIGxldCBidXR0b24gPSBldmVudC50YXJnZXRcblxuICAgIGlmICghJChidXR0b24pLmhhc0NsYXNzKENsYXNzTmFtZS5CVVRUT04pKSB7XG4gICAgICBidXR0b24gPSAkKGJ1dHRvbikuY2xvc2VzdChTZWxlY3Rvci5CVVRUT04pXG4gICAgfVxuXG4gICAgQnV0dG9uLl9qUXVlcnlJbnRlcmZhY2UuY2FsbCgkKGJ1dHRvbiksICd0b2dnbGUnKVxuICB9KVxuICAub24oRXZlbnQuRk9DVVNfQkxVUl9EQVRBX0FQSSwgU2VsZWN0b3IuREFUQV9UT0dHTEVfQ0FSUk9ULCAoZXZlbnQpID0+IHtcbiAgICBjb25zdCBidXR0b24gPSAkKGV2ZW50LnRhcmdldCkuY2xvc2VzdChTZWxlY3Rvci5CVVRUT04pWzBdXG4gICAgJChidXR0b24pLnRvZ2dsZUNsYXNzKENsYXNzTmFtZS5GT0NVUywgL15mb2N1cyhpbik/JC8udGVzdChldmVudC50eXBlKSlcbiAgfSlcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIGpRdWVyeVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuJC5mbltOQU1FXSA9IEJ1dHRvbi5falF1ZXJ5SW50ZXJmYWNlXG4kLmZuW05BTUVdLkNvbnN0cnVjdG9yID0gQnV0dG9uXG4kLmZuW05BTUVdLm5vQ29uZmxpY3QgPSAoKSA9PiB7XG4gICQuZm5bTkFNRV0gPSBKUVVFUllfTk9fQ09ORkxJQ1RcbiAgcmV0dXJuIEJ1dHRvbi5falF1ZXJ5SW50ZXJmYWNlXG59XG5cbmV4cG9ydCBkZWZhdWx0IEJ1dHRvblxuIiwiLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NC4yLjEpOiBjYXJvdXNlbC5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuaW1wb3J0ICQgZnJvbSAnanF1ZXJ5J1xuaW1wb3J0IFV0aWwgZnJvbSAnLi91dGlsJ1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29uc3RhbnRzXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jb25zdCBOQU1FICAgICAgICAgICAgICAgICAgID0gJ2Nhcm91c2VsJ1xuY29uc3QgVkVSU0lPTiAgICAgICAgICAgICAgICA9ICc0LjIuMSdcbmNvbnN0IERBVEFfS0VZICAgICAgICAgICAgICAgPSAnYnMuY2Fyb3VzZWwnXG5jb25zdCBFVkVOVF9LRVkgICAgICAgICAgICAgID0gYC4ke0RBVEFfS0VZfWBcbmNvbnN0IERBVEFfQVBJX0tFWSAgICAgICAgICAgPSAnLmRhdGEtYXBpJ1xuY29uc3QgSlFVRVJZX05PX0NPTkZMSUNUICAgICA9ICQuZm5bTkFNRV1cbmNvbnN0IEFSUk9XX0xFRlRfS0VZQ09ERSAgICAgPSAzNyAvLyBLZXlib2FyZEV2ZW50LndoaWNoIHZhbHVlIGZvciBsZWZ0IGFycm93IGtleVxuY29uc3QgQVJST1dfUklHSFRfS0VZQ09ERSAgICA9IDM5IC8vIEtleWJvYXJkRXZlbnQud2hpY2ggdmFsdWUgZm9yIHJpZ2h0IGFycm93IGtleVxuY29uc3QgVE9VQ0hFVkVOVF9DT01QQVRfV0FJVCA9IDUwMCAvLyBUaW1lIGZvciBtb3VzZSBjb21wYXQgZXZlbnRzIHRvIGZpcmUgYWZ0ZXIgdG91Y2hcbmNvbnN0IFNXSVBFX1RIUkVTSE9MRCAgICAgICAgPSA0MFxuXG5jb25zdCBEZWZhdWx0ID0ge1xuICBpbnRlcnZhbCA6IDUwMDAsXG4gIGtleWJvYXJkIDogdHJ1ZSxcbiAgc2xpZGUgICAgOiBmYWxzZSxcbiAgcGF1c2UgICAgOiAnaG92ZXInLFxuICB3cmFwICAgICA6IHRydWUsXG4gIHRvdWNoICAgIDogdHJ1ZVxufVxuXG5jb25zdCBEZWZhdWx0VHlwZSA9IHtcbiAgaW50ZXJ2YWwgOiAnKG51bWJlcnxib29sZWFuKScsXG4gIGtleWJvYXJkIDogJ2Jvb2xlYW4nLFxuICBzbGlkZSAgICA6ICcoYm9vbGVhbnxzdHJpbmcpJyxcbiAgcGF1c2UgICAgOiAnKHN0cmluZ3xib29sZWFuKScsXG4gIHdyYXAgICAgIDogJ2Jvb2xlYW4nLFxuICB0b3VjaCAgICA6ICdib29sZWFuJ1xufVxuXG5jb25zdCBEaXJlY3Rpb24gPSB7XG4gIE5FWFQgICAgIDogJ25leHQnLFxuICBQUkVWICAgICA6ICdwcmV2JyxcbiAgTEVGVCAgICAgOiAnbGVmdCcsXG4gIFJJR0hUICAgIDogJ3JpZ2h0J1xufVxuXG5jb25zdCBFdmVudCA9IHtcbiAgU0xJREUgICAgICAgICAgOiBgc2xpZGUke0VWRU5UX0tFWX1gLFxuICBTTElEICAgICAgICAgICA6IGBzbGlkJHtFVkVOVF9LRVl9YCxcbiAgS0VZRE9XTiAgICAgICAgOiBga2V5ZG93biR7RVZFTlRfS0VZfWAsXG4gIE1PVVNFRU5URVIgICAgIDogYG1vdXNlZW50ZXIke0VWRU5UX0tFWX1gLFxuICBNT1VTRUxFQVZFICAgICA6IGBtb3VzZWxlYXZlJHtFVkVOVF9LRVl9YCxcbiAgVE9VQ0hTVEFSVCAgICAgOiBgdG91Y2hzdGFydCR7RVZFTlRfS0VZfWAsXG4gIFRPVUNITU9WRSAgICAgIDogYHRvdWNobW92ZSR7RVZFTlRfS0VZfWAsXG4gIFRPVUNIRU5EICAgICAgIDogYHRvdWNoZW5kJHtFVkVOVF9LRVl9YCxcbiAgUE9JTlRFUkRPV04gICAgOiBgcG9pbnRlcmRvd24ke0VWRU5UX0tFWX1gLFxuICBQT0lOVEVSVVAgICAgICA6IGBwb2ludGVydXAke0VWRU5UX0tFWX1gLFxuICBEUkFHX1NUQVJUICAgICA6IGBkcmFnc3RhcnQke0VWRU5UX0tFWX1gLFxuICBMT0FEX0RBVEFfQVBJICA6IGBsb2FkJHtFVkVOVF9LRVl9JHtEQVRBX0FQSV9LRVl9YCxcbiAgQ0xJQ0tfREFUQV9BUEkgOiBgY2xpY2ske0VWRU5UX0tFWX0ke0RBVEFfQVBJX0tFWX1gXG59XG5cbmNvbnN0IENsYXNzTmFtZSA9IHtcbiAgQ0FST1VTRUwgICAgICA6ICdjYXJvdXNlbCcsXG4gIEFDVElWRSAgICAgICAgOiAnYWN0aXZlJyxcbiAgU0xJREUgICAgICAgICA6ICdzbGlkZScsXG4gIFJJR0hUICAgICAgICAgOiAnY2Fyb3VzZWwtaXRlbS1yaWdodCcsXG4gIExFRlQgICAgICAgICAgOiAnY2Fyb3VzZWwtaXRlbS1sZWZ0JyxcbiAgTkVYVCAgICAgICAgICA6ICdjYXJvdXNlbC1pdGVtLW5leHQnLFxuICBQUkVWICAgICAgICAgIDogJ2Nhcm91c2VsLWl0ZW0tcHJldicsXG4gIElURU0gICAgICAgICAgOiAnY2Fyb3VzZWwtaXRlbScsXG4gIFBPSU5URVJfRVZFTlQgOiAncG9pbnRlci1ldmVudCdcbn1cblxuY29uc3QgU2VsZWN0b3IgPSB7XG4gIEFDVElWRSAgICAgIDogJy5hY3RpdmUnLFxuICBBQ1RJVkVfSVRFTSA6ICcuYWN0aXZlLmNhcm91c2VsLWl0ZW0nLFxuICBJVEVNICAgICAgICA6ICcuY2Fyb3VzZWwtaXRlbScsXG4gIElURU1fSU1HICAgIDogJy5jYXJvdXNlbC1pdGVtIGltZycsXG4gIE5FWFRfUFJFViAgIDogJy5jYXJvdXNlbC1pdGVtLW5leHQsIC5jYXJvdXNlbC1pdGVtLXByZXYnLFxuICBJTkRJQ0FUT1JTICA6ICcuY2Fyb3VzZWwtaW5kaWNhdG9ycycsXG4gIERBVEFfU0xJREUgIDogJ1tkYXRhLXNsaWRlXSwgW2RhdGEtc2xpZGUtdG9dJyxcbiAgREFUQV9SSURFICAgOiAnW2RhdGEtcmlkZT1cImNhcm91c2VsXCJdJ1xufVxuXG5jb25zdCBQb2ludGVyVHlwZSA9IHtcbiAgVE9VQ0ggOiAndG91Y2gnLFxuICBQRU4gICA6ICdwZW4nXG59XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDbGFzcyBEZWZpbml0aW9uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuY2xhc3MgQ2Fyb3VzZWwge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBjb25maWcpIHtcbiAgICB0aGlzLl9pdGVtcyAgICAgICAgID0gbnVsbFxuICAgIHRoaXMuX2ludGVydmFsICAgICAgPSBudWxsXG4gICAgdGhpcy5fYWN0aXZlRWxlbWVudCA9IG51bGxcbiAgICB0aGlzLl9pc1BhdXNlZCAgICAgID0gZmFsc2VcbiAgICB0aGlzLl9pc1NsaWRpbmcgICAgID0gZmFsc2VcbiAgICB0aGlzLnRvdWNoVGltZW91dCAgID0gbnVsbFxuICAgIHRoaXMudG91Y2hTdGFydFggICAgPSAwXG4gICAgdGhpcy50b3VjaERlbHRhWCAgICA9IDBcblxuICAgIHRoaXMuX2NvbmZpZyAgICAgICAgICAgID0gdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZylcbiAgICB0aGlzLl9lbGVtZW50ICAgICAgICAgICA9IGVsZW1lbnRcbiAgICB0aGlzLl9pbmRpY2F0b3JzRWxlbWVudCA9IHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihTZWxlY3Rvci5JTkRJQ0FUT1JTKVxuICAgIHRoaXMuX3RvdWNoU3VwcG9ydGVkICAgID0gJ29udG91Y2hzdGFydCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50IHx8IG5hdmlnYXRvci5tYXhUb3VjaFBvaW50cyA+IDBcbiAgICB0aGlzLl9wb2ludGVyRXZlbnQgICAgICA9IEJvb2xlYW4od2luZG93LlBvaW50ZXJFdmVudCB8fCB3aW5kb3cuTVNQb2ludGVyRXZlbnQpXG5cbiAgICB0aGlzLl9hZGRFdmVudExpc3RlbmVycygpXG4gIH1cblxuICAvLyBHZXR0ZXJzXG5cbiAgc3RhdGljIGdldCBWRVJTSU9OKCkge1xuICAgIHJldHVybiBWRVJTSU9OXG4gIH1cblxuICBzdGF0aWMgZ2V0IERlZmF1bHQoKSB7XG4gICAgcmV0dXJuIERlZmF1bHRcbiAgfVxuXG4gIC8vIFB1YmxpY1xuXG4gIG5leHQoKSB7XG4gICAgaWYgKCF0aGlzLl9pc1NsaWRpbmcpIHtcbiAgICAgIHRoaXMuX3NsaWRlKERpcmVjdGlvbi5ORVhUKVxuICAgIH1cbiAgfVxuXG4gIG5leHRXaGVuVmlzaWJsZSgpIHtcbiAgICAvLyBEb24ndCBjYWxsIG5leHQgd2hlbiB0aGUgcGFnZSBpc24ndCB2aXNpYmxlXG4gICAgLy8gb3IgdGhlIGNhcm91c2VsIG9yIGl0cyBwYXJlbnQgaXNuJ3QgdmlzaWJsZVxuICAgIGlmICghZG9jdW1lbnQuaGlkZGVuICYmXG4gICAgICAoJCh0aGlzLl9lbGVtZW50KS5pcygnOnZpc2libGUnKSAmJiAkKHRoaXMuX2VsZW1lbnQpLmNzcygndmlzaWJpbGl0eScpICE9PSAnaGlkZGVuJykpIHtcbiAgICAgIHRoaXMubmV4dCgpXG4gICAgfVxuICB9XG5cbiAgcHJldigpIHtcbiAgICBpZiAoIXRoaXMuX2lzU2xpZGluZykge1xuICAgICAgdGhpcy5fc2xpZGUoRGlyZWN0aW9uLlBSRVYpXG4gICAgfVxuICB9XG5cbiAgcGF1c2UoZXZlbnQpIHtcbiAgICBpZiAoIWV2ZW50KSB7XG4gICAgICB0aGlzLl9pc1BhdXNlZCA9IHRydWVcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFNlbGVjdG9yLk5FWFRfUFJFVikpIHtcbiAgICAgIFV0aWwudHJpZ2dlclRyYW5zaXRpb25FbmQodGhpcy5fZWxlbWVudClcbiAgICAgIHRoaXMuY3ljbGUodHJ1ZSlcbiAgICB9XG5cbiAgICBjbGVhckludGVydmFsKHRoaXMuX2ludGVydmFsKVxuICAgIHRoaXMuX2ludGVydmFsID0gbnVsbFxuICB9XG5cbiAgY3ljbGUoZXZlbnQpIHtcbiAgICBpZiAoIWV2ZW50KSB7XG4gICAgICB0aGlzLl9pc1BhdXNlZCA9IGZhbHNlXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2ludGVydmFsKSB7XG4gICAgICBjbGVhckludGVydmFsKHRoaXMuX2ludGVydmFsKVxuICAgICAgdGhpcy5faW50ZXJ2YWwgPSBudWxsXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2NvbmZpZy5pbnRlcnZhbCAmJiAhdGhpcy5faXNQYXVzZWQpIHtcbiAgICAgIHRoaXMuX2ludGVydmFsID0gc2V0SW50ZXJ2YWwoXG4gICAgICAgIChkb2N1bWVudC52aXNpYmlsaXR5U3RhdGUgPyB0aGlzLm5leHRXaGVuVmlzaWJsZSA6IHRoaXMubmV4dCkuYmluZCh0aGlzKSxcbiAgICAgICAgdGhpcy5fY29uZmlnLmludGVydmFsXG4gICAgICApXG4gICAgfVxuICB9XG5cbiAgdG8oaW5kZXgpIHtcbiAgICB0aGlzLl9hY3RpdmVFbGVtZW50ID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFNlbGVjdG9yLkFDVElWRV9JVEVNKVxuXG4gICAgY29uc3QgYWN0aXZlSW5kZXggPSB0aGlzLl9nZXRJdGVtSW5kZXgodGhpcy5fYWN0aXZlRWxlbWVudClcblxuICAgIGlmIChpbmRleCA+IHRoaXMuX2l0ZW1zLmxlbmd0aCAtIDEgfHwgaW5kZXggPCAwKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAodGhpcy5faXNTbGlkaW5nKSB7XG4gICAgICAkKHRoaXMuX2VsZW1lbnQpLm9uZShFdmVudC5TTElELCAoKSA9PiB0aGlzLnRvKGluZGV4KSlcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmIChhY3RpdmVJbmRleCA9PT0gaW5kZXgpIHtcbiAgICAgIHRoaXMucGF1c2UoKVxuICAgICAgdGhpcy5jeWNsZSgpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCBkaXJlY3Rpb24gPSBpbmRleCA+IGFjdGl2ZUluZGV4XG4gICAgICA/IERpcmVjdGlvbi5ORVhUXG4gICAgICA6IERpcmVjdGlvbi5QUkVWXG5cbiAgICB0aGlzLl9zbGlkZShkaXJlY3Rpb24sIHRoaXMuX2l0ZW1zW2luZGV4XSlcbiAgfVxuXG4gIGRpc3Bvc2UoKSB7XG4gICAgJCh0aGlzLl9lbGVtZW50KS5vZmYoRVZFTlRfS0VZKVxuICAgICQucmVtb3ZlRGF0YSh0aGlzLl9lbGVtZW50LCBEQVRBX0tFWSlcblxuICAgIHRoaXMuX2l0ZW1zICAgICAgICAgICAgID0gbnVsbFxuICAgIHRoaXMuX2NvbmZpZyAgICAgICAgICAgID0gbnVsbFxuICAgIHRoaXMuX2VsZW1lbnQgICAgICAgICAgID0gbnVsbFxuICAgIHRoaXMuX2ludGVydmFsICAgICAgICAgID0gbnVsbFxuICAgIHRoaXMuX2lzUGF1c2VkICAgICAgICAgID0gbnVsbFxuICAgIHRoaXMuX2lzU2xpZGluZyAgICAgICAgID0gbnVsbFxuICAgIHRoaXMuX2FjdGl2ZUVsZW1lbnQgICAgID0gbnVsbFxuICAgIHRoaXMuX2luZGljYXRvcnNFbGVtZW50ID0gbnVsbFxuICB9XG5cbiAgLy8gUHJpdmF0ZVxuXG4gIF9nZXRDb25maWcoY29uZmlnKSB7XG4gICAgY29uZmlnID0ge1xuICAgICAgLi4uRGVmYXVsdCxcbiAgICAgIC4uLmNvbmZpZ1xuICAgIH1cbiAgICBVdGlsLnR5cGVDaGVja0NvbmZpZyhOQU1FLCBjb25maWcsIERlZmF1bHRUeXBlKVxuICAgIHJldHVybiBjb25maWdcbiAgfVxuXG4gIF9oYW5kbGVTd2lwZSgpIHtcbiAgICBjb25zdCBhYnNEZWx0YXggPSBNYXRoLmFicyh0aGlzLnRvdWNoRGVsdGFYKVxuXG4gICAgaWYgKGFic0RlbHRheCA8PSBTV0lQRV9USFJFU0hPTEQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IGRpcmVjdGlvbiA9IGFic0RlbHRheCAvIHRoaXMudG91Y2hEZWx0YVhcblxuICAgIC8vIHN3aXBlIGxlZnRcbiAgICBpZiAoZGlyZWN0aW9uID4gMCkge1xuICAgICAgdGhpcy5wcmV2KClcbiAgICB9XG5cbiAgICAvLyBzd2lwZSByaWdodFxuICAgIGlmIChkaXJlY3Rpb24gPCAwKSB7XG4gICAgICB0aGlzLm5leHQoKVxuICAgIH1cbiAgfVxuXG4gIF9hZGRFdmVudExpc3RlbmVycygpIHtcbiAgICBpZiAodGhpcy5fY29uZmlnLmtleWJvYXJkKSB7XG4gICAgICAkKHRoaXMuX2VsZW1lbnQpXG4gICAgICAgIC5vbihFdmVudC5LRVlET1dOLCAoZXZlbnQpID0+IHRoaXMuX2tleWRvd24oZXZlbnQpKVxuICAgIH1cblxuICAgIGlmICh0aGlzLl9jb25maWcucGF1c2UgPT09ICdob3ZlcicpIHtcbiAgICAgICQodGhpcy5fZWxlbWVudClcbiAgICAgICAgLm9uKEV2ZW50Lk1PVVNFRU5URVIsIChldmVudCkgPT4gdGhpcy5wYXVzZShldmVudCkpXG4gICAgICAgIC5vbihFdmVudC5NT1VTRUxFQVZFLCAoZXZlbnQpID0+IHRoaXMuY3ljbGUoZXZlbnQpKVxuICAgIH1cblxuICAgIHRoaXMuX2FkZFRvdWNoRXZlbnRMaXN0ZW5lcnMoKVxuICB9XG5cbiAgX2FkZFRvdWNoRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgaWYgKCF0aGlzLl90b3VjaFN1cHBvcnRlZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3Qgc3RhcnQgPSAoZXZlbnQpID0+IHtcbiAgICAgIGlmICh0aGlzLl9wb2ludGVyRXZlbnQgJiYgUG9pbnRlclR5cGVbZXZlbnQub3JpZ2luYWxFdmVudC5wb2ludGVyVHlwZS50b1VwcGVyQ2FzZSgpXSkge1xuICAgICAgICB0aGlzLnRvdWNoU3RhcnRYID0gZXZlbnQub3JpZ2luYWxFdmVudC5jbGllbnRYXG4gICAgICB9IGVsc2UgaWYgKCF0aGlzLl9wb2ludGVyRXZlbnQpIHtcbiAgICAgICAgdGhpcy50b3VjaFN0YXJ0WCA9IGV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlc1swXS5jbGllbnRYXG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgbW92ZSA9IChldmVudCkgPT4ge1xuICAgICAgLy8gZW5zdXJlIHN3aXBpbmcgd2l0aCBvbmUgdG91Y2ggYW5kIG5vdCBwaW5jaGluZ1xuICAgICAgaWYgKGV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlcyAmJiBldmVudC5vcmlnaW5hbEV2ZW50LnRvdWNoZXMubGVuZ3RoID4gMSkge1xuICAgICAgICB0aGlzLnRvdWNoRGVsdGFYID0gMFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy50b3VjaERlbHRhWCA9IGV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlc1swXS5jbGllbnRYIC0gdGhpcy50b3VjaFN0YXJ0WFxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGVuZCA9IChldmVudCkgPT4ge1xuICAgICAgaWYgKHRoaXMuX3BvaW50ZXJFdmVudCAmJiBQb2ludGVyVHlwZVtldmVudC5vcmlnaW5hbEV2ZW50LnBvaW50ZXJUeXBlLnRvVXBwZXJDYXNlKCldKSB7XG4gICAgICAgIHRoaXMudG91Y2hEZWx0YVggPSBldmVudC5vcmlnaW5hbEV2ZW50LmNsaWVudFggLSB0aGlzLnRvdWNoU3RhcnRYXG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2hhbmRsZVN3aXBlKClcbiAgICAgIGlmICh0aGlzLl9jb25maWcucGF1c2UgPT09ICdob3ZlcicpIHtcbiAgICAgICAgLy8gSWYgaXQncyBhIHRvdWNoLWVuYWJsZWQgZGV2aWNlLCBtb3VzZWVudGVyL2xlYXZlIGFyZSBmaXJlZCBhc1xuICAgICAgICAvLyBwYXJ0IG9mIHRoZSBtb3VzZSBjb21wYXRpYmlsaXR5IGV2ZW50cyBvbiBmaXJzdCB0YXAgLSB0aGUgY2Fyb3VzZWxcbiAgICAgICAgLy8gd291bGQgc3RvcCBjeWNsaW5nIHVudGlsIHVzZXIgdGFwcGVkIG91dCBvZiBpdDtcbiAgICAgICAgLy8gaGVyZSwgd2UgbGlzdGVuIGZvciB0b3VjaGVuZCwgZXhwbGljaXRseSBwYXVzZSB0aGUgY2Fyb3VzZWxcbiAgICAgICAgLy8gKGFzIGlmIGl0J3MgdGhlIHNlY29uZCB0aW1lIHdlIHRhcCBvbiBpdCwgbW91c2VlbnRlciBjb21wYXQgZXZlbnRcbiAgICAgICAgLy8gaXMgTk9UIGZpcmVkKSBhbmQgYWZ0ZXIgYSB0aW1lb3V0ICh0byBhbGxvdyBmb3IgbW91c2UgY29tcGF0aWJpbGl0eVxuICAgICAgICAvLyBldmVudHMgdG8gZmlyZSkgd2UgZXhwbGljaXRseSByZXN0YXJ0IGN5Y2xpbmdcblxuICAgICAgICB0aGlzLnBhdXNlKClcbiAgICAgICAgaWYgKHRoaXMudG91Y2hUaW1lb3V0KSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudG91Y2hUaW1lb3V0KVxuICAgICAgICB9XG4gICAgICAgIHRoaXMudG91Y2hUaW1lb3V0ID0gc2V0VGltZW91dCgoZXZlbnQpID0+IHRoaXMuY3ljbGUoZXZlbnQpLCBUT1VDSEVWRU5UX0NPTVBBVF9XQUlUICsgdGhpcy5fY29uZmlnLmludGVydmFsKVxuICAgICAgfVxuICAgIH1cblxuICAgICQodGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFNlbGVjdG9yLklURU1fSU1HKSkub24oRXZlbnQuRFJBR19TVEFSVCwgKGUpID0+IGUucHJldmVudERlZmF1bHQoKSlcbiAgICBpZiAodGhpcy5fcG9pbnRlckV2ZW50KSB7XG4gICAgICAkKHRoaXMuX2VsZW1lbnQpLm9uKEV2ZW50LlBPSU5URVJET1dOLCAoZXZlbnQpID0+IHN0YXJ0KGV2ZW50KSlcbiAgICAgICQodGhpcy5fZWxlbWVudCkub24oRXZlbnQuUE9JTlRFUlVQLCAoZXZlbnQpID0+IGVuZChldmVudCkpXG5cbiAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChDbGFzc05hbWUuUE9JTlRFUl9FVkVOVClcbiAgICB9IGVsc2Uge1xuICAgICAgJCh0aGlzLl9lbGVtZW50KS5vbihFdmVudC5UT1VDSFNUQVJULCAoZXZlbnQpID0+IHN0YXJ0KGV2ZW50KSlcbiAgICAgICQodGhpcy5fZWxlbWVudCkub24oRXZlbnQuVE9VQ0hNT1ZFLCAoZXZlbnQpID0+IG1vdmUoZXZlbnQpKVxuICAgICAgJCh0aGlzLl9lbGVtZW50KS5vbihFdmVudC5UT1VDSEVORCwgKGV2ZW50KSA9PiBlbmQoZXZlbnQpKVxuICAgIH1cbiAgfVxuXG4gIF9rZXlkb3duKGV2ZW50KSB7XG4gICAgaWYgKC9pbnB1dHx0ZXh0YXJlYS9pLnRlc3QoZXZlbnQudGFyZ2V0LnRhZ05hbWUpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBzd2l0Y2ggKGV2ZW50LndoaWNoKSB7XG4gICAgICBjYXNlIEFSUk9XX0xFRlRfS0VZQ09ERTpcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgICB0aGlzLnByZXYoKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSBBUlJPV19SSUdIVF9LRVlDT0RFOlxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgIHRoaXMubmV4dCgpXG4gICAgICAgIGJyZWFrXG4gICAgICBkZWZhdWx0OlxuICAgIH1cbiAgfVxuXG4gIF9nZXRJdGVtSW5kZXgoZWxlbWVudCkge1xuICAgIHRoaXMuX2l0ZW1zID0gZWxlbWVudCAmJiBlbGVtZW50LnBhcmVudE5vZGVcbiAgICAgID8gW10uc2xpY2UuY2FsbChlbGVtZW50LnBhcmVudE5vZGUucXVlcnlTZWxlY3RvckFsbChTZWxlY3Rvci5JVEVNKSlcbiAgICAgIDogW11cbiAgICByZXR1cm4gdGhpcy5faXRlbXMuaW5kZXhPZihlbGVtZW50KVxuICB9XG5cbiAgX2dldEl0ZW1CeURpcmVjdGlvbihkaXJlY3Rpb24sIGFjdGl2ZUVsZW1lbnQpIHtcbiAgICBjb25zdCBpc05leHREaXJlY3Rpb24gPSBkaXJlY3Rpb24gPT09IERpcmVjdGlvbi5ORVhUXG4gICAgY29uc3QgaXNQcmV2RGlyZWN0aW9uID0gZGlyZWN0aW9uID09PSBEaXJlY3Rpb24uUFJFVlxuICAgIGNvbnN0IGFjdGl2ZUluZGV4ICAgICA9IHRoaXMuX2dldEl0ZW1JbmRleChhY3RpdmVFbGVtZW50KVxuICAgIGNvbnN0IGxhc3RJdGVtSW5kZXggICA9IHRoaXMuX2l0ZW1zLmxlbmd0aCAtIDFcbiAgICBjb25zdCBpc0dvaW5nVG9XcmFwICAgPSBpc1ByZXZEaXJlY3Rpb24gJiYgYWN0aXZlSW5kZXggPT09IDAgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc05leHREaXJlY3Rpb24gJiYgYWN0aXZlSW5kZXggPT09IGxhc3RJdGVtSW5kZXhcblxuICAgIGlmIChpc0dvaW5nVG9XcmFwICYmICF0aGlzLl9jb25maWcud3JhcCkge1xuICAgICAgcmV0dXJuIGFjdGl2ZUVsZW1lbnRcbiAgICB9XG5cbiAgICBjb25zdCBkZWx0YSAgICAgPSBkaXJlY3Rpb24gPT09IERpcmVjdGlvbi5QUkVWID8gLTEgOiAxXG4gICAgY29uc3QgaXRlbUluZGV4ID0gKGFjdGl2ZUluZGV4ICsgZGVsdGEpICUgdGhpcy5faXRlbXMubGVuZ3RoXG5cbiAgICByZXR1cm4gaXRlbUluZGV4ID09PSAtMVxuICAgICAgPyB0aGlzLl9pdGVtc1t0aGlzLl9pdGVtcy5sZW5ndGggLSAxXSA6IHRoaXMuX2l0ZW1zW2l0ZW1JbmRleF1cbiAgfVxuXG4gIF90cmlnZ2VyU2xpZGVFdmVudChyZWxhdGVkVGFyZ2V0LCBldmVudERpcmVjdGlvbk5hbWUpIHtcbiAgICBjb25zdCB0YXJnZXRJbmRleCA9IHRoaXMuX2dldEl0ZW1JbmRleChyZWxhdGVkVGFyZ2V0KVxuICAgIGNvbnN0IGZyb21JbmRleCA9IHRoaXMuX2dldEl0ZW1JbmRleCh0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoU2VsZWN0b3IuQUNUSVZFX0lURU0pKVxuICAgIGNvbnN0IHNsaWRlRXZlbnQgPSAkLkV2ZW50KEV2ZW50LlNMSURFLCB7XG4gICAgICByZWxhdGVkVGFyZ2V0LFxuICAgICAgZGlyZWN0aW9uOiBldmVudERpcmVjdGlvbk5hbWUsXG4gICAgICBmcm9tOiBmcm9tSW5kZXgsXG4gICAgICB0bzogdGFyZ2V0SW5kZXhcbiAgICB9KVxuXG4gICAgJCh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKHNsaWRlRXZlbnQpXG5cbiAgICByZXR1cm4gc2xpZGVFdmVudFxuICB9XG5cbiAgX3NldEFjdGl2ZUluZGljYXRvckVsZW1lbnQoZWxlbWVudCkge1xuICAgIGlmICh0aGlzLl9pbmRpY2F0b3JzRWxlbWVudCkge1xuICAgICAgY29uc3QgaW5kaWNhdG9ycyA9IFtdLnNsaWNlLmNhbGwodGhpcy5faW5kaWNhdG9yc0VsZW1lbnQucXVlcnlTZWxlY3RvckFsbChTZWxlY3Rvci5BQ1RJVkUpKVxuICAgICAgJChpbmRpY2F0b3JzKVxuICAgICAgICAucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSlcblxuICAgICAgY29uc3QgbmV4dEluZGljYXRvciA9IHRoaXMuX2luZGljYXRvcnNFbGVtZW50LmNoaWxkcmVuW1xuICAgICAgICB0aGlzLl9nZXRJdGVtSW5kZXgoZWxlbWVudClcbiAgICAgIF1cblxuICAgICAgaWYgKG5leHRJbmRpY2F0b3IpIHtcbiAgICAgICAgJChuZXh0SW5kaWNhdG9yKS5hZGRDbGFzcyhDbGFzc05hbWUuQUNUSVZFKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIF9zbGlkZShkaXJlY3Rpb24sIGVsZW1lbnQpIHtcbiAgICBjb25zdCBhY3RpdmVFbGVtZW50ID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFNlbGVjdG9yLkFDVElWRV9JVEVNKVxuICAgIGNvbnN0IGFjdGl2ZUVsZW1lbnRJbmRleCA9IHRoaXMuX2dldEl0ZW1JbmRleChhY3RpdmVFbGVtZW50KVxuICAgIGNvbnN0IG5leHRFbGVtZW50ICAgPSBlbGVtZW50IHx8IGFjdGl2ZUVsZW1lbnQgJiZcbiAgICAgIHRoaXMuX2dldEl0ZW1CeURpcmVjdGlvbihkaXJlY3Rpb24sIGFjdGl2ZUVsZW1lbnQpXG4gICAgY29uc3QgbmV4dEVsZW1lbnRJbmRleCA9IHRoaXMuX2dldEl0ZW1JbmRleChuZXh0RWxlbWVudClcbiAgICBjb25zdCBpc0N5Y2xpbmcgPSBCb29sZWFuKHRoaXMuX2ludGVydmFsKVxuXG4gICAgbGV0IGRpcmVjdGlvbmFsQ2xhc3NOYW1lXG4gICAgbGV0IG9yZGVyQ2xhc3NOYW1lXG4gICAgbGV0IGV2ZW50RGlyZWN0aW9uTmFtZVxuXG4gICAgaWYgKGRpcmVjdGlvbiA9PT0gRGlyZWN0aW9uLk5FWFQpIHtcbiAgICAgIGRpcmVjdGlvbmFsQ2xhc3NOYW1lID0gQ2xhc3NOYW1lLkxFRlRcbiAgICAgIG9yZGVyQ2xhc3NOYW1lID0gQ2xhc3NOYW1lLk5FWFRcbiAgICAgIGV2ZW50RGlyZWN0aW9uTmFtZSA9IERpcmVjdGlvbi5MRUZUXG4gICAgfSBlbHNlIHtcbiAgICAgIGRpcmVjdGlvbmFsQ2xhc3NOYW1lID0gQ2xhc3NOYW1lLlJJR0hUXG4gICAgICBvcmRlckNsYXNzTmFtZSA9IENsYXNzTmFtZS5QUkVWXG4gICAgICBldmVudERpcmVjdGlvbk5hbWUgPSBEaXJlY3Rpb24uUklHSFRcbiAgICB9XG5cbiAgICBpZiAobmV4dEVsZW1lbnQgJiYgJChuZXh0RWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSkpIHtcbiAgICAgIHRoaXMuX2lzU2xpZGluZyA9IGZhbHNlXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCBzbGlkZUV2ZW50ID0gdGhpcy5fdHJpZ2dlclNsaWRlRXZlbnQobmV4dEVsZW1lbnQsIGV2ZW50RGlyZWN0aW9uTmFtZSlcbiAgICBpZiAoc2xpZGVFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKCFhY3RpdmVFbGVtZW50IHx8ICFuZXh0RWxlbWVudCkge1xuICAgICAgLy8gU29tZSB3ZWlyZG5lc3MgaXMgaGFwcGVuaW5nLCBzbyB3ZSBiYWlsXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB0aGlzLl9pc1NsaWRpbmcgPSB0cnVlXG5cbiAgICBpZiAoaXNDeWNsaW5nKSB7XG4gICAgICB0aGlzLnBhdXNlKClcbiAgICB9XG5cbiAgICB0aGlzLl9zZXRBY3RpdmVJbmRpY2F0b3JFbGVtZW50KG5leHRFbGVtZW50KVxuXG4gICAgY29uc3Qgc2xpZEV2ZW50ID0gJC5FdmVudChFdmVudC5TTElELCB7XG4gICAgICByZWxhdGVkVGFyZ2V0OiBuZXh0RWxlbWVudCxcbiAgICAgIGRpcmVjdGlvbjogZXZlbnREaXJlY3Rpb25OYW1lLFxuICAgICAgZnJvbTogYWN0aXZlRWxlbWVudEluZGV4LFxuICAgICAgdG86IG5leHRFbGVtZW50SW5kZXhcbiAgICB9KVxuXG4gICAgaWYgKCQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLlNMSURFKSkge1xuICAgICAgJChuZXh0RWxlbWVudCkuYWRkQ2xhc3Mob3JkZXJDbGFzc05hbWUpXG5cbiAgICAgIFV0aWwucmVmbG93KG5leHRFbGVtZW50KVxuXG4gICAgICAkKGFjdGl2ZUVsZW1lbnQpLmFkZENsYXNzKGRpcmVjdGlvbmFsQ2xhc3NOYW1lKVxuICAgICAgJChuZXh0RWxlbWVudCkuYWRkQ2xhc3MoZGlyZWN0aW9uYWxDbGFzc05hbWUpXG5cbiAgICAgIGNvbnN0IG5leHRFbGVtZW50SW50ZXJ2YWwgPSBwYXJzZUludChuZXh0RWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaW50ZXJ2YWwnKSwgMTApXG4gICAgICBpZiAobmV4dEVsZW1lbnRJbnRlcnZhbCkge1xuICAgICAgICB0aGlzLl9jb25maWcuZGVmYXVsdEludGVydmFsID0gdGhpcy5fY29uZmlnLmRlZmF1bHRJbnRlcnZhbCB8fCB0aGlzLl9jb25maWcuaW50ZXJ2YWxcbiAgICAgICAgdGhpcy5fY29uZmlnLmludGVydmFsID0gbmV4dEVsZW1lbnRJbnRlcnZhbFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fY29uZmlnLmludGVydmFsID0gdGhpcy5fY29uZmlnLmRlZmF1bHRJbnRlcnZhbCB8fCB0aGlzLl9jb25maWcuaW50ZXJ2YWxcbiAgICAgIH1cblxuICAgICAgY29uc3QgdHJhbnNpdGlvbkR1cmF0aW9uID0gVXRpbC5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudChhY3RpdmVFbGVtZW50KVxuXG4gICAgICAkKGFjdGl2ZUVsZW1lbnQpXG4gICAgICAgIC5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgKCkgPT4ge1xuICAgICAgICAgICQobmV4dEVsZW1lbnQpXG4gICAgICAgICAgICAucmVtb3ZlQ2xhc3MoYCR7ZGlyZWN0aW9uYWxDbGFzc05hbWV9ICR7b3JkZXJDbGFzc05hbWV9YClcbiAgICAgICAgICAgIC5hZGRDbGFzcyhDbGFzc05hbWUuQUNUSVZFKVxuXG4gICAgICAgICAgJChhY3RpdmVFbGVtZW50KS5yZW1vdmVDbGFzcyhgJHtDbGFzc05hbWUuQUNUSVZFfSAke29yZGVyQ2xhc3NOYW1lfSAke2RpcmVjdGlvbmFsQ2xhc3NOYW1lfWApXG5cbiAgICAgICAgICB0aGlzLl9pc1NsaWRpbmcgPSBmYWxzZVxuXG4gICAgICAgICAgc2V0VGltZW91dCgoKSA9PiAkKHRoaXMuX2VsZW1lbnQpLnRyaWdnZXIoc2xpZEV2ZW50KSwgMClcbiAgICAgICAgfSlcbiAgICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKHRyYW5zaXRpb25EdXJhdGlvbilcbiAgICB9IGVsc2Uge1xuICAgICAgJChhY3RpdmVFbGVtZW50KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuQUNUSVZFKVxuICAgICAgJChuZXh0RWxlbWVudCkuYWRkQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSlcblxuICAgICAgdGhpcy5faXNTbGlkaW5nID0gZmFsc2VcbiAgICAgICQodGhpcy5fZWxlbWVudCkudHJpZ2dlcihzbGlkRXZlbnQpXG4gICAgfVxuXG4gICAgaWYgKGlzQ3ljbGluZykge1xuICAgICAgdGhpcy5jeWNsZSgpXG4gICAgfVxuICB9XG5cbiAgLy8gU3RhdGljXG5cbiAgc3RhdGljIF9qUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgZGF0YSA9ICQodGhpcykuZGF0YShEQVRBX0tFWSlcbiAgICAgIGxldCBfY29uZmlnID0ge1xuICAgICAgICAuLi5EZWZhdWx0LFxuICAgICAgICAuLi4kKHRoaXMpLmRhdGEoKVxuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgX2NvbmZpZyA9IHtcbiAgICAgICAgICAuLi5fY29uZmlnLFxuICAgICAgICAgIC4uLmNvbmZpZ1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGFjdGlvbiA9IHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnID8gY29uZmlnIDogX2NvbmZpZy5zbGlkZVxuXG4gICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgZGF0YSA9IG5ldyBDYXJvdXNlbCh0aGlzLCBfY29uZmlnKVxuICAgICAgICAkKHRoaXMpLmRhdGEoREFUQV9LRVksIGRhdGEpXG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnbnVtYmVyJykge1xuICAgICAgICBkYXRhLnRvKGNvbmZpZylcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGFjdGlvbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBkYXRhW2FjdGlvbl0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgTm8gbWV0aG9kIG5hbWVkIFwiJHthY3Rpb259XCJgKVxuICAgICAgICB9XG4gICAgICAgIGRhdGFbYWN0aW9uXSgpXG4gICAgICB9IGVsc2UgaWYgKF9jb25maWcuaW50ZXJ2YWwpIHtcbiAgICAgICAgZGF0YS5wYXVzZSgpXG4gICAgICAgIGRhdGEuY3ljbGUoKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBzdGF0aWMgX2RhdGFBcGlDbGlja0hhbmRsZXIoZXZlbnQpIHtcbiAgICBjb25zdCBzZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCh0aGlzKVxuXG4gICAgaWYgKCFzZWxlY3Rvcikge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgdGFyZ2V0ID0gJChzZWxlY3RvcilbMF1cblxuICAgIGlmICghdGFyZ2V0IHx8ICEkKHRhcmdldCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkNBUk9VU0VMKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgY29uZmlnID0ge1xuICAgICAgLi4uJCh0YXJnZXQpLmRhdGEoKSxcbiAgICAgIC4uLiQodGhpcykuZGF0YSgpXG4gICAgfVxuICAgIGNvbnN0IHNsaWRlSW5kZXggPSB0aGlzLmdldEF0dHJpYnV0ZSgnZGF0YS1zbGlkZS10bycpXG5cbiAgICBpZiAoc2xpZGVJbmRleCkge1xuICAgICAgY29uZmlnLmludGVydmFsID0gZmFsc2VcbiAgICB9XG5cbiAgICBDYXJvdXNlbC5falF1ZXJ5SW50ZXJmYWNlLmNhbGwoJCh0YXJnZXQpLCBjb25maWcpXG5cbiAgICBpZiAoc2xpZGVJbmRleCkge1xuICAgICAgJCh0YXJnZXQpLmRhdGEoREFUQV9LRVkpLnRvKHNsaWRlSW5kZXgpXG4gICAgfVxuXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICB9XG59XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBEYXRhIEFwaSBpbXBsZW1lbnRhdGlvblxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuJChkb2N1bWVudClcbiAgLm9uKEV2ZW50LkNMSUNLX0RBVEFfQVBJLCBTZWxlY3Rvci5EQVRBX1NMSURFLCBDYXJvdXNlbC5fZGF0YUFwaUNsaWNrSGFuZGxlcilcblxuJCh3aW5kb3cpLm9uKEV2ZW50LkxPQURfREFUQV9BUEksICgpID0+IHtcbiAgY29uc3QgY2Fyb3VzZWxzID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFNlbGVjdG9yLkRBVEFfUklERSkpXG4gIGZvciAobGV0IGkgPSAwLCBsZW4gPSBjYXJvdXNlbHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBjb25zdCAkY2Fyb3VzZWwgPSAkKGNhcm91c2Vsc1tpXSlcbiAgICBDYXJvdXNlbC5falF1ZXJ5SW50ZXJmYWNlLmNhbGwoJGNhcm91c2VsLCAkY2Fyb3VzZWwuZGF0YSgpKVxuICB9XG59KVxuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogalF1ZXJ5XG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG4kLmZuW05BTUVdID0gQ2Fyb3VzZWwuX2pRdWVyeUludGVyZmFjZVxuJC5mbltOQU1FXS5Db25zdHJ1Y3RvciA9IENhcm91c2VsXG4kLmZuW05BTUVdLm5vQ29uZmxpY3QgPSAoKSA9PiB7XG4gICQuZm5bTkFNRV0gPSBKUVVFUllfTk9fQ09ORkxJQ1RcbiAgcmV0dXJuIENhcm91c2VsLl9qUXVlcnlJbnRlcmZhY2Vcbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2Fyb3VzZWxcbiIsIi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjQuMi4xKTogY29sbGFwc2UuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmltcG9ydCAkIGZyb20gJ2pxdWVyeSdcbmltcG9ydCBVdGlsIGZyb20gJy4vdXRpbCdcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvbnN0YW50c1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuY29uc3QgTkFNRSAgICAgICAgICAgICAgICA9ICdjb2xsYXBzZSdcbmNvbnN0IFZFUlNJT04gICAgICAgICAgICAgPSAnNC4yLjEnXG5jb25zdCBEQVRBX0tFWSAgICAgICAgICAgID0gJ2JzLmNvbGxhcHNlJ1xuY29uc3QgRVZFTlRfS0VZICAgICAgICAgICA9IGAuJHtEQVRBX0tFWX1gXG5jb25zdCBEQVRBX0FQSV9LRVkgICAgICAgID0gJy5kYXRhLWFwaSdcbmNvbnN0IEpRVUVSWV9OT19DT05GTElDVCAgPSAkLmZuW05BTUVdXG5cbmNvbnN0IERlZmF1bHQgPSB7XG4gIHRvZ2dsZSA6IHRydWUsXG4gIHBhcmVudCA6ICcnXG59XG5cbmNvbnN0IERlZmF1bHRUeXBlID0ge1xuICB0b2dnbGUgOiAnYm9vbGVhbicsXG4gIHBhcmVudCA6ICcoc3RyaW5nfGVsZW1lbnQpJ1xufVxuXG5jb25zdCBFdmVudCA9IHtcbiAgU0hPVyAgICAgICAgICAgOiBgc2hvdyR7RVZFTlRfS0VZfWAsXG4gIFNIT1dOICAgICAgICAgIDogYHNob3duJHtFVkVOVF9LRVl9YCxcbiAgSElERSAgICAgICAgICAgOiBgaGlkZSR7RVZFTlRfS0VZfWAsXG4gIEhJRERFTiAgICAgICAgIDogYGhpZGRlbiR7RVZFTlRfS0VZfWAsXG4gIENMSUNLX0RBVEFfQVBJIDogYGNsaWNrJHtFVkVOVF9LRVl9JHtEQVRBX0FQSV9LRVl9YFxufVxuXG5jb25zdCBDbGFzc05hbWUgPSB7XG4gIFNIT1cgICAgICAgOiAnc2hvdycsXG4gIENPTExBUFNFICAgOiAnY29sbGFwc2UnLFxuICBDT0xMQVBTSU5HIDogJ2NvbGxhcHNpbmcnLFxuICBDT0xMQVBTRUQgIDogJ2NvbGxhcHNlZCdcbn1cblxuY29uc3QgRGltZW5zaW9uID0ge1xuICBXSURUSCAgOiAnd2lkdGgnLFxuICBIRUlHSFQgOiAnaGVpZ2h0J1xufVxuXG5jb25zdCBTZWxlY3RvciA9IHtcbiAgQUNUSVZFUyAgICAgOiAnLnNob3csIC5jb2xsYXBzaW5nJyxcbiAgREFUQV9UT0dHTEUgOiAnW2RhdGEtdG9nZ2xlPVwiY29sbGFwc2VcIl0nXG59XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDbGFzcyBEZWZpbml0aW9uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jbGFzcyBDb2xsYXBzZSB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIGNvbmZpZykge1xuICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IGZhbHNlXG4gICAgdGhpcy5fZWxlbWVudCAgICAgICAgID0gZWxlbWVudFxuICAgIHRoaXMuX2NvbmZpZyAgICAgICAgICA9IHRoaXMuX2dldENvbmZpZyhjb25maWcpXG4gICAgdGhpcy5fdHJpZ2dlckFycmF5ICAgID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFxuICAgICAgYFtkYXRhLXRvZ2dsZT1cImNvbGxhcHNlXCJdW2hyZWY9XCIjJHtlbGVtZW50LmlkfVwiXSxgICtcbiAgICAgIGBbZGF0YS10b2dnbGU9XCJjb2xsYXBzZVwiXVtkYXRhLXRhcmdldD1cIiMke2VsZW1lbnQuaWR9XCJdYFxuICAgICkpXG5cbiAgICBjb25zdCB0b2dnbGVMaXN0ID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFNlbGVjdG9yLkRBVEFfVE9HR0xFKSlcbiAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gdG9nZ2xlTGlzdC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgY29uc3QgZWxlbSA9IHRvZ2dsZUxpc3RbaV1cbiAgICAgIGNvbnN0IHNlbGVjdG9yID0gVXRpbC5nZXRTZWxlY3RvckZyb21FbGVtZW50KGVsZW0pXG4gICAgICBjb25zdCBmaWx0ZXJFbGVtZW50ID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSlcbiAgICAgICAgLmZpbHRlcigoZm91bmRFbGVtKSA9PiBmb3VuZEVsZW0gPT09IGVsZW1lbnQpXG5cbiAgICAgIGlmIChzZWxlY3RvciAhPT0gbnVsbCAmJiBmaWx0ZXJFbGVtZW50Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgdGhpcy5fc2VsZWN0b3IgPSBzZWxlY3RvclxuICAgICAgICB0aGlzLl90cmlnZ2VyQXJyYXkucHVzaChlbGVtKVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX3BhcmVudCA9IHRoaXMuX2NvbmZpZy5wYXJlbnQgPyB0aGlzLl9nZXRQYXJlbnQoKSA6IG51bGxcblxuICAgIGlmICghdGhpcy5fY29uZmlnLnBhcmVudCkge1xuICAgICAgdGhpcy5fYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzKHRoaXMuX2VsZW1lbnQsIHRoaXMuX3RyaWdnZXJBcnJheSlcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fY29uZmlnLnRvZ2dsZSkge1xuICAgICAgdGhpcy50b2dnbGUoKVxuICAgIH1cbiAgfVxuXG4gIC8vIEdldHRlcnNcblxuICBzdGF0aWMgZ2V0IFZFUlNJT04oKSB7XG4gICAgcmV0dXJuIFZFUlNJT05cbiAgfVxuXG4gIHN0YXRpYyBnZXQgRGVmYXVsdCgpIHtcbiAgICByZXR1cm4gRGVmYXVsdFxuICB9XG5cbiAgLy8gUHVibGljXG5cbiAgdG9nZ2xlKCkge1xuICAgIGlmICgkKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5TSE9XKSkge1xuICAgICAgdGhpcy5oaWRlKClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zaG93KClcbiAgICB9XG4gIH1cblxuICBzaG93KCkge1xuICAgIGlmICh0aGlzLl9pc1RyYW5zaXRpb25pbmcgfHxcbiAgICAgICQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBsZXQgYWN0aXZlc1xuICAgIGxldCBhY3RpdmVzRGF0YVxuXG4gICAgaWYgKHRoaXMuX3BhcmVudCkge1xuICAgICAgYWN0aXZlcyA9IFtdLnNsaWNlLmNhbGwodGhpcy5fcGFyZW50LnF1ZXJ5U2VsZWN0b3JBbGwoU2VsZWN0b3IuQUNUSVZFUykpXG4gICAgICAgIC5maWx0ZXIoKGVsZW0pID0+IHtcbiAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuX2NvbmZpZy5wYXJlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoJ2RhdGEtcGFyZW50JykgPT09IHRoaXMuX2NvbmZpZy5wYXJlbnRcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gZWxlbS5jbGFzc0xpc3QuY29udGFpbnMoQ2xhc3NOYW1lLkNPTExBUFNFKVxuICAgICAgICB9KVxuXG4gICAgICBpZiAoYWN0aXZlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgYWN0aXZlcyA9IG51bGxcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoYWN0aXZlcykge1xuICAgICAgYWN0aXZlc0RhdGEgPSAkKGFjdGl2ZXMpLm5vdCh0aGlzLl9zZWxlY3RvcikuZGF0YShEQVRBX0tFWSlcbiAgICAgIGlmIChhY3RpdmVzRGF0YSAmJiBhY3RpdmVzRGF0YS5faXNUcmFuc2l0aW9uaW5nKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHN0YXJ0RXZlbnQgPSAkLkV2ZW50KEV2ZW50LlNIT1cpXG4gICAgJCh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKHN0YXJ0RXZlbnQpXG4gICAgaWYgKHN0YXJ0RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmIChhY3RpdmVzKSB7XG4gICAgICBDb2xsYXBzZS5falF1ZXJ5SW50ZXJmYWNlLmNhbGwoJChhY3RpdmVzKS5ub3QodGhpcy5fc2VsZWN0b3IpLCAnaGlkZScpXG4gICAgICBpZiAoIWFjdGl2ZXNEYXRhKSB7XG4gICAgICAgICQoYWN0aXZlcykuZGF0YShEQVRBX0tFWSwgbnVsbClcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBkaW1lbnNpb24gPSB0aGlzLl9nZXREaW1lbnNpb24oKVxuXG4gICAgJCh0aGlzLl9lbGVtZW50KVxuICAgICAgLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5DT0xMQVBTRSlcbiAgICAgIC5hZGRDbGFzcyhDbGFzc05hbWUuQ09MTEFQU0lORylcblxuICAgIHRoaXMuX2VsZW1lbnQuc3R5bGVbZGltZW5zaW9uXSA9IDBcblxuICAgIGlmICh0aGlzLl90cmlnZ2VyQXJyYXkubGVuZ3RoKSB7XG4gICAgICAkKHRoaXMuX3RyaWdnZXJBcnJheSlcbiAgICAgICAgLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5DT0xMQVBTRUQpXG4gICAgICAgIC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgdHJ1ZSlcbiAgICB9XG5cbiAgICB0aGlzLnNldFRyYW5zaXRpb25pbmcodHJ1ZSlcblxuICAgIGNvbnN0IGNvbXBsZXRlID0gKCkgPT4ge1xuICAgICAgJCh0aGlzLl9lbGVtZW50KVxuICAgICAgICAucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLkNPTExBUFNJTkcpXG4gICAgICAgIC5hZGRDbGFzcyhDbGFzc05hbWUuQ09MTEFQU0UpXG4gICAgICAgIC5hZGRDbGFzcyhDbGFzc05hbWUuU0hPVylcblxuICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZVtkaW1lbnNpb25dID0gJydcblxuICAgICAgdGhpcy5zZXRUcmFuc2l0aW9uaW5nKGZhbHNlKVxuXG4gICAgICAkKHRoaXMuX2VsZW1lbnQpLnRyaWdnZXIoRXZlbnQuU0hPV04pXG4gICAgfVxuXG4gICAgY29uc3QgY2FwaXRhbGl6ZWREaW1lbnNpb24gPSBkaW1lbnNpb25bMF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSgxKVxuICAgIGNvbnN0IHNjcm9sbFNpemUgPSBgc2Nyb2xsJHtjYXBpdGFsaXplZERpbWVuc2lvbn1gXG4gICAgY29uc3QgdHJhbnNpdGlvbkR1cmF0aW9uID0gVXRpbC5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCh0aGlzLl9lbGVtZW50KVxuXG4gICAgJCh0aGlzLl9lbGVtZW50KVxuICAgICAgLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBjb21wbGV0ZSlcbiAgICAgIC5lbXVsYXRlVHJhbnNpdGlvbkVuZCh0cmFuc2l0aW9uRHVyYXRpb24pXG5cbiAgICB0aGlzLl9lbGVtZW50LnN0eWxlW2RpbWVuc2lvbl0gPSBgJHt0aGlzLl9lbGVtZW50W3Njcm9sbFNpemVdfXB4YFxuICB9XG5cbiAgaGlkZSgpIHtcbiAgICBpZiAodGhpcy5faXNUcmFuc2l0aW9uaW5nIHx8XG4gICAgICAhJCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuU0hPVykpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IHN0YXJ0RXZlbnQgPSAkLkV2ZW50KEV2ZW50LkhJREUpXG4gICAgJCh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKHN0YXJ0RXZlbnQpXG4gICAgaWYgKHN0YXJ0RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IGRpbWVuc2lvbiA9IHRoaXMuX2dldERpbWVuc2lvbigpXG5cbiAgICB0aGlzLl9lbGVtZW50LnN0eWxlW2RpbWVuc2lvbl0gPSBgJHt0aGlzLl9lbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpW2RpbWVuc2lvbl19cHhgXG5cbiAgICBVdGlsLnJlZmxvdyh0aGlzLl9lbGVtZW50KVxuXG4gICAgJCh0aGlzLl9lbGVtZW50KVxuICAgICAgLmFkZENsYXNzKENsYXNzTmFtZS5DT0xMQVBTSU5HKVxuICAgICAgLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5DT0xMQVBTRSlcbiAgICAgIC5yZW1vdmVDbGFzcyhDbGFzc05hbWUuU0hPVylcblxuICAgIGNvbnN0IHRyaWdnZXJBcnJheUxlbmd0aCA9IHRoaXMuX3RyaWdnZXJBcnJheS5sZW5ndGhcbiAgICBpZiAodHJpZ2dlckFycmF5TGVuZ3RoID4gMCkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0cmlnZ2VyQXJyYXlMZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCB0cmlnZ2VyID0gdGhpcy5fdHJpZ2dlckFycmF5W2ldXG4gICAgICAgIGNvbnN0IHNlbGVjdG9yID0gVXRpbC5nZXRTZWxlY3RvckZyb21FbGVtZW50KHRyaWdnZXIpXG5cbiAgICAgICAgaWYgKHNlbGVjdG9yICE9PSBudWxsKSB7XG4gICAgICAgICAgY29uc3QgJGVsZW0gPSAkKFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikpKVxuICAgICAgICAgIGlmICghJGVsZW0uaGFzQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpKSB7XG4gICAgICAgICAgICAkKHRyaWdnZXIpLmFkZENsYXNzKENsYXNzTmFtZS5DT0xMQVBTRUQpXG4gICAgICAgICAgICAgIC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgZmFsc2UpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5zZXRUcmFuc2l0aW9uaW5nKHRydWUpXG5cbiAgICBjb25zdCBjb21wbGV0ZSA9ICgpID0+IHtcbiAgICAgIHRoaXMuc2V0VHJhbnNpdGlvbmluZyhmYWxzZSlcbiAgICAgICQodGhpcy5fZWxlbWVudClcbiAgICAgICAgLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5DT0xMQVBTSU5HKVxuICAgICAgICAuYWRkQ2xhc3MoQ2xhc3NOYW1lLkNPTExBUFNFKVxuICAgICAgICAudHJpZ2dlcihFdmVudC5ISURERU4pXG4gICAgfVxuXG4gICAgdGhpcy5fZWxlbWVudC5zdHlsZVtkaW1lbnNpb25dID0gJydcbiAgICBjb25zdCB0cmFuc2l0aW9uRHVyYXRpb24gPSBVdGlsLmdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KHRoaXMuX2VsZW1lbnQpXG5cbiAgICAkKHRoaXMuX2VsZW1lbnQpXG4gICAgICAub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGNvbXBsZXRlKVxuICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKHRyYW5zaXRpb25EdXJhdGlvbilcbiAgfVxuXG4gIHNldFRyYW5zaXRpb25pbmcoaXNUcmFuc2l0aW9uaW5nKSB7XG4gICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gaXNUcmFuc2l0aW9uaW5nXG4gIH1cblxuICBkaXNwb3NlKCkge1xuICAgICQucmVtb3ZlRGF0YSh0aGlzLl9lbGVtZW50LCBEQVRBX0tFWSlcblxuICAgIHRoaXMuX2NvbmZpZyAgICAgICAgICA9IG51bGxcbiAgICB0aGlzLl9wYXJlbnQgICAgICAgICAgPSBudWxsXG4gICAgdGhpcy5fZWxlbWVudCAgICAgICAgID0gbnVsbFxuICAgIHRoaXMuX3RyaWdnZXJBcnJheSAgICA9IG51bGxcbiAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSBudWxsXG4gIH1cblxuICAvLyBQcml2YXRlXG5cbiAgX2dldENvbmZpZyhjb25maWcpIHtcbiAgICBjb25maWcgPSB7XG4gICAgICAuLi5EZWZhdWx0LFxuICAgICAgLi4uY29uZmlnXG4gICAgfVxuICAgIGNvbmZpZy50b2dnbGUgPSBCb29sZWFuKGNvbmZpZy50b2dnbGUpIC8vIENvZXJjZSBzdHJpbmcgdmFsdWVzXG4gICAgVXRpbC50eXBlQ2hlY2tDb25maWcoTkFNRSwgY29uZmlnLCBEZWZhdWx0VHlwZSlcbiAgICByZXR1cm4gY29uZmlnXG4gIH1cblxuICBfZ2V0RGltZW5zaW9uKCkge1xuICAgIGNvbnN0IGhhc1dpZHRoID0gJCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhEaW1lbnNpb24uV0lEVEgpXG4gICAgcmV0dXJuIGhhc1dpZHRoID8gRGltZW5zaW9uLldJRFRIIDogRGltZW5zaW9uLkhFSUdIVFxuICB9XG5cbiAgX2dldFBhcmVudCgpIHtcbiAgICBsZXQgcGFyZW50XG5cbiAgICBpZiAoVXRpbC5pc0VsZW1lbnQodGhpcy5fY29uZmlnLnBhcmVudCkpIHtcbiAgICAgIHBhcmVudCA9IHRoaXMuX2NvbmZpZy5wYXJlbnRcblxuICAgICAgLy8gSXQncyBhIGpRdWVyeSBvYmplY3RcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5fY29uZmlnLnBhcmVudC5qcXVlcnkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHBhcmVudCA9IHRoaXMuX2NvbmZpZy5wYXJlbnRbMF1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGFyZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLl9jb25maWcucGFyZW50KVxuICAgIH1cblxuICAgIGNvbnN0IHNlbGVjdG9yID1cbiAgICAgIGBbZGF0YS10b2dnbGU9XCJjb2xsYXBzZVwiXVtkYXRhLXBhcmVudD1cIiR7dGhpcy5fY29uZmlnLnBhcmVudH1cIl1gXG5cbiAgICBjb25zdCBjaGlsZHJlbiA9IFtdLnNsaWNlLmNhbGwocGFyZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpKVxuICAgICQoY2hpbGRyZW4pLmVhY2goKGksIGVsZW1lbnQpID0+IHtcbiAgICAgIHRoaXMuX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyhcbiAgICAgICAgQ29sbGFwc2UuX2dldFRhcmdldEZyb21FbGVtZW50KGVsZW1lbnQpLFxuICAgICAgICBbZWxlbWVudF1cbiAgICAgIClcbiAgICB9KVxuXG4gICAgcmV0dXJuIHBhcmVudFxuICB9XG5cbiAgX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyhlbGVtZW50LCB0cmlnZ2VyQXJyYXkpIHtcbiAgICBjb25zdCBpc09wZW4gPSAkKGVsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5TSE9XKVxuXG4gICAgaWYgKHRyaWdnZXJBcnJheS5sZW5ndGgpIHtcbiAgICAgICQodHJpZ2dlckFycmF5KVxuICAgICAgICAudG9nZ2xlQ2xhc3MoQ2xhc3NOYW1lLkNPTExBUFNFRCwgIWlzT3BlbilcbiAgICAgICAgLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCBpc09wZW4pXG4gICAgfVxuICB9XG5cbiAgLy8gU3RhdGljXG5cbiAgc3RhdGljIF9nZXRUYXJnZXRGcm9tRWxlbWVudChlbGVtZW50KSB7XG4gICAgY29uc3Qgc2VsZWN0b3IgPSBVdGlsLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQoZWxlbWVudClcbiAgICByZXR1cm4gc2VsZWN0b3IgPyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKSA6IG51bGxcbiAgfVxuXG4gIHN0YXRpYyBfalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgJHRoaXMgICA9ICQodGhpcylcbiAgICAgIGxldCBkYXRhICAgICAgPSAkdGhpcy5kYXRhKERBVEFfS0VZKVxuICAgICAgY29uc3QgX2NvbmZpZyA9IHtcbiAgICAgICAgLi4uRGVmYXVsdCxcbiAgICAgICAgLi4uJHRoaXMuZGF0YSgpLFxuICAgICAgICAuLi50eXBlb2YgY29uZmlnID09PSAnb2JqZWN0JyAmJiBjb25maWcgPyBjb25maWcgOiB7fVxuICAgICAgfVxuXG4gICAgICBpZiAoIWRhdGEgJiYgX2NvbmZpZy50b2dnbGUgJiYgL3Nob3d8aGlkZS8udGVzdChjb25maWcpKSB7XG4gICAgICAgIF9jb25maWcudG9nZ2xlID0gZmFsc2VcbiAgICAgIH1cblxuICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgIGRhdGEgPSBuZXcgQ29sbGFwc2UodGhpcywgX2NvbmZpZylcbiAgICAgICAgJHRoaXMuZGF0YShEQVRBX0tFWSwgZGF0YSlcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZGF0YVtjb25maWddID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYE5vIG1ldGhvZCBuYW1lZCBcIiR7Y29uZmlnfVwiYClcbiAgICAgICAgfVxuICAgICAgICBkYXRhW2NvbmZpZ10oKVxuICAgICAgfVxuICAgIH0pXG4gIH1cbn1cblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIERhdGEgQXBpIGltcGxlbWVudGF0aW9uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG4kKGRvY3VtZW50KS5vbihFdmVudC5DTElDS19EQVRBX0FQSSwgU2VsZWN0b3IuREFUQV9UT0dHTEUsIGZ1bmN0aW9uIChldmVudCkge1xuICAvLyBwcmV2ZW50RGVmYXVsdCBvbmx5IGZvciA8YT4gZWxlbWVudHMgKHdoaWNoIGNoYW5nZSB0aGUgVVJMKSBub3QgaW5zaWRlIHRoZSBjb2xsYXBzaWJsZSBlbGVtZW50XG4gIGlmIChldmVudC5jdXJyZW50VGFyZ2V0LnRhZ05hbWUgPT09ICdBJykge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgfVxuXG4gIGNvbnN0ICR0cmlnZ2VyID0gJCh0aGlzKVxuICBjb25zdCBzZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCh0aGlzKVxuICBjb25zdCBzZWxlY3RvcnMgPSBbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpKVxuXG4gICQoc2VsZWN0b3JzKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCAkdGFyZ2V0ID0gJCh0aGlzKVxuICAgIGNvbnN0IGRhdGEgICAgPSAkdGFyZ2V0LmRhdGEoREFUQV9LRVkpXG4gICAgY29uc3QgY29uZmlnICA9IGRhdGEgPyAndG9nZ2xlJyA6ICR0cmlnZ2VyLmRhdGEoKVxuICAgIENvbGxhcHNlLl9qUXVlcnlJbnRlcmZhY2UuY2FsbCgkdGFyZ2V0LCBjb25maWcpXG4gIH0pXG59KVxuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogalF1ZXJ5XG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG4kLmZuW05BTUVdID0gQ29sbGFwc2UuX2pRdWVyeUludGVyZmFjZVxuJC5mbltOQU1FXS5Db25zdHJ1Y3RvciA9IENvbGxhcHNlXG4kLmZuW05BTUVdLm5vQ29uZmxpY3QgPSAoKSA9PiB7XG4gICQuZm5bTkFNRV0gPSBKUVVFUllfTk9fQ09ORkxJQ1RcbiAgcmV0dXJuIENvbGxhcHNlLl9qUXVlcnlJbnRlcmZhY2Vcbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29sbGFwc2VcbiIsIi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjQuMi4xKTogZHJvcGRvd24uanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmltcG9ydCAkIGZyb20gJ2pxdWVyeSdcbmltcG9ydCBQb3BwZXIgZnJvbSAncG9wcGVyLmpzJ1xuaW1wb3J0IFV0aWwgZnJvbSAnLi91dGlsJ1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29uc3RhbnRzXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jb25zdCBOQU1FICAgICAgICAgICAgICAgICAgICAgPSAnZHJvcGRvd24nXG5jb25zdCBWRVJTSU9OICAgICAgICAgICAgICAgICAgPSAnNC4yLjEnXG5jb25zdCBEQVRBX0tFWSAgICAgICAgICAgICAgICAgPSAnYnMuZHJvcGRvd24nXG5jb25zdCBFVkVOVF9LRVkgICAgICAgICAgICAgICAgPSBgLiR7REFUQV9LRVl9YFxuY29uc3QgREFUQV9BUElfS0VZICAgICAgICAgICAgID0gJy5kYXRhLWFwaSdcbmNvbnN0IEpRVUVSWV9OT19DT05GTElDVCAgICAgICA9ICQuZm5bTkFNRV1cbmNvbnN0IEVTQ0FQRV9LRVlDT0RFICAgICAgICAgICA9IDI3IC8vIEtleWJvYXJkRXZlbnQud2hpY2ggdmFsdWUgZm9yIEVzY2FwZSAoRXNjKSBrZXlcbmNvbnN0IFNQQUNFX0tFWUNPREUgICAgICAgICAgICA9IDMyIC8vIEtleWJvYXJkRXZlbnQud2hpY2ggdmFsdWUgZm9yIHNwYWNlIGtleVxuY29uc3QgVEFCX0tFWUNPREUgICAgICAgICAgICAgID0gOSAvLyBLZXlib2FyZEV2ZW50LndoaWNoIHZhbHVlIGZvciB0YWIga2V5XG5jb25zdCBBUlJPV19VUF9LRVlDT0RFICAgICAgICAgPSAzOCAvLyBLZXlib2FyZEV2ZW50LndoaWNoIHZhbHVlIGZvciB1cCBhcnJvdyBrZXlcbmNvbnN0IEFSUk9XX0RPV05fS0VZQ09ERSAgICAgICA9IDQwIC8vIEtleWJvYXJkRXZlbnQud2hpY2ggdmFsdWUgZm9yIGRvd24gYXJyb3cga2V5XG5jb25zdCBSSUdIVF9NT1VTRV9CVVRUT05fV0hJQ0ggPSAzIC8vIE1vdXNlRXZlbnQud2hpY2ggdmFsdWUgZm9yIHRoZSByaWdodCBidXR0b24gKGFzc3VtaW5nIGEgcmlnaHQtaGFuZGVkIG1vdXNlKVxuY29uc3QgUkVHRVhQX0tFWURPV04gICAgICAgICAgID0gbmV3IFJlZ0V4cChgJHtBUlJPV19VUF9LRVlDT0RFfXwke0FSUk9XX0RPV05fS0VZQ09ERX18JHtFU0NBUEVfS0VZQ09ERX1gKVxuXG5jb25zdCBFdmVudCA9IHtcbiAgSElERSAgICAgICAgICAgICA6IGBoaWRlJHtFVkVOVF9LRVl9YCxcbiAgSElEREVOICAgICAgICAgICA6IGBoaWRkZW4ke0VWRU5UX0tFWX1gLFxuICBTSE9XICAgICAgICAgICAgIDogYHNob3cke0VWRU5UX0tFWX1gLFxuICBTSE9XTiAgICAgICAgICAgIDogYHNob3duJHtFVkVOVF9LRVl9YCxcbiAgQ0xJQ0sgICAgICAgICAgICA6IGBjbGljayR7RVZFTlRfS0VZfWAsXG4gIENMSUNLX0RBVEFfQVBJICAgOiBgY2xpY2ske0VWRU5UX0tFWX0ke0RBVEFfQVBJX0tFWX1gLFxuICBLRVlET1dOX0RBVEFfQVBJIDogYGtleWRvd24ke0VWRU5UX0tFWX0ke0RBVEFfQVBJX0tFWX1gLFxuICBLRVlVUF9EQVRBX0FQSSAgIDogYGtleXVwJHtFVkVOVF9LRVl9JHtEQVRBX0FQSV9LRVl9YFxufVxuXG5jb25zdCBDbGFzc05hbWUgPSB7XG4gIERJU0FCTEVEICAgICAgICA6ICdkaXNhYmxlZCcsXG4gIFNIT1cgICAgICAgICAgICA6ICdzaG93JyxcbiAgRFJPUFVQICAgICAgICAgIDogJ2Ryb3B1cCcsXG4gIERST1BSSUdIVCAgICAgICA6ICdkcm9wcmlnaHQnLFxuICBEUk9QTEVGVCAgICAgICAgOiAnZHJvcGxlZnQnLFxuICBNRU5VUklHSFQgICAgICAgOiAnZHJvcGRvd24tbWVudS1yaWdodCcsXG4gIE1FTlVMRUZUICAgICAgICA6ICdkcm9wZG93bi1tZW51LWxlZnQnLFxuICBQT1NJVElPTl9TVEFUSUMgOiAncG9zaXRpb24tc3RhdGljJ1xufVxuXG5jb25zdCBTZWxlY3RvciA9IHtcbiAgREFUQV9UT0dHTEUgICA6ICdbZGF0YS10b2dnbGU9XCJkcm9wZG93blwiXScsXG4gIEZPUk1fQ0hJTEQgICAgOiAnLmRyb3Bkb3duIGZvcm0nLFxuICBNRU5VICAgICAgICAgIDogJy5kcm9wZG93bi1tZW51JyxcbiAgTkFWQkFSX05BViAgICA6ICcubmF2YmFyLW5hdicsXG4gIFZJU0lCTEVfSVRFTVMgOiAnLmRyb3Bkb3duLW1lbnUgLmRyb3Bkb3duLWl0ZW06bm90KC5kaXNhYmxlZCk6bm90KDpkaXNhYmxlZCknXG59XG5cbmNvbnN0IEF0dGFjaG1lbnRNYXAgPSB7XG4gIFRPUCAgICAgICA6ICd0b3Atc3RhcnQnLFxuICBUT1BFTkQgICAgOiAndG9wLWVuZCcsXG4gIEJPVFRPTSAgICA6ICdib3R0b20tc3RhcnQnLFxuICBCT1RUT01FTkQgOiAnYm90dG9tLWVuZCcsXG4gIFJJR0hUICAgICA6ICdyaWdodC1zdGFydCcsXG4gIFJJR0hURU5EICA6ICdyaWdodC1lbmQnLFxuICBMRUZUICAgICAgOiAnbGVmdC1zdGFydCcsXG4gIExFRlRFTkQgICA6ICdsZWZ0LWVuZCdcbn1cblxuY29uc3QgRGVmYXVsdCA9IHtcbiAgb2Zmc2V0ICAgIDogMCxcbiAgZmxpcCAgICAgIDogdHJ1ZSxcbiAgYm91bmRhcnkgIDogJ3Njcm9sbFBhcmVudCcsXG4gIHJlZmVyZW5jZSA6ICd0b2dnbGUnLFxuICBkaXNwbGF5ICAgOiAnZHluYW1pYydcbn1cblxuY29uc3QgRGVmYXVsdFR5cGUgPSB7XG4gIG9mZnNldCAgICA6ICcobnVtYmVyfHN0cmluZ3xmdW5jdGlvbiknLFxuICBmbGlwICAgICAgOiAnYm9vbGVhbicsXG4gIGJvdW5kYXJ5ICA6ICcoc3RyaW5nfGVsZW1lbnQpJyxcbiAgcmVmZXJlbmNlIDogJyhzdHJpbmd8ZWxlbWVudCknLFxuICBkaXNwbGF5ICAgOiAnc3RyaW5nJ1xufVxuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ2xhc3MgRGVmaW5pdGlvblxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuY2xhc3MgRHJvcGRvd24ge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBjb25maWcpIHtcbiAgICB0aGlzLl9lbGVtZW50ICA9IGVsZW1lbnRcbiAgICB0aGlzLl9wb3BwZXIgICA9IG51bGxcbiAgICB0aGlzLl9jb25maWcgICA9IHRoaXMuX2dldENvbmZpZyhjb25maWcpXG4gICAgdGhpcy5fbWVudSAgICAgPSB0aGlzLl9nZXRNZW51RWxlbWVudCgpXG4gICAgdGhpcy5faW5OYXZiYXIgPSB0aGlzLl9kZXRlY3ROYXZiYXIoKVxuXG4gICAgdGhpcy5fYWRkRXZlbnRMaXN0ZW5lcnMoKVxuICB9XG5cbiAgLy8gR2V0dGVyc1xuXG4gIHN0YXRpYyBnZXQgVkVSU0lPTigpIHtcbiAgICByZXR1cm4gVkVSU0lPTlxuICB9XG5cbiAgc3RhdGljIGdldCBEZWZhdWx0KCkge1xuICAgIHJldHVybiBEZWZhdWx0XG4gIH1cblxuICBzdGF0aWMgZ2V0IERlZmF1bHRUeXBlKCkge1xuICAgIHJldHVybiBEZWZhdWx0VHlwZVxuICB9XG5cbiAgLy8gUHVibGljXG5cbiAgdG9nZ2xlKCkge1xuICAgIGlmICh0aGlzLl9lbGVtZW50LmRpc2FibGVkIHx8ICQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkRJU0FCTEVEKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgcGFyZW50ICAgPSBEcm9wZG93bi5fZ2V0UGFyZW50RnJvbUVsZW1lbnQodGhpcy5fZWxlbWVudClcbiAgICBjb25zdCBpc0FjdGl2ZSA9ICQodGhpcy5fbWVudSkuaGFzQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpXG5cbiAgICBEcm9wZG93bi5fY2xlYXJNZW51cygpXG5cbiAgICBpZiAoaXNBY3RpdmUpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IHJlbGF0ZWRUYXJnZXQgPSB7XG4gICAgICByZWxhdGVkVGFyZ2V0OiB0aGlzLl9lbGVtZW50XG4gICAgfVxuICAgIGNvbnN0IHNob3dFdmVudCA9ICQuRXZlbnQoRXZlbnQuU0hPVywgcmVsYXRlZFRhcmdldClcblxuICAgICQocGFyZW50KS50cmlnZ2VyKHNob3dFdmVudClcblxuICAgIGlmIChzaG93RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIERpc2FibGUgdG90YWxseSBQb3BwZXIuanMgZm9yIERyb3Bkb3duIGluIE5hdmJhclxuICAgIGlmICghdGhpcy5faW5OYXZiYXIpIHtcbiAgICAgIC8qKlxuICAgICAgICogQ2hlY2sgZm9yIFBvcHBlciBkZXBlbmRlbmN5XG4gICAgICAgKiBQb3BwZXIgLSBodHRwczovL3BvcHBlci5qcy5vcmdcbiAgICAgICAqL1xuICAgICAgaWYgKHR5cGVvZiBQb3BwZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Jvb3RzdHJhcFxcJ3MgZHJvcGRvd25zIHJlcXVpcmUgUG9wcGVyLmpzIChodHRwczovL3BvcHBlci5qcy5vcmcvKScpXG4gICAgICB9XG5cbiAgICAgIGxldCByZWZlcmVuY2VFbGVtZW50ID0gdGhpcy5fZWxlbWVudFxuXG4gICAgICBpZiAodGhpcy5fY29uZmlnLnJlZmVyZW5jZSA9PT0gJ3BhcmVudCcpIHtcbiAgICAgICAgcmVmZXJlbmNlRWxlbWVudCA9IHBhcmVudFxuICAgICAgfSBlbHNlIGlmIChVdGlsLmlzRWxlbWVudCh0aGlzLl9jb25maWcucmVmZXJlbmNlKSkge1xuICAgICAgICByZWZlcmVuY2VFbGVtZW50ID0gdGhpcy5fY29uZmlnLnJlZmVyZW5jZVxuXG4gICAgICAgIC8vIENoZWNrIGlmIGl0J3MgalF1ZXJ5IGVsZW1lbnRcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLl9jb25maWcucmVmZXJlbmNlLmpxdWVyeSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICByZWZlcmVuY2VFbGVtZW50ID0gdGhpcy5fY29uZmlnLnJlZmVyZW5jZVswXVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIElmIGJvdW5kYXJ5IGlzIG5vdCBgc2Nyb2xsUGFyZW50YCwgdGhlbiBzZXQgcG9zaXRpb24gdG8gYHN0YXRpY2BcbiAgICAgIC8vIHRvIGFsbG93IHRoZSBtZW51IHRvIFwiZXNjYXBlXCIgdGhlIHNjcm9sbCBwYXJlbnQncyBib3VuZGFyaWVzXG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvaXNzdWVzLzI0MjUxXG4gICAgICBpZiAodGhpcy5fY29uZmlnLmJvdW5kYXJ5ICE9PSAnc2Nyb2xsUGFyZW50Jykge1xuICAgICAgICAkKHBhcmVudCkuYWRkQ2xhc3MoQ2xhc3NOYW1lLlBPU0lUSU9OX1NUQVRJQylcbiAgICAgIH1cbiAgICAgIHRoaXMuX3BvcHBlciA9IG5ldyBQb3BwZXIocmVmZXJlbmNlRWxlbWVudCwgdGhpcy5fbWVudSwgdGhpcy5fZ2V0UG9wcGVyQ29uZmlnKCkpXG4gICAgfVxuXG4gICAgLy8gSWYgdGhpcyBpcyBhIHRvdWNoLWVuYWJsZWQgZGV2aWNlIHdlIGFkZCBleHRyYVxuICAgIC8vIGVtcHR5IG1vdXNlb3ZlciBsaXN0ZW5lcnMgdG8gdGhlIGJvZHkncyBpbW1lZGlhdGUgY2hpbGRyZW47XG4gICAgLy8gb25seSBuZWVkZWQgYmVjYXVzZSBvZiBicm9rZW4gZXZlbnQgZGVsZWdhdGlvbiBvbiBpT1NcbiAgICAvLyBodHRwczovL3d3dy5xdWlya3Ntb2RlLm9yZy9ibG9nL2FyY2hpdmVzLzIwMTQvMDIvbW91c2VfZXZlbnRfYnViLmh0bWxcbiAgICBpZiAoJ29udG91Y2hzdGFydCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICYmXG4gICAgICAgICQocGFyZW50KS5jbG9zZXN0KFNlbGVjdG9yLk5BVkJBUl9OQVYpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgJChkb2N1bWVudC5ib2R5KS5jaGlsZHJlbigpLm9uKCdtb3VzZW92ZXInLCBudWxsLCAkLm5vb3ApXG4gICAgfVxuXG4gICAgdGhpcy5fZWxlbWVudC5mb2N1cygpXG4gICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCB0cnVlKVxuXG4gICAgJCh0aGlzLl9tZW51KS50b2dnbGVDbGFzcyhDbGFzc05hbWUuU0hPVylcbiAgICAkKHBhcmVudClcbiAgICAgIC50b2dnbGVDbGFzcyhDbGFzc05hbWUuU0hPVylcbiAgICAgIC50cmlnZ2VyKCQuRXZlbnQoRXZlbnQuU0hPV04sIHJlbGF0ZWRUYXJnZXQpKVxuICB9XG5cbiAgc2hvdygpIHtcbiAgICBpZiAodGhpcy5fZWxlbWVudC5kaXNhYmxlZCB8fCAkKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5ESVNBQkxFRCkgfHwgJCh0aGlzLl9tZW51KS5oYXNDbGFzcyhDbGFzc05hbWUuU0hPVykpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IHJlbGF0ZWRUYXJnZXQgPSB7XG4gICAgICByZWxhdGVkVGFyZ2V0OiB0aGlzLl9lbGVtZW50XG4gICAgfVxuICAgIGNvbnN0IHNob3dFdmVudCA9ICQuRXZlbnQoRXZlbnQuU0hPVywgcmVsYXRlZFRhcmdldClcbiAgICBjb25zdCBwYXJlbnQgPSBEcm9wZG93bi5fZ2V0UGFyZW50RnJvbUVsZW1lbnQodGhpcy5fZWxlbWVudClcblxuICAgICQocGFyZW50KS50cmlnZ2VyKHNob3dFdmVudClcblxuICAgIGlmIChzaG93RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgICQodGhpcy5fbWVudSkudG9nZ2xlQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpXG4gICAgJChwYXJlbnQpXG4gICAgICAudG9nZ2xlQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpXG4gICAgICAudHJpZ2dlcigkLkV2ZW50KEV2ZW50LlNIT1dOLCByZWxhdGVkVGFyZ2V0KSlcbiAgfVxuXG4gIGhpZGUoKSB7XG4gICAgaWYgKHRoaXMuX2VsZW1lbnQuZGlzYWJsZWQgfHwgJCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuRElTQUJMRUQpIHx8ICEkKHRoaXMuX21lbnUpLmhhc0NsYXNzKENsYXNzTmFtZS5TSE9XKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgcmVsYXRlZFRhcmdldCA9IHtcbiAgICAgIHJlbGF0ZWRUYXJnZXQ6IHRoaXMuX2VsZW1lbnRcbiAgICB9XG4gICAgY29uc3QgaGlkZUV2ZW50ID0gJC5FdmVudChFdmVudC5ISURFLCByZWxhdGVkVGFyZ2V0KVxuICAgIGNvbnN0IHBhcmVudCA9IERyb3Bkb3duLl9nZXRQYXJlbnRGcm9tRWxlbWVudCh0aGlzLl9lbGVtZW50KVxuXG4gICAgJChwYXJlbnQpLnRyaWdnZXIoaGlkZUV2ZW50KVxuXG4gICAgaWYgKGhpZGVFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgJCh0aGlzLl9tZW51KS50b2dnbGVDbGFzcyhDbGFzc05hbWUuU0hPVylcbiAgICAkKHBhcmVudClcbiAgICAgIC50b2dnbGVDbGFzcyhDbGFzc05hbWUuU0hPVylcbiAgICAgIC50cmlnZ2VyKCQuRXZlbnQoRXZlbnQuSElEREVOLCByZWxhdGVkVGFyZ2V0KSlcbiAgfVxuXG4gIGRpc3Bvc2UoKSB7XG4gICAgJC5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsIERBVEFfS0VZKVxuICAgICQodGhpcy5fZWxlbWVudCkub2ZmKEVWRU5UX0tFWSlcbiAgICB0aGlzLl9lbGVtZW50ID0gbnVsbFxuICAgIHRoaXMuX21lbnUgPSBudWxsXG4gICAgaWYgKHRoaXMuX3BvcHBlciAhPT0gbnVsbCkge1xuICAgICAgdGhpcy5fcG9wcGVyLmRlc3Ryb3koKVxuICAgICAgdGhpcy5fcG9wcGVyID0gbnVsbFxuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZSgpIHtcbiAgICB0aGlzLl9pbk5hdmJhciA9IHRoaXMuX2RldGVjdE5hdmJhcigpXG4gICAgaWYgKHRoaXMuX3BvcHBlciAhPT0gbnVsbCkge1xuICAgICAgdGhpcy5fcG9wcGVyLnNjaGVkdWxlVXBkYXRlKClcbiAgICB9XG4gIH1cblxuICAvLyBQcml2YXRlXG5cbiAgX2FkZEV2ZW50TGlzdGVuZXJzKCkge1xuICAgICQodGhpcy5fZWxlbWVudCkub24oRXZlbnQuQ0xJQ0ssIChldmVudCkgPT4ge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcbiAgICAgIHRoaXMudG9nZ2xlKClcbiAgICB9KVxuICB9XG5cbiAgX2dldENvbmZpZyhjb25maWcpIHtcbiAgICBjb25maWcgPSB7XG4gICAgICAuLi50aGlzLmNvbnN0cnVjdG9yLkRlZmF1bHQsXG4gICAgICAuLi4kKHRoaXMuX2VsZW1lbnQpLmRhdGEoKSxcbiAgICAgIC4uLmNvbmZpZ1xuICAgIH1cblxuICAgIFV0aWwudHlwZUNoZWNrQ29uZmlnKFxuICAgICAgTkFNRSxcbiAgICAgIGNvbmZpZyxcbiAgICAgIHRoaXMuY29uc3RydWN0b3IuRGVmYXVsdFR5cGVcbiAgICApXG5cbiAgICByZXR1cm4gY29uZmlnXG4gIH1cblxuICBfZ2V0TWVudUVsZW1lbnQoKSB7XG4gICAgaWYgKCF0aGlzLl9tZW51KSB7XG4gICAgICBjb25zdCBwYXJlbnQgPSBEcm9wZG93bi5fZ2V0UGFyZW50RnJvbUVsZW1lbnQodGhpcy5fZWxlbWVudClcblxuICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICB0aGlzLl9tZW51ID0gcGFyZW50LnF1ZXJ5U2VsZWN0b3IoU2VsZWN0b3IuTUVOVSlcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX21lbnVcbiAgfVxuXG4gIF9nZXRQbGFjZW1lbnQoKSB7XG4gICAgY29uc3QgJHBhcmVudERyb3Bkb3duID0gJCh0aGlzLl9lbGVtZW50LnBhcmVudE5vZGUpXG4gICAgbGV0IHBsYWNlbWVudCA9IEF0dGFjaG1lbnRNYXAuQk9UVE9NXG5cbiAgICAvLyBIYW5kbGUgZHJvcHVwXG4gICAgaWYgKCRwYXJlbnREcm9wZG93bi5oYXNDbGFzcyhDbGFzc05hbWUuRFJPUFVQKSkge1xuICAgICAgcGxhY2VtZW50ID0gQXR0YWNobWVudE1hcC5UT1BcbiAgICAgIGlmICgkKHRoaXMuX21lbnUpLmhhc0NsYXNzKENsYXNzTmFtZS5NRU5VUklHSFQpKSB7XG4gICAgICAgIHBsYWNlbWVudCA9IEF0dGFjaG1lbnRNYXAuVE9QRU5EXG4gICAgICB9XG4gICAgfSBlbHNlIGlmICgkcGFyZW50RHJvcGRvd24uaGFzQ2xhc3MoQ2xhc3NOYW1lLkRST1BSSUdIVCkpIHtcbiAgICAgIHBsYWNlbWVudCA9IEF0dGFjaG1lbnRNYXAuUklHSFRcbiAgICB9IGVsc2UgaWYgKCRwYXJlbnREcm9wZG93bi5oYXNDbGFzcyhDbGFzc05hbWUuRFJPUExFRlQpKSB7XG4gICAgICBwbGFjZW1lbnQgPSBBdHRhY2htZW50TWFwLkxFRlRcbiAgICB9IGVsc2UgaWYgKCQodGhpcy5fbWVudSkuaGFzQ2xhc3MoQ2xhc3NOYW1lLk1FTlVSSUdIVCkpIHtcbiAgICAgIHBsYWNlbWVudCA9IEF0dGFjaG1lbnRNYXAuQk9UVE9NRU5EXG4gICAgfVxuICAgIHJldHVybiBwbGFjZW1lbnRcbiAgfVxuXG4gIF9kZXRlY3ROYXZiYXIoKSB7XG4gICAgcmV0dXJuICQodGhpcy5fZWxlbWVudCkuY2xvc2VzdCgnLm5hdmJhcicpLmxlbmd0aCA+IDBcbiAgfVxuXG4gIF9nZXRQb3BwZXJDb25maWcoKSB7XG4gICAgY29uc3Qgb2Zmc2V0Q29uZiA9IHt9XG4gICAgaWYgKHR5cGVvZiB0aGlzLl9jb25maWcub2Zmc2V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBvZmZzZXRDb25mLmZuID0gKGRhdGEpID0+IHtcbiAgICAgICAgZGF0YS5vZmZzZXRzID0ge1xuICAgICAgICAgIC4uLmRhdGEub2Zmc2V0cyxcbiAgICAgICAgICAuLi50aGlzLl9jb25maWcub2Zmc2V0KGRhdGEub2Zmc2V0cykgfHwge31cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGF0YVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBvZmZzZXRDb25mLm9mZnNldCA9IHRoaXMuX2NvbmZpZy5vZmZzZXRcbiAgICB9XG5cbiAgICBjb25zdCBwb3BwZXJDb25maWcgPSB7XG4gICAgICBwbGFjZW1lbnQ6IHRoaXMuX2dldFBsYWNlbWVudCgpLFxuICAgICAgbW9kaWZpZXJzOiB7XG4gICAgICAgIG9mZnNldDogb2Zmc2V0Q29uZixcbiAgICAgICAgZmxpcDoge1xuICAgICAgICAgIGVuYWJsZWQ6IHRoaXMuX2NvbmZpZy5mbGlwXG4gICAgICAgIH0sXG4gICAgICAgIHByZXZlbnRPdmVyZmxvdzoge1xuICAgICAgICAgIGJvdW5kYXJpZXNFbGVtZW50OiB0aGlzLl9jb25maWcuYm91bmRhcnlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIERpc2FibGUgUG9wcGVyLmpzIGlmIHdlIGhhdmUgYSBzdGF0aWMgZGlzcGxheVxuICAgIGlmICh0aGlzLl9jb25maWcuZGlzcGxheSA9PT0gJ3N0YXRpYycpIHtcbiAgICAgIHBvcHBlckNvbmZpZy5tb2RpZmllcnMuYXBwbHlTdHlsZSA9IHtcbiAgICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHBvcHBlckNvbmZpZ1xuICB9XG5cbiAgLy8gU3RhdGljXG5cbiAgc3RhdGljIF9qUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgZGF0YSA9ICQodGhpcykuZGF0YShEQVRBX0tFWSlcbiAgICAgIGNvbnN0IF9jb25maWcgPSB0eXBlb2YgY29uZmlnID09PSAnb2JqZWN0JyA/IGNvbmZpZyA6IG51bGxcblxuICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgIGRhdGEgPSBuZXcgRHJvcGRvd24odGhpcywgX2NvbmZpZylcbiAgICAgICAgJCh0aGlzKS5kYXRhKERBVEFfS0VZLCBkYXRhKVxuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBkYXRhW2NvbmZpZ10gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgTm8gbWV0aG9kIG5hbWVkIFwiJHtjb25maWd9XCJgKVxuICAgICAgICB9XG4gICAgICAgIGRhdGFbY29uZmlnXSgpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIHN0YXRpYyBfY2xlYXJNZW51cyhldmVudCkge1xuICAgIGlmIChldmVudCAmJiAoZXZlbnQud2hpY2ggPT09IFJJR0hUX01PVVNFX0JVVFRPTl9XSElDSCB8fFxuICAgICAgZXZlbnQudHlwZSA9PT0gJ2tleXVwJyAmJiBldmVudC53aGljaCAhPT0gVEFCX0tFWUNPREUpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCB0b2dnbGVzID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFNlbGVjdG9yLkRBVEFfVE9HR0xFKSlcblxuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSB0b2dnbGVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBjb25zdCBwYXJlbnQgPSBEcm9wZG93bi5fZ2V0UGFyZW50RnJvbUVsZW1lbnQodG9nZ2xlc1tpXSlcbiAgICAgIGNvbnN0IGNvbnRleHQgPSAkKHRvZ2dsZXNbaV0pLmRhdGEoREFUQV9LRVkpXG4gICAgICBjb25zdCByZWxhdGVkVGFyZ2V0ID0ge1xuICAgICAgICByZWxhdGVkVGFyZ2V0OiB0b2dnbGVzW2ldXG4gICAgICB9XG5cbiAgICAgIGlmIChldmVudCAmJiBldmVudC50eXBlID09PSAnY2xpY2snKSB7XG4gICAgICAgIHJlbGF0ZWRUYXJnZXQuY2xpY2tFdmVudCA9IGV2ZW50XG4gICAgICB9XG5cbiAgICAgIGlmICghY29udGV4dCkge1xuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICBjb25zdCBkcm9wZG93bk1lbnUgPSBjb250ZXh0Ll9tZW51XG4gICAgICBpZiAoISQocGFyZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuU0hPVykpIHtcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgaWYgKGV2ZW50ICYmIChldmVudC50eXBlID09PSAnY2xpY2snICYmXG4gICAgICAgICAgL2lucHV0fHRleHRhcmVhL2kudGVzdChldmVudC50YXJnZXQudGFnTmFtZSkgfHwgZXZlbnQudHlwZSA9PT0gJ2tleXVwJyAmJiBldmVudC53aGljaCA9PT0gVEFCX0tFWUNPREUpICYmXG4gICAgICAgICAgJC5jb250YWlucyhwYXJlbnQsIGV2ZW50LnRhcmdldCkpIHtcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgY29uc3QgaGlkZUV2ZW50ID0gJC5FdmVudChFdmVudC5ISURFLCByZWxhdGVkVGFyZ2V0KVxuICAgICAgJChwYXJlbnQpLnRyaWdnZXIoaGlkZUV2ZW50KVxuICAgICAgaWYgKGhpZGVFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyBJZiB0aGlzIGlzIGEgdG91Y2gtZW5hYmxlZCBkZXZpY2Ugd2UgcmVtb3ZlIHRoZSBleHRyYVxuICAgICAgLy8gZW1wdHkgbW91c2VvdmVyIGxpc3RlbmVycyB3ZSBhZGRlZCBmb3IgaU9TIHN1cHBvcnRcbiAgICAgIGlmICgnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgICAgJChkb2N1bWVudC5ib2R5KS5jaGlsZHJlbigpLm9mZignbW91c2VvdmVyJywgbnVsbCwgJC5ub29wKVxuICAgICAgfVxuXG4gICAgICB0b2dnbGVzW2ldLnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsICdmYWxzZScpXG5cbiAgICAgICQoZHJvcGRvd25NZW51KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuU0hPVylcbiAgICAgICQocGFyZW50KVxuICAgICAgICAucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpXG4gICAgICAgIC50cmlnZ2VyKCQuRXZlbnQoRXZlbnQuSElEREVOLCByZWxhdGVkVGFyZ2V0KSlcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgX2dldFBhcmVudEZyb21FbGVtZW50KGVsZW1lbnQpIHtcbiAgICBsZXQgcGFyZW50XG4gICAgY29uc3Qgc2VsZWN0b3IgPSBVdGlsLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQoZWxlbWVudClcblxuICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgcGFyZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3RvcilcbiAgICB9XG5cbiAgICByZXR1cm4gcGFyZW50IHx8IGVsZW1lbnQucGFyZW50Tm9kZVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbXBsZXhpdHlcbiAgc3RhdGljIF9kYXRhQXBpS2V5ZG93bkhhbmRsZXIoZXZlbnQpIHtcbiAgICAvLyBJZiBub3QgaW5wdXQvdGV4dGFyZWE6XG4gICAgLy8gIC0gQW5kIG5vdCBhIGtleSBpbiBSRUdFWFBfS0VZRE9XTiA9PiBub3QgYSBkcm9wZG93biBjb21tYW5kXG4gICAgLy8gSWYgaW5wdXQvdGV4dGFyZWE6XG4gICAgLy8gIC0gSWYgc3BhY2Uga2V5ID0+IG5vdCBhIGRyb3Bkb3duIGNvbW1hbmRcbiAgICAvLyAgLSBJZiBrZXkgaXMgb3RoZXIgdGhhbiBlc2NhcGVcbiAgICAvLyAgICAtIElmIGtleSBpcyBub3QgdXAgb3IgZG93biA9PiBub3QgYSBkcm9wZG93biBjb21tYW5kXG4gICAgLy8gICAgLSBJZiB0cmlnZ2VyIGluc2lkZSB0aGUgbWVudSA9PiBub3QgYSBkcm9wZG93biBjb21tYW5kXG4gICAgaWYgKC9pbnB1dHx0ZXh0YXJlYS9pLnRlc3QoZXZlbnQudGFyZ2V0LnRhZ05hbWUpXG4gICAgICA/IGV2ZW50LndoaWNoID09PSBTUEFDRV9LRVlDT0RFIHx8IGV2ZW50LndoaWNoICE9PSBFU0NBUEVfS0VZQ09ERSAmJlxuICAgICAgKGV2ZW50LndoaWNoICE9PSBBUlJPV19ET1dOX0tFWUNPREUgJiYgZXZlbnQud2hpY2ggIT09IEFSUk9XX1VQX0tFWUNPREUgfHxcbiAgICAgICAgJChldmVudC50YXJnZXQpLmNsb3Nlc3QoU2VsZWN0b3IuTUVOVSkubGVuZ3RoKSA6ICFSRUdFWFBfS0VZRE9XTi50ZXN0KGV2ZW50LndoaWNoKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpXG5cbiAgICBpZiAodGhpcy5kaXNhYmxlZCB8fCAkKHRoaXMpLmhhc0NsYXNzKENsYXNzTmFtZS5ESVNBQkxFRCkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IHBhcmVudCAgID0gRHJvcGRvd24uX2dldFBhcmVudEZyb21FbGVtZW50KHRoaXMpXG4gICAgY29uc3QgaXNBY3RpdmUgPSAkKHBhcmVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpXG5cbiAgICBpZiAoIWlzQWN0aXZlIHx8IGlzQWN0aXZlICYmIChldmVudC53aGljaCA9PT0gRVNDQVBFX0tFWUNPREUgfHwgZXZlbnQud2hpY2ggPT09IFNQQUNFX0tFWUNPREUpKSB7XG4gICAgICBpZiAoZXZlbnQud2hpY2ggPT09IEVTQ0FQRV9LRVlDT0RFKSB7XG4gICAgICAgIGNvbnN0IHRvZ2dsZSA9IHBhcmVudC5xdWVyeVNlbGVjdG9yKFNlbGVjdG9yLkRBVEFfVE9HR0xFKVxuICAgICAgICAkKHRvZ2dsZSkudHJpZ2dlcignZm9jdXMnKVxuICAgICAgfVxuXG4gICAgICAkKHRoaXMpLnRyaWdnZXIoJ2NsaWNrJylcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IGl0ZW1zID0gW10uc2xpY2UuY2FsbChwYXJlbnQucXVlcnlTZWxlY3RvckFsbChTZWxlY3Rvci5WSVNJQkxFX0lURU1TKSlcblxuICAgIGlmIChpdGVtcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGxldCBpbmRleCA9IGl0ZW1zLmluZGV4T2YoZXZlbnQudGFyZ2V0KVxuXG4gICAgaWYgKGV2ZW50LndoaWNoID09PSBBUlJPV19VUF9LRVlDT0RFICYmIGluZGV4ID4gMCkgeyAvLyBVcFxuICAgICAgaW5kZXgtLVxuICAgIH1cblxuICAgIGlmIChldmVudC53aGljaCA9PT0gQVJST1dfRE9XTl9LRVlDT0RFICYmIGluZGV4IDwgaXRlbXMubGVuZ3RoIC0gMSkgeyAvLyBEb3duXG4gICAgICBpbmRleCsrXG4gICAgfVxuXG4gICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgaW5kZXggPSAwXG4gICAgfVxuXG4gICAgaXRlbXNbaW5kZXhdLmZvY3VzKClcbiAgfVxufVxuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogRGF0YSBBcGkgaW1wbGVtZW50YXRpb25cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbiQoZG9jdW1lbnQpXG4gIC5vbihFdmVudC5LRVlET1dOX0RBVEFfQVBJLCBTZWxlY3Rvci5EQVRBX1RPR0dMRSwgRHJvcGRvd24uX2RhdGFBcGlLZXlkb3duSGFuZGxlcilcbiAgLm9uKEV2ZW50LktFWURPV05fREFUQV9BUEksIFNlbGVjdG9yLk1FTlUsIERyb3Bkb3duLl9kYXRhQXBpS2V5ZG93bkhhbmRsZXIpXG4gIC5vbihgJHtFdmVudC5DTElDS19EQVRBX0FQSX0gJHtFdmVudC5LRVlVUF9EQVRBX0FQSX1gLCBEcm9wZG93bi5fY2xlYXJNZW51cylcbiAgLm9uKEV2ZW50LkNMSUNLX0RBVEFfQVBJLCBTZWxlY3Rvci5EQVRBX1RPR0dMRSwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpXG4gICAgRHJvcGRvd24uX2pRdWVyeUludGVyZmFjZS5jYWxsKCQodGhpcyksICd0b2dnbGUnKVxuICB9KVxuICAub24oRXZlbnQuQ0xJQ0tfREFUQV9BUEksIFNlbGVjdG9yLkZPUk1fQ0hJTEQsIChlKSA9PiB7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKVxuICB9KVxuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogalF1ZXJ5XG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG4kLmZuW05BTUVdID0gRHJvcGRvd24uX2pRdWVyeUludGVyZmFjZVxuJC5mbltOQU1FXS5Db25zdHJ1Y3RvciA9IERyb3Bkb3duXG4kLmZuW05BTUVdLm5vQ29uZmxpY3QgPSAoKSA9PiB7XG4gICQuZm5bTkFNRV0gPSBKUVVFUllfTk9fQ09ORkxJQ1RcbiAgcmV0dXJuIERyb3Bkb3duLl9qUXVlcnlJbnRlcmZhY2Vcbn1cblxuXG5leHBvcnQgZGVmYXVsdCBEcm9wZG93blxuIiwiLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NC4yLjEpOiBtb2RhbC5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuaW1wb3J0ICQgZnJvbSAnanF1ZXJ5J1xuaW1wb3J0IFV0aWwgZnJvbSAnLi91dGlsJ1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29uc3RhbnRzXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jb25zdCBOQU1FICAgICAgICAgICAgICAgPSAnbW9kYWwnXG5jb25zdCBWRVJTSU9OICAgICAgICAgICAgPSAnNC4yLjEnXG5jb25zdCBEQVRBX0tFWSAgICAgICAgICAgPSAnYnMubW9kYWwnXG5jb25zdCBFVkVOVF9LRVkgICAgICAgICAgPSBgLiR7REFUQV9LRVl9YFxuY29uc3QgREFUQV9BUElfS0VZICAgICAgID0gJy5kYXRhLWFwaSdcbmNvbnN0IEpRVUVSWV9OT19DT05GTElDVCA9ICQuZm5bTkFNRV1cbmNvbnN0IEVTQ0FQRV9LRVlDT0RFICAgICA9IDI3IC8vIEtleWJvYXJkRXZlbnQud2hpY2ggdmFsdWUgZm9yIEVzY2FwZSAoRXNjKSBrZXlcblxuY29uc3QgRGVmYXVsdCA9IHtcbiAgYmFja2Ryb3AgOiB0cnVlLFxuICBrZXlib2FyZCA6IHRydWUsXG4gIGZvY3VzICAgIDogdHJ1ZSxcbiAgc2hvdyAgICAgOiB0cnVlXG59XG5cbmNvbnN0IERlZmF1bHRUeXBlID0ge1xuICBiYWNrZHJvcCA6ICcoYm9vbGVhbnxzdHJpbmcpJyxcbiAga2V5Ym9hcmQgOiAnYm9vbGVhbicsXG4gIGZvY3VzICAgIDogJ2Jvb2xlYW4nLFxuICBzaG93ICAgICA6ICdib29sZWFuJ1xufVxuXG5jb25zdCBFdmVudCA9IHtcbiAgSElERSAgICAgICAgICAgICAgOiBgaGlkZSR7RVZFTlRfS0VZfWAsXG4gIEhJRERFTiAgICAgICAgICAgIDogYGhpZGRlbiR7RVZFTlRfS0VZfWAsXG4gIFNIT1cgICAgICAgICAgICAgIDogYHNob3cke0VWRU5UX0tFWX1gLFxuICBTSE9XTiAgICAgICAgICAgICA6IGBzaG93biR7RVZFTlRfS0VZfWAsXG4gIEZPQ1VTSU4gICAgICAgICAgIDogYGZvY3VzaW4ke0VWRU5UX0tFWX1gLFxuICBSRVNJWkUgICAgICAgICAgICA6IGByZXNpemUke0VWRU5UX0tFWX1gLFxuICBDTElDS19ESVNNSVNTICAgICA6IGBjbGljay5kaXNtaXNzJHtFVkVOVF9LRVl9YCxcbiAgS0VZRE9XTl9ESVNNSVNTICAgOiBga2V5ZG93bi5kaXNtaXNzJHtFVkVOVF9LRVl9YCxcbiAgTU9VU0VVUF9ESVNNSVNTICAgOiBgbW91c2V1cC5kaXNtaXNzJHtFVkVOVF9LRVl9YCxcbiAgTU9VU0VET1dOX0RJU01JU1MgOiBgbW91c2Vkb3duLmRpc21pc3Mke0VWRU5UX0tFWX1gLFxuICBDTElDS19EQVRBX0FQSSAgICA6IGBjbGljayR7RVZFTlRfS0VZfSR7REFUQV9BUElfS0VZfWBcbn1cblxuY29uc3QgQ2xhc3NOYW1lID0ge1xuICBTQ1JPTExCQVJfTUVBU1VSRVIgOiAnbW9kYWwtc2Nyb2xsYmFyLW1lYXN1cmUnLFxuICBCQUNLRFJPUCAgICAgICAgICAgOiAnbW9kYWwtYmFja2Ryb3AnLFxuICBPUEVOICAgICAgICAgICAgICAgOiAnbW9kYWwtb3BlbicsXG4gIEZBREUgICAgICAgICAgICAgICA6ICdmYWRlJyxcbiAgU0hPVyAgICAgICAgICAgICAgIDogJ3Nob3cnXG59XG5cbmNvbnN0IFNlbGVjdG9yID0ge1xuICBESUFMT0cgICAgICAgICA6ICcubW9kYWwtZGlhbG9nJyxcbiAgREFUQV9UT0dHTEUgICAgOiAnW2RhdGEtdG9nZ2xlPVwibW9kYWxcIl0nLFxuICBEQVRBX0RJU01JU1MgICA6ICdbZGF0YS1kaXNtaXNzPVwibW9kYWxcIl0nLFxuICBGSVhFRF9DT05URU5UICA6ICcuZml4ZWQtdG9wLCAuZml4ZWQtYm90dG9tLCAuaXMtZml4ZWQsIC5zdGlja3ktdG9wJyxcbiAgU1RJQ0tZX0NPTlRFTlQgOiAnLnN0aWNreS10b3AnXG59XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDbGFzcyBEZWZpbml0aW9uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jbGFzcyBNb2RhbCB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIGNvbmZpZykge1xuICAgIHRoaXMuX2NvbmZpZyAgICAgICAgICAgICAgPSB0aGlzLl9nZXRDb25maWcoY29uZmlnKVxuICAgIHRoaXMuX2VsZW1lbnQgICAgICAgICAgICAgPSBlbGVtZW50XG4gICAgdGhpcy5fZGlhbG9nICAgICAgICAgICAgICA9IGVsZW1lbnQucXVlcnlTZWxlY3RvcihTZWxlY3Rvci5ESUFMT0cpXG4gICAgdGhpcy5fYmFja2Ryb3AgICAgICAgICAgICA9IG51bGxcbiAgICB0aGlzLl9pc1Nob3duICAgICAgICAgICAgID0gZmFsc2VcbiAgICB0aGlzLl9pc0JvZHlPdmVyZmxvd2luZyAgID0gZmFsc2VcbiAgICB0aGlzLl9pZ25vcmVCYWNrZHJvcENsaWNrID0gZmFsc2VcbiAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgICAgID0gZmFsc2VcbiAgICB0aGlzLl9zY3JvbGxiYXJXaWR0aCAgICAgID0gMFxuICB9XG5cbiAgLy8gR2V0dGVyc1xuXG4gIHN0YXRpYyBnZXQgVkVSU0lPTigpIHtcbiAgICByZXR1cm4gVkVSU0lPTlxuICB9XG5cbiAgc3RhdGljIGdldCBEZWZhdWx0KCkge1xuICAgIHJldHVybiBEZWZhdWx0XG4gIH1cblxuICAvLyBQdWJsaWNcblxuICB0b2dnbGUocmVsYXRlZFRhcmdldCkge1xuICAgIHJldHVybiB0aGlzLl9pc1Nob3duID8gdGhpcy5oaWRlKCkgOiB0aGlzLnNob3cocmVsYXRlZFRhcmdldClcbiAgfVxuXG4gIHNob3cocmVsYXRlZFRhcmdldCkge1xuICAgIGlmICh0aGlzLl9pc1Nob3duIHx8IHRoaXMuX2lzVHJhbnNpdGlvbmluZykge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKCQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkZBREUpKSB7XG4gICAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSB0cnVlXG4gICAgfVxuXG4gICAgY29uc3Qgc2hvd0V2ZW50ID0gJC5FdmVudChFdmVudC5TSE9XLCB7XG4gICAgICByZWxhdGVkVGFyZ2V0XG4gICAgfSlcblxuICAgICQodGhpcy5fZWxlbWVudCkudHJpZ2dlcihzaG93RXZlbnQpXG5cbiAgICBpZiAodGhpcy5faXNTaG93biB8fCBzaG93RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHRoaXMuX2lzU2hvd24gPSB0cnVlXG5cbiAgICB0aGlzLl9jaGVja1Njcm9sbGJhcigpXG4gICAgdGhpcy5fc2V0U2Nyb2xsYmFyKClcblxuICAgIHRoaXMuX2FkanVzdERpYWxvZygpXG5cbiAgICB0aGlzLl9zZXRFc2NhcGVFdmVudCgpXG4gICAgdGhpcy5fc2V0UmVzaXplRXZlbnQoKVxuXG4gICAgJCh0aGlzLl9lbGVtZW50KS5vbihcbiAgICAgIEV2ZW50LkNMSUNLX0RJU01JU1MsXG4gICAgICBTZWxlY3Rvci5EQVRBX0RJU01JU1MsXG4gICAgICAoZXZlbnQpID0+IHRoaXMuaGlkZShldmVudClcbiAgICApXG5cbiAgICAkKHRoaXMuX2RpYWxvZykub24oRXZlbnQuTU9VU0VET1dOX0RJU01JU1MsICgpID0+IHtcbiAgICAgICQodGhpcy5fZWxlbWVudCkub25lKEV2ZW50Lk1PVVNFVVBfRElTTUlTUywgKGV2ZW50KSA9PiB7XG4gICAgICAgIGlmICgkKGV2ZW50LnRhcmdldCkuaXModGhpcy5fZWxlbWVudCkpIHtcbiAgICAgICAgICB0aGlzLl9pZ25vcmVCYWNrZHJvcENsaWNrID0gdHJ1ZVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0pXG5cbiAgICB0aGlzLl9zaG93QmFja2Ryb3AoKCkgPT4gdGhpcy5fc2hvd0VsZW1lbnQocmVsYXRlZFRhcmdldCkpXG4gIH1cblxuICBoaWRlKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50KSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLl9pc1Nob3duIHx8IHRoaXMuX2lzVHJhbnNpdGlvbmluZykge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgaGlkZUV2ZW50ID0gJC5FdmVudChFdmVudC5ISURFKVxuXG4gICAgJCh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKGhpZGVFdmVudClcblxuICAgIGlmICghdGhpcy5faXNTaG93biB8fCBoaWRlRXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHRoaXMuX2lzU2hvd24gPSBmYWxzZVxuICAgIGNvbnN0IHRyYW5zaXRpb24gPSAkKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5GQURFKVxuXG4gICAgaWYgKHRyYW5zaXRpb24pIHtcbiAgICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IHRydWVcbiAgICB9XG5cbiAgICB0aGlzLl9zZXRFc2NhcGVFdmVudCgpXG4gICAgdGhpcy5fc2V0UmVzaXplRXZlbnQoKVxuXG4gICAgJChkb2N1bWVudCkub2ZmKEV2ZW50LkZPQ1VTSU4pXG5cbiAgICAkKHRoaXMuX2VsZW1lbnQpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5TSE9XKVxuXG4gICAgJCh0aGlzLl9lbGVtZW50KS5vZmYoRXZlbnQuQ0xJQ0tfRElTTUlTUylcbiAgICAkKHRoaXMuX2RpYWxvZykub2ZmKEV2ZW50Lk1PVVNFRE9XTl9ESVNNSVNTKVxuXG5cbiAgICBpZiAodHJhbnNpdGlvbikge1xuICAgICAgY29uc3QgdHJhbnNpdGlvbkR1cmF0aW9uICA9IFV0aWwuZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQodGhpcy5fZWxlbWVudClcblxuICAgICAgJCh0aGlzLl9lbGVtZW50KVxuICAgICAgICAub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIChldmVudCkgPT4gdGhpcy5faGlkZU1vZGFsKGV2ZW50KSlcbiAgICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKHRyYW5zaXRpb25EdXJhdGlvbilcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5faGlkZU1vZGFsKClcbiAgICB9XG4gIH1cblxuICBkaXNwb3NlKCkge1xuICAgIFt3aW5kb3csIHRoaXMuX2VsZW1lbnQsIHRoaXMuX2RpYWxvZ11cbiAgICAgIC5mb3JFYWNoKChodG1sRWxlbWVudCkgPT4gJChodG1sRWxlbWVudCkub2ZmKEVWRU5UX0tFWSkpXG5cbiAgICAvKipcbiAgICAgKiBgZG9jdW1lbnRgIGhhcyAyIGV2ZW50cyBgRXZlbnQuRk9DVVNJTmAgYW5kIGBFdmVudC5DTElDS19EQVRBX0FQSWBcbiAgICAgKiBEbyBub3QgbW92ZSBgZG9jdW1lbnRgIGluIGBodG1sRWxlbWVudHNgIGFycmF5XG4gICAgICogSXQgd2lsbCByZW1vdmUgYEV2ZW50LkNMSUNLX0RBVEFfQVBJYCBldmVudCB0aGF0IHNob3VsZCByZW1haW5cbiAgICAgKi9cbiAgICAkKGRvY3VtZW50KS5vZmYoRXZlbnQuRk9DVVNJTilcblxuICAgICQucmVtb3ZlRGF0YSh0aGlzLl9lbGVtZW50LCBEQVRBX0tFWSlcblxuICAgIHRoaXMuX2NvbmZpZyAgICAgICAgICAgICAgPSBudWxsXG4gICAgdGhpcy5fZWxlbWVudCAgICAgICAgICAgICA9IG51bGxcbiAgICB0aGlzLl9kaWFsb2cgICAgICAgICAgICAgID0gbnVsbFxuICAgIHRoaXMuX2JhY2tkcm9wICAgICAgICAgICAgPSBudWxsXG4gICAgdGhpcy5faXNTaG93biAgICAgICAgICAgICA9IG51bGxcbiAgICB0aGlzLl9pc0JvZHlPdmVyZmxvd2luZyAgID0gbnVsbFxuICAgIHRoaXMuX2lnbm9yZUJhY2tkcm9wQ2xpY2sgPSBudWxsXG4gICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nICAgICA9IG51bGxcbiAgICB0aGlzLl9zY3JvbGxiYXJXaWR0aCAgICAgID0gbnVsbFxuICB9XG5cbiAgaGFuZGxlVXBkYXRlKCkge1xuICAgIHRoaXMuX2FkanVzdERpYWxvZygpXG4gIH1cblxuICAvLyBQcml2YXRlXG5cbiAgX2dldENvbmZpZyhjb25maWcpIHtcbiAgICBjb25maWcgPSB7XG4gICAgICAuLi5EZWZhdWx0LFxuICAgICAgLi4uY29uZmlnXG4gICAgfVxuICAgIFV0aWwudHlwZUNoZWNrQ29uZmlnKE5BTUUsIGNvbmZpZywgRGVmYXVsdFR5cGUpXG4gICAgcmV0dXJuIGNvbmZpZ1xuICB9XG5cbiAgX3Nob3dFbGVtZW50KHJlbGF0ZWRUYXJnZXQpIHtcbiAgICBjb25zdCB0cmFuc2l0aW9uID0gJCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuRkFERSlcblxuICAgIGlmICghdGhpcy5fZWxlbWVudC5wYXJlbnROb2RlIHx8XG4gICAgICAgIHRoaXMuX2VsZW1lbnQucGFyZW50Tm9kZS5ub2RlVHlwZSAhPT0gTm9kZS5FTEVNRU5UX05PREUpIHtcbiAgICAgIC8vIERvbid0IG1vdmUgbW9kYWwncyBET00gcG9zaXRpb25cbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5fZWxlbWVudClcbiAgICB9XG5cbiAgICB0aGlzLl9lbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snXG4gICAgdGhpcy5fZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJylcbiAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1tb2RhbCcsIHRydWUpXG4gICAgdGhpcy5fZWxlbWVudC5zY3JvbGxUb3AgPSAwXG5cbiAgICBpZiAodHJhbnNpdGlvbikge1xuICAgICAgVXRpbC5yZWZsb3codGhpcy5fZWxlbWVudClcbiAgICB9XG5cbiAgICAkKHRoaXMuX2VsZW1lbnQpLmFkZENsYXNzKENsYXNzTmFtZS5TSE9XKVxuXG4gICAgaWYgKHRoaXMuX2NvbmZpZy5mb2N1cykge1xuICAgICAgdGhpcy5fZW5mb3JjZUZvY3VzKClcbiAgICB9XG5cbiAgICBjb25zdCBzaG93bkV2ZW50ID0gJC5FdmVudChFdmVudC5TSE9XTiwge1xuICAgICAgcmVsYXRlZFRhcmdldFxuICAgIH0pXG5cbiAgICBjb25zdCB0cmFuc2l0aW9uQ29tcGxldGUgPSAoKSA9PiB7XG4gICAgICBpZiAodGhpcy5fY29uZmlnLmZvY3VzKSB7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQuZm9jdXMoKVxuICAgICAgfVxuICAgICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gZmFsc2VcbiAgICAgICQodGhpcy5fZWxlbWVudCkudHJpZ2dlcihzaG93bkV2ZW50KVxuICAgIH1cblxuICAgIGlmICh0cmFuc2l0aW9uKSB7XG4gICAgICBjb25zdCB0cmFuc2l0aW9uRHVyYXRpb24gID0gVXRpbC5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCh0aGlzLl9kaWFsb2cpXG5cbiAgICAgICQodGhpcy5fZGlhbG9nKVxuICAgICAgICAub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIHRyYW5zaXRpb25Db21wbGV0ZSlcbiAgICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKHRyYW5zaXRpb25EdXJhdGlvbilcbiAgICB9IGVsc2Uge1xuICAgICAgdHJhbnNpdGlvbkNvbXBsZXRlKClcbiAgICB9XG4gIH1cblxuICBfZW5mb3JjZUZvY3VzKCkge1xuICAgICQoZG9jdW1lbnQpXG4gICAgICAub2ZmKEV2ZW50LkZPQ1VTSU4pIC8vIEd1YXJkIGFnYWluc3QgaW5maW5pdGUgZm9jdXMgbG9vcFxuICAgICAgLm9uKEV2ZW50LkZPQ1VTSU4sIChldmVudCkgPT4ge1xuICAgICAgICBpZiAoZG9jdW1lbnQgIT09IGV2ZW50LnRhcmdldCAmJlxuICAgICAgICAgICAgdGhpcy5fZWxlbWVudCAhPT0gZXZlbnQudGFyZ2V0ICYmXG4gICAgICAgICAgICAkKHRoaXMuX2VsZW1lbnQpLmhhcyhldmVudC50YXJnZXQpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHRoaXMuX2VsZW1lbnQuZm9jdXMoKVxuICAgICAgICB9XG4gICAgICB9KVxuICB9XG5cbiAgX3NldEVzY2FwZUV2ZW50KCkge1xuICAgIGlmICh0aGlzLl9pc1Nob3duICYmIHRoaXMuX2NvbmZpZy5rZXlib2FyZCkge1xuICAgICAgJCh0aGlzLl9lbGVtZW50KS5vbihFdmVudC5LRVlET1dOX0RJU01JU1MsIChldmVudCkgPT4ge1xuICAgICAgICBpZiAoZXZlbnQud2hpY2ggPT09IEVTQ0FQRV9LRVlDT0RFKSB7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgICAgIHRoaXMuaGlkZSgpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSBlbHNlIGlmICghdGhpcy5faXNTaG93bikge1xuICAgICAgJCh0aGlzLl9lbGVtZW50KS5vZmYoRXZlbnQuS0VZRE9XTl9ESVNNSVNTKVxuICAgIH1cbiAgfVxuXG4gIF9zZXRSZXNpemVFdmVudCgpIHtcbiAgICBpZiAodGhpcy5faXNTaG93bikge1xuICAgICAgJCh3aW5kb3cpLm9uKEV2ZW50LlJFU0laRSwgKGV2ZW50KSA9PiB0aGlzLmhhbmRsZVVwZGF0ZShldmVudCkpXG4gICAgfSBlbHNlIHtcbiAgICAgICQod2luZG93KS5vZmYoRXZlbnQuUkVTSVpFKVxuICAgIH1cbiAgfVxuXG4gIF9oaWRlTW9kYWwoKSB7XG4gICAgdGhpcy5fZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnXG4gICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgdHJ1ZSlcbiAgICB0aGlzLl9lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1tb2RhbCcpXG4gICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gZmFsc2VcbiAgICB0aGlzLl9zaG93QmFja2Ryb3AoKCkgPT4ge1xuICAgICAgJChkb2N1bWVudC5ib2R5KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuT1BFTilcbiAgICAgIHRoaXMuX3Jlc2V0QWRqdXN0bWVudHMoKVxuICAgICAgdGhpcy5fcmVzZXRTY3JvbGxiYXIoKVxuICAgICAgJCh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKEV2ZW50LkhJRERFTilcbiAgICB9KVxuICB9XG5cbiAgX3JlbW92ZUJhY2tkcm9wKCkge1xuICAgIGlmICh0aGlzLl9iYWNrZHJvcCkge1xuICAgICAgJCh0aGlzLl9iYWNrZHJvcCkucmVtb3ZlKClcbiAgICAgIHRoaXMuX2JhY2tkcm9wID0gbnVsbFxuICAgIH1cbiAgfVxuXG4gIF9zaG93QmFja2Ryb3AoY2FsbGJhY2spIHtcbiAgICBjb25zdCBhbmltYXRlID0gJCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuRkFERSlcbiAgICAgID8gQ2xhc3NOYW1lLkZBREUgOiAnJ1xuXG4gICAgaWYgKHRoaXMuX2lzU2hvd24gJiYgdGhpcy5fY29uZmlnLmJhY2tkcm9wKSB7XG4gICAgICB0aGlzLl9iYWNrZHJvcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgICB0aGlzLl9iYWNrZHJvcC5jbGFzc05hbWUgPSBDbGFzc05hbWUuQkFDS0RST1BcblxuICAgICAgaWYgKGFuaW1hdGUpIHtcbiAgICAgICAgdGhpcy5fYmFja2Ryb3AuY2xhc3NMaXN0LmFkZChhbmltYXRlKVxuICAgICAgfVxuXG4gICAgICAkKHRoaXMuX2JhY2tkcm9wKS5hcHBlbmRUbyhkb2N1bWVudC5ib2R5KVxuXG4gICAgICAkKHRoaXMuX2VsZW1lbnQpLm9uKEV2ZW50LkNMSUNLX0RJU01JU1MsIChldmVudCkgPT4ge1xuICAgICAgICBpZiAodGhpcy5faWdub3JlQmFja2Ryb3BDbGljaykge1xuICAgICAgICAgIHRoaXMuX2lnbm9yZUJhY2tkcm9wQ2xpY2sgPSBmYWxzZVxuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIGlmIChldmVudC50YXJnZXQgIT09IGV2ZW50LmN1cnJlbnRUYXJnZXQpIHtcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fY29uZmlnLmJhY2tkcm9wID09PSAnc3RhdGljJykge1xuICAgICAgICAgIHRoaXMuX2VsZW1lbnQuZm9jdXMoKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuaGlkZSgpXG4gICAgICAgIH1cbiAgICAgIH0pXG5cbiAgICAgIGlmIChhbmltYXRlKSB7XG4gICAgICAgIFV0aWwucmVmbG93KHRoaXMuX2JhY2tkcm9wKVxuICAgICAgfVxuXG4gICAgICAkKHRoaXMuX2JhY2tkcm9wKS5hZGRDbGFzcyhDbGFzc05hbWUuU0hPVylcblxuICAgICAgaWYgKCFjYWxsYmFjaykge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgaWYgKCFhbmltYXRlKSB7XG4gICAgICAgIGNhbGxiYWNrKClcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGJhY2tkcm9wVHJhbnNpdGlvbkR1cmF0aW9uID0gVXRpbC5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCh0aGlzLl9iYWNrZHJvcClcblxuICAgICAgJCh0aGlzLl9iYWNrZHJvcClcbiAgICAgICAgLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBjYWxsYmFjaylcbiAgICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKGJhY2tkcm9wVHJhbnNpdGlvbkR1cmF0aW9uKVxuICAgIH0gZWxzZSBpZiAoIXRoaXMuX2lzU2hvd24gJiYgdGhpcy5fYmFja2Ryb3ApIHtcbiAgICAgICQodGhpcy5fYmFja2Ryb3ApLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5TSE9XKVxuXG4gICAgICBjb25zdCBjYWxsYmFja1JlbW92ZSA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5fcmVtb3ZlQmFja2Ryb3AoKVxuICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICBjYWxsYmFjaygpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkZBREUpKSB7XG4gICAgICAgIGNvbnN0IGJhY2tkcm9wVHJhbnNpdGlvbkR1cmF0aW9uID0gVXRpbC5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCh0aGlzLl9iYWNrZHJvcClcblxuICAgICAgICAkKHRoaXMuX2JhY2tkcm9wKVxuICAgICAgICAgIC5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgY2FsbGJhY2tSZW1vdmUpXG4gICAgICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKGJhY2tkcm9wVHJhbnNpdGlvbkR1cmF0aW9uKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FsbGJhY2tSZW1vdmUoKVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoY2FsbGJhY2spIHtcbiAgICAgIGNhbGxiYWNrKClcbiAgICB9XG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHRoZSBmb2xsb3dpbmcgbWV0aG9kcyBhcmUgdXNlZCB0byBoYW5kbGUgb3ZlcmZsb3dpbmcgbW9kYWxzXG4gIC8vIHRvZG8gKGZhdCk6IHRoZXNlIHNob3VsZCBwcm9iYWJseSBiZSByZWZhY3RvcmVkIG91dCBvZiBtb2RhbC5qc1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgX2FkanVzdERpYWxvZygpIHtcbiAgICBjb25zdCBpc01vZGFsT3ZlcmZsb3dpbmcgPVxuICAgICAgdGhpcy5fZWxlbWVudC5zY3JvbGxIZWlnaHQgPiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0XG5cbiAgICBpZiAoIXRoaXMuX2lzQm9keU92ZXJmbG93aW5nICYmIGlzTW9kYWxPdmVyZmxvd2luZykge1xuICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS5wYWRkaW5nTGVmdCA9IGAke3RoaXMuX3Njcm9sbGJhcldpZHRofXB4YFxuICAgIH1cblxuICAgIGlmICh0aGlzLl9pc0JvZHlPdmVyZmxvd2luZyAmJiAhaXNNb2RhbE92ZXJmbG93aW5nKSB7XG4gICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLnBhZGRpbmdSaWdodCA9IGAke3RoaXMuX3Njcm9sbGJhcldpZHRofXB4YFxuICAgIH1cbiAgfVxuXG4gIF9yZXNldEFkanVzdG1lbnRzKCkge1xuICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUucGFkZGluZ0xlZnQgPSAnJ1xuICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUucGFkZGluZ1JpZ2h0ID0gJydcbiAgfVxuXG4gIF9jaGVja1Njcm9sbGJhcigpIHtcbiAgICBjb25zdCByZWN0ID0gZG9jdW1lbnQuYm9keS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICAgIHRoaXMuX2lzQm9keU92ZXJmbG93aW5nID0gcmVjdC5sZWZ0ICsgcmVjdC5yaWdodCA8IHdpbmRvdy5pbm5lcldpZHRoXG4gICAgdGhpcy5fc2Nyb2xsYmFyV2lkdGggPSB0aGlzLl9nZXRTY3JvbGxiYXJXaWR0aCgpXG4gIH1cblxuICBfc2V0U2Nyb2xsYmFyKCkge1xuICAgIGlmICh0aGlzLl9pc0JvZHlPdmVyZmxvd2luZykge1xuICAgICAgLy8gTm90ZTogRE9NTm9kZS5zdHlsZS5wYWRkaW5nUmlnaHQgcmV0dXJucyB0aGUgYWN0dWFsIHZhbHVlIG9yICcnIGlmIG5vdCBzZXRcbiAgICAgIC8vICAgd2hpbGUgJChET01Ob2RlKS5jc3MoJ3BhZGRpbmctcmlnaHQnKSByZXR1cm5zIHRoZSBjYWxjdWxhdGVkIHZhbHVlIG9yIDAgaWYgbm90IHNldFxuICAgICAgY29uc3QgZml4ZWRDb250ZW50ID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFNlbGVjdG9yLkZJWEVEX0NPTlRFTlQpKVxuICAgICAgY29uc3Qgc3RpY2t5Q29udGVudCA9IFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChTZWxlY3Rvci5TVElDS1lfQ09OVEVOVCkpXG5cbiAgICAgIC8vIEFkanVzdCBmaXhlZCBjb250ZW50IHBhZGRpbmdcbiAgICAgICQoZml4ZWRDb250ZW50KS5lYWNoKChpbmRleCwgZWxlbWVudCkgPT4ge1xuICAgICAgICBjb25zdCBhY3R1YWxQYWRkaW5nID0gZWxlbWVudC5zdHlsZS5wYWRkaW5nUmlnaHRcbiAgICAgICAgY29uc3QgY2FsY3VsYXRlZFBhZGRpbmcgPSAkKGVsZW1lbnQpLmNzcygncGFkZGluZy1yaWdodCcpXG4gICAgICAgICQoZWxlbWVudClcbiAgICAgICAgICAuZGF0YSgncGFkZGluZy1yaWdodCcsIGFjdHVhbFBhZGRpbmcpXG4gICAgICAgICAgLmNzcygncGFkZGluZy1yaWdodCcsIGAke3BhcnNlRmxvYXQoY2FsY3VsYXRlZFBhZGRpbmcpICsgdGhpcy5fc2Nyb2xsYmFyV2lkdGh9cHhgKVxuICAgICAgfSlcblxuICAgICAgLy8gQWRqdXN0IHN0aWNreSBjb250ZW50IG1hcmdpblxuICAgICAgJChzdGlja3lDb250ZW50KS5lYWNoKChpbmRleCwgZWxlbWVudCkgPT4ge1xuICAgICAgICBjb25zdCBhY3R1YWxNYXJnaW4gPSBlbGVtZW50LnN0eWxlLm1hcmdpblJpZ2h0XG4gICAgICAgIGNvbnN0IGNhbGN1bGF0ZWRNYXJnaW4gPSAkKGVsZW1lbnQpLmNzcygnbWFyZ2luLXJpZ2h0JylcbiAgICAgICAgJChlbGVtZW50KVxuICAgICAgICAgIC5kYXRhKCdtYXJnaW4tcmlnaHQnLCBhY3R1YWxNYXJnaW4pXG4gICAgICAgICAgLmNzcygnbWFyZ2luLXJpZ2h0JywgYCR7cGFyc2VGbG9hdChjYWxjdWxhdGVkTWFyZ2luKSAtIHRoaXMuX3Njcm9sbGJhcldpZHRofXB4YClcbiAgICAgIH0pXG5cbiAgICAgIC8vIEFkanVzdCBib2R5IHBhZGRpbmdcbiAgICAgIGNvbnN0IGFjdHVhbFBhZGRpbmcgPSBkb2N1bWVudC5ib2R5LnN0eWxlLnBhZGRpbmdSaWdodFxuICAgICAgY29uc3QgY2FsY3VsYXRlZFBhZGRpbmcgPSAkKGRvY3VtZW50LmJvZHkpLmNzcygncGFkZGluZy1yaWdodCcpXG4gICAgICAkKGRvY3VtZW50LmJvZHkpXG4gICAgICAgIC5kYXRhKCdwYWRkaW5nLXJpZ2h0JywgYWN0dWFsUGFkZGluZylcbiAgICAgICAgLmNzcygncGFkZGluZy1yaWdodCcsIGAke3BhcnNlRmxvYXQoY2FsY3VsYXRlZFBhZGRpbmcpICsgdGhpcy5fc2Nyb2xsYmFyV2lkdGh9cHhgKVxuICAgIH1cblxuICAgICQoZG9jdW1lbnQuYm9keSkuYWRkQ2xhc3MoQ2xhc3NOYW1lLk9QRU4pXG4gIH1cblxuICBfcmVzZXRTY3JvbGxiYXIoKSB7XG4gICAgLy8gUmVzdG9yZSBmaXhlZCBjb250ZW50IHBhZGRpbmdcbiAgICBjb25zdCBmaXhlZENvbnRlbnQgPSBbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoU2VsZWN0b3IuRklYRURfQ09OVEVOVCkpXG4gICAgJChmaXhlZENvbnRlbnQpLmVhY2goKGluZGV4LCBlbGVtZW50KSA9PiB7XG4gICAgICBjb25zdCBwYWRkaW5nID0gJChlbGVtZW50KS5kYXRhKCdwYWRkaW5nLXJpZ2h0JylcbiAgICAgICQoZWxlbWVudCkucmVtb3ZlRGF0YSgncGFkZGluZy1yaWdodCcpXG4gICAgICBlbGVtZW50LnN0eWxlLnBhZGRpbmdSaWdodCA9IHBhZGRpbmcgPyBwYWRkaW5nIDogJydcbiAgICB9KVxuXG4gICAgLy8gUmVzdG9yZSBzdGlja3kgY29udGVudFxuICAgIGNvbnN0IGVsZW1lbnRzID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGAke1NlbGVjdG9yLlNUSUNLWV9DT05URU5UfWApKVxuICAgICQoZWxlbWVudHMpLmVhY2goKGluZGV4LCBlbGVtZW50KSA9PiB7XG4gICAgICBjb25zdCBtYXJnaW4gPSAkKGVsZW1lbnQpLmRhdGEoJ21hcmdpbi1yaWdodCcpXG4gICAgICBpZiAodHlwZW9mIG1hcmdpbiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgJChlbGVtZW50KS5jc3MoJ21hcmdpbi1yaWdodCcsIG1hcmdpbikucmVtb3ZlRGF0YSgnbWFyZ2luLXJpZ2h0JylcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgLy8gUmVzdG9yZSBib2R5IHBhZGRpbmdcbiAgICBjb25zdCBwYWRkaW5nID0gJChkb2N1bWVudC5ib2R5KS5kYXRhKCdwYWRkaW5nLXJpZ2h0JylcbiAgICAkKGRvY3VtZW50LmJvZHkpLnJlbW92ZURhdGEoJ3BhZGRpbmctcmlnaHQnKVxuICAgIGRvY3VtZW50LmJvZHkuc3R5bGUucGFkZGluZ1JpZ2h0ID0gcGFkZGluZyA/IHBhZGRpbmcgOiAnJ1xuICB9XG5cbiAgX2dldFNjcm9sbGJhcldpZHRoKCkgeyAvLyB0aHggZC53YWxzaFxuICAgIGNvbnN0IHNjcm9sbERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgc2Nyb2xsRGl2LmNsYXNzTmFtZSA9IENsYXNzTmFtZS5TQ1JPTExCQVJfTUVBU1VSRVJcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcm9sbERpdilcbiAgICBjb25zdCBzY3JvbGxiYXJXaWR0aCA9IHNjcm9sbERpdi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCAtIHNjcm9sbERpdi5jbGllbnRXaWR0aFxuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoc2Nyb2xsRGl2KVxuICAgIHJldHVybiBzY3JvbGxiYXJXaWR0aFxuICB9XG5cbiAgLy8gU3RhdGljXG5cbiAgc3RhdGljIF9qUXVlcnlJbnRlcmZhY2UoY29uZmlnLCByZWxhdGVkVGFyZ2V0KSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgZGF0YSA9ICQodGhpcykuZGF0YShEQVRBX0tFWSlcbiAgICAgIGNvbnN0IF9jb25maWcgPSB7XG4gICAgICAgIC4uLkRlZmF1bHQsXG4gICAgICAgIC4uLiQodGhpcykuZGF0YSgpLFxuICAgICAgICAuLi50eXBlb2YgY29uZmlnID09PSAnb2JqZWN0JyAmJiBjb25maWcgPyBjb25maWcgOiB7fVxuICAgICAgfVxuXG4gICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgZGF0YSA9IG5ldyBNb2RhbCh0aGlzLCBfY29uZmlnKVxuICAgICAgICAkKHRoaXMpLmRhdGEoREFUQV9LRVksIGRhdGEpXG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAodHlwZW9mIGRhdGFbY29uZmlnXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBObyBtZXRob2QgbmFtZWQgXCIke2NvbmZpZ31cImApXG4gICAgICAgIH1cbiAgICAgICAgZGF0YVtjb25maWddKHJlbGF0ZWRUYXJnZXQpXG4gICAgICB9IGVsc2UgaWYgKF9jb25maWcuc2hvdykge1xuICAgICAgICBkYXRhLnNob3cocmVsYXRlZFRhcmdldClcbiAgICAgIH1cbiAgICB9KVxuICB9XG59XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBEYXRhIEFwaSBpbXBsZW1lbnRhdGlvblxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuJChkb2N1bWVudCkub24oRXZlbnQuQ0xJQ0tfREFUQV9BUEksIFNlbGVjdG9yLkRBVEFfVE9HR0xFLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgbGV0IHRhcmdldFxuICBjb25zdCBzZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCh0aGlzKVxuXG4gIGlmIChzZWxlY3Rvcikge1xuICAgIHRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpXG4gIH1cblxuICBjb25zdCBjb25maWcgPSAkKHRhcmdldCkuZGF0YShEQVRBX0tFWSlcbiAgICA/ICd0b2dnbGUnIDoge1xuICAgICAgLi4uJCh0YXJnZXQpLmRhdGEoKSxcbiAgICAgIC4uLiQodGhpcykuZGF0YSgpXG4gICAgfVxuXG4gIGlmICh0aGlzLnRhZ05hbWUgPT09ICdBJyB8fCB0aGlzLnRhZ05hbWUgPT09ICdBUkVBJykge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgfVxuXG4gIGNvbnN0ICR0YXJnZXQgPSAkKHRhcmdldCkub25lKEV2ZW50LlNIT1csIChzaG93RXZlbnQpID0+IHtcbiAgICBpZiAoc2hvd0V2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICAvLyBPbmx5IHJlZ2lzdGVyIGZvY3VzIHJlc3RvcmVyIGlmIG1vZGFsIHdpbGwgYWN0dWFsbHkgZ2V0IHNob3duXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAkdGFyZ2V0Lm9uZShFdmVudC5ISURERU4sICgpID0+IHtcbiAgICAgIGlmICgkKHRoaXMpLmlzKCc6dmlzaWJsZScpKSB7XG4gICAgICAgIHRoaXMuZm9jdXMoKVxuICAgICAgfVxuICAgIH0pXG4gIH0pXG5cbiAgTW9kYWwuX2pRdWVyeUludGVyZmFjZS5jYWxsKCQodGFyZ2V0KSwgY29uZmlnLCB0aGlzKVxufSlcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIGpRdWVyeVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuJC5mbltOQU1FXSA9IE1vZGFsLl9qUXVlcnlJbnRlcmZhY2VcbiQuZm5bTkFNRV0uQ29uc3RydWN0b3IgPSBNb2RhbFxuJC5mbltOQU1FXS5ub0NvbmZsaWN0ID0gKCkgPT4ge1xuICAkLmZuW05BTUVdID0gSlFVRVJZX05PX0NPTkZMSUNUXG4gIHJldHVybiBNb2RhbC5falF1ZXJ5SW50ZXJmYWNlXG59XG5cbmV4cG9ydCBkZWZhdWx0IE1vZGFsXG4iLCIvKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY0LjIuMSk6IHRvb2x0aXAuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmltcG9ydCAkIGZyb20gJ2pxdWVyeSdcbmltcG9ydCBQb3BwZXIgZnJvbSAncG9wcGVyLmpzJ1xuaW1wb3J0IFV0aWwgZnJvbSAnLi91dGlsJ1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29uc3RhbnRzXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jb25zdCBOQU1FICAgICAgICAgICAgICAgPSAndG9vbHRpcCdcbmNvbnN0IFZFUlNJT04gICAgICAgICAgICA9ICc0LjIuMSdcbmNvbnN0IERBVEFfS0VZICAgICAgICAgICA9ICdicy50b29sdGlwJ1xuY29uc3QgRVZFTlRfS0VZICAgICAgICAgID0gYC4ke0RBVEFfS0VZfWBcbmNvbnN0IEpRVUVSWV9OT19DT05GTElDVCA9ICQuZm5bTkFNRV1cbmNvbnN0IENMQVNTX1BSRUZJWCAgICAgICA9ICdicy10b29sdGlwJ1xuY29uc3QgQlNDTFNfUFJFRklYX1JFR0VYID0gbmV3IFJlZ0V4cChgKF58XFxcXHMpJHtDTEFTU19QUkVGSVh9XFxcXFMrYCwgJ2cnKVxuXG5jb25zdCBEZWZhdWx0VHlwZSA9IHtcbiAgYW5pbWF0aW9uICAgICAgICAgOiAnYm9vbGVhbicsXG4gIHRlbXBsYXRlICAgICAgICAgIDogJ3N0cmluZycsXG4gIHRpdGxlICAgICAgICAgICAgIDogJyhzdHJpbmd8ZWxlbWVudHxmdW5jdGlvbiknLFxuICB0cmlnZ2VyICAgICAgICAgICA6ICdzdHJpbmcnLFxuICBkZWxheSAgICAgICAgICAgICA6ICcobnVtYmVyfG9iamVjdCknLFxuICBodG1sICAgICAgICAgICAgICA6ICdib29sZWFuJyxcbiAgc2VsZWN0b3IgICAgICAgICAgOiAnKHN0cmluZ3xib29sZWFuKScsXG4gIHBsYWNlbWVudCAgICAgICAgIDogJyhzdHJpbmd8ZnVuY3Rpb24pJyxcbiAgb2Zmc2V0ICAgICAgICAgICAgOiAnKG51bWJlcnxzdHJpbmcpJyxcbiAgY29udGFpbmVyICAgICAgICAgOiAnKHN0cmluZ3xlbGVtZW50fGJvb2xlYW4pJyxcbiAgZmFsbGJhY2tQbGFjZW1lbnQgOiAnKHN0cmluZ3xhcnJheSknLFxuICBib3VuZGFyeSAgICAgICAgICA6ICcoc3RyaW5nfGVsZW1lbnQpJ1xufVxuXG5jb25zdCBBdHRhY2htZW50TWFwID0ge1xuICBBVVRPICAgOiAnYXV0bycsXG4gIFRPUCAgICA6ICd0b3AnLFxuICBSSUdIVCAgOiAncmlnaHQnLFxuICBCT1RUT00gOiAnYm90dG9tJyxcbiAgTEVGVCAgIDogJ2xlZnQnXG59XG5cbmNvbnN0IERlZmF1bHQgPSB7XG4gIGFuaW1hdGlvbiAgICAgICAgIDogdHJ1ZSxcbiAgdGVtcGxhdGUgICAgICAgICAgOiAnPGRpdiBjbGFzcz1cInRvb2x0aXBcIiByb2xlPVwidG9vbHRpcFwiPicgK1xuICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cImFycm93XCI+PC9kaXY+JyArXG4gICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwidG9vbHRpcC1pbm5lclwiPjwvZGl2PjwvZGl2PicsXG4gIHRyaWdnZXIgICAgICAgICAgIDogJ2hvdmVyIGZvY3VzJyxcbiAgdGl0bGUgICAgICAgICAgICAgOiAnJyxcbiAgZGVsYXkgICAgICAgICAgICAgOiAwLFxuICBodG1sICAgICAgICAgICAgICA6IGZhbHNlLFxuICBzZWxlY3RvciAgICAgICAgICA6IGZhbHNlLFxuICBwbGFjZW1lbnQgICAgICAgICA6ICd0b3AnLFxuICBvZmZzZXQgICAgICAgICAgICA6IDAsXG4gIGNvbnRhaW5lciAgICAgICAgIDogZmFsc2UsXG4gIGZhbGxiYWNrUGxhY2VtZW50IDogJ2ZsaXAnLFxuICBib3VuZGFyeSAgICAgICAgICA6ICdzY3JvbGxQYXJlbnQnXG59XG5cbmNvbnN0IEhvdmVyU3RhdGUgPSB7XG4gIFNIT1cgOiAnc2hvdycsXG4gIE9VVCAgOiAnb3V0J1xufVxuXG5jb25zdCBFdmVudCA9IHtcbiAgSElERSAgICAgICA6IGBoaWRlJHtFVkVOVF9LRVl9YCxcbiAgSElEREVOICAgICA6IGBoaWRkZW4ke0VWRU5UX0tFWX1gLFxuICBTSE9XICAgICAgIDogYHNob3cke0VWRU5UX0tFWX1gLFxuICBTSE9XTiAgICAgIDogYHNob3duJHtFVkVOVF9LRVl9YCxcbiAgSU5TRVJURUQgICA6IGBpbnNlcnRlZCR7RVZFTlRfS0VZfWAsXG4gIENMSUNLICAgICAgOiBgY2xpY2ske0VWRU5UX0tFWX1gLFxuICBGT0NVU0lOICAgIDogYGZvY3VzaW4ke0VWRU5UX0tFWX1gLFxuICBGT0NVU09VVCAgIDogYGZvY3Vzb3V0JHtFVkVOVF9LRVl9YCxcbiAgTU9VU0VFTlRFUiA6IGBtb3VzZWVudGVyJHtFVkVOVF9LRVl9YCxcbiAgTU9VU0VMRUFWRSA6IGBtb3VzZWxlYXZlJHtFVkVOVF9LRVl9YFxufVxuXG5jb25zdCBDbGFzc05hbWUgPSB7XG4gIEZBREUgOiAnZmFkZScsXG4gIFNIT1cgOiAnc2hvdydcbn1cblxuY29uc3QgU2VsZWN0b3IgPSB7XG4gIFRPT0xUSVAgICAgICAgOiAnLnRvb2x0aXAnLFxuICBUT09MVElQX0lOTkVSIDogJy50b29sdGlwLWlubmVyJyxcbiAgQVJST1cgICAgICAgICA6ICcuYXJyb3cnXG59XG5cbmNvbnN0IFRyaWdnZXIgPSB7XG4gIEhPVkVSICA6ICdob3ZlcicsXG4gIEZPQ1VTICA6ICdmb2N1cycsXG4gIENMSUNLICA6ICdjbGljaycsXG4gIE1BTlVBTCA6ICdtYW51YWwnXG59XG5cblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENsYXNzIERlZmluaXRpb25cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNsYXNzIFRvb2x0aXAge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBjb25maWcpIHtcbiAgICAvKipcbiAgICAgKiBDaGVjayBmb3IgUG9wcGVyIGRlcGVuZGVuY3lcbiAgICAgKiBQb3BwZXIgLSBodHRwczovL3BvcHBlci5qcy5vcmdcbiAgICAgKi9cbiAgICBpZiAodHlwZW9mIFBvcHBlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Jvb3RzdHJhcFxcJ3MgdG9vbHRpcHMgcmVxdWlyZSBQb3BwZXIuanMgKGh0dHBzOi8vcG9wcGVyLmpzLm9yZy8pJylcbiAgICB9XG5cbiAgICAvLyBwcml2YXRlXG4gICAgdGhpcy5faXNFbmFibGVkICAgICA9IHRydWVcbiAgICB0aGlzLl90aW1lb3V0ICAgICAgID0gMFxuICAgIHRoaXMuX2hvdmVyU3RhdGUgICAgPSAnJ1xuICAgIHRoaXMuX2FjdGl2ZVRyaWdnZXIgPSB7fVxuICAgIHRoaXMuX3BvcHBlciAgICAgICAgPSBudWxsXG5cbiAgICAvLyBQcm90ZWN0ZWRcbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50XG4gICAgdGhpcy5jb25maWcgID0gdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZylcbiAgICB0aGlzLnRpcCAgICAgPSBudWxsXG5cbiAgICB0aGlzLl9zZXRMaXN0ZW5lcnMoKVxuICB9XG5cbiAgLy8gR2V0dGVyc1xuXG4gIHN0YXRpYyBnZXQgVkVSU0lPTigpIHtcbiAgICByZXR1cm4gVkVSU0lPTlxuICB9XG5cbiAgc3RhdGljIGdldCBEZWZhdWx0KCkge1xuICAgIHJldHVybiBEZWZhdWx0XG4gIH1cblxuICBzdGF0aWMgZ2V0IE5BTUUoKSB7XG4gICAgcmV0dXJuIE5BTUVcbiAgfVxuXG4gIHN0YXRpYyBnZXQgREFUQV9LRVkoKSB7XG4gICAgcmV0dXJuIERBVEFfS0VZXG4gIH1cblxuICBzdGF0aWMgZ2V0IEV2ZW50KCkge1xuICAgIHJldHVybiBFdmVudFxuICB9XG5cbiAgc3RhdGljIGdldCBFVkVOVF9LRVkoKSB7XG4gICAgcmV0dXJuIEVWRU5UX0tFWVxuICB9XG5cbiAgc3RhdGljIGdldCBEZWZhdWx0VHlwZSgpIHtcbiAgICByZXR1cm4gRGVmYXVsdFR5cGVcbiAgfVxuXG4gIC8vIFB1YmxpY1xuXG4gIGVuYWJsZSgpIHtcbiAgICB0aGlzLl9pc0VuYWJsZWQgPSB0cnVlXG4gIH1cblxuICBkaXNhYmxlKCkge1xuICAgIHRoaXMuX2lzRW5hYmxlZCA9IGZhbHNlXG4gIH1cblxuICB0b2dnbGVFbmFibGVkKCkge1xuICAgIHRoaXMuX2lzRW5hYmxlZCA9ICF0aGlzLl9pc0VuYWJsZWRcbiAgfVxuXG4gIHRvZ2dsZShldmVudCkge1xuICAgIGlmICghdGhpcy5faXNFbmFibGVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAoZXZlbnQpIHtcbiAgICAgIGNvbnN0IGRhdGFLZXkgPSB0aGlzLmNvbnN0cnVjdG9yLkRBVEFfS0VZXG4gICAgICBsZXQgY29udGV4dCA9ICQoZXZlbnQuY3VycmVudFRhcmdldCkuZGF0YShkYXRhS2V5KVxuXG4gICAgICBpZiAoIWNvbnRleHQpIHtcbiAgICAgICAgY29udGV4dCA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKFxuICAgICAgICAgIGV2ZW50LmN1cnJlbnRUYXJnZXQsXG4gICAgICAgICAgdGhpcy5fZ2V0RGVsZWdhdGVDb25maWcoKVxuICAgICAgICApXG4gICAgICAgICQoZXZlbnQuY3VycmVudFRhcmdldCkuZGF0YShkYXRhS2V5LCBjb250ZXh0KVxuICAgICAgfVxuXG4gICAgICBjb250ZXh0Ll9hY3RpdmVUcmlnZ2VyLmNsaWNrID0gIWNvbnRleHQuX2FjdGl2ZVRyaWdnZXIuY2xpY2tcblxuICAgICAgaWYgKGNvbnRleHQuX2lzV2l0aEFjdGl2ZVRyaWdnZXIoKSkge1xuICAgICAgICBjb250ZXh0Ll9lbnRlcihudWxsLCBjb250ZXh0KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29udGV4dC5fbGVhdmUobnVsbCwgY29udGV4dClcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCQodGhpcy5nZXRUaXBFbGVtZW50KCkpLmhhc0NsYXNzKENsYXNzTmFtZS5TSE9XKSkge1xuICAgICAgICB0aGlzLl9sZWF2ZShudWxsLCB0aGlzKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgdGhpcy5fZW50ZXIobnVsbCwgdGhpcylcbiAgICB9XG4gIH1cblxuICBkaXNwb3NlKCkge1xuICAgIGNsZWFyVGltZW91dCh0aGlzLl90aW1lb3V0KVxuXG4gICAgJC5yZW1vdmVEYXRhKHRoaXMuZWxlbWVudCwgdGhpcy5jb25zdHJ1Y3Rvci5EQVRBX0tFWSlcblxuICAgICQodGhpcy5lbGVtZW50KS5vZmYodGhpcy5jb25zdHJ1Y3Rvci5FVkVOVF9LRVkpXG4gICAgJCh0aGlzLmVsZW1lbnQpLmNsb3Nlc3QoJy5tb2RhbCcpLm9mZignaGlkZS5icy5tb2RhbCcpXG5cbiAgICBpZiAodGhpcy50aXApIHtcbiAgICAgICQodGhpcy50aXApLnJlbW92ZSgpXG4gICAgfVxuXG4gICAgdGhpcy5faXNFbmFibGVkICAgICA9IG51bGxcbiAgICB0aGlzLl90aW1lb3V0ICAgICAgID0gbnVsbFxuICAgIHRoaXMuX2hvdmVyU3RhdGUgICAgPSBudWxsXG4gICAgdGhpcy5fYWN0aXZlVHJpZ2dlciA9IG51bGxcbiAgICBpZiAodGhpcy5fcG9wcGVyICE9PSBudWxsKSB7XG4gICAgICB0aGlzLl9wb3BwZXIuZGVzdHJveSgpXG4gICAgfVxuXG4gICAgdGhpcy5fcG9wcGVyID0gbnVsbFxuICAgIHRoaXMuZWxlbWVudCA9IG51bGxcbiAgICB0aGlzLmNvbmZpZyAgPSBudWxsXG4gICAgdGhpcy50aXAgICAgID0gbnVsbFxuICB9XG5cbiAgc2hvdygpIHtcbiAgICBpZiAoJCh0aGlzLmVsZW1lbnQpLmNzcygnZGlzcGxheScpID09PSAnbm9uZScpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignUGxlYXNlIHVzZSBzaG93IG9uIHZpc2libGUgZWxlbWVudHMnKVxuICAgIH1cblxuICAgIGNvbnN0IHNob3dFdmVudCA9ICQuRXZlbnQodGhpcy5jb25zdHJ1Y3Rvci5FdmVudC5TSE9XKVxuICAgIGlmICh0aGlzLmlzV2l0aENvbnRlbnQoKSAmJiB0aGlzLl9pc0VuYWJsZWQpIHtcbiAgICAgICQodGhpcy5lbGVtZW50KS50cmlnZ2VyKHNob3dFdmVudClcblxuICAgICAgY29uc3Qgc2hhZG93Um9vdCA9IFV0aWwuZmluZFNoYWRvd1Jvb3QodGhpcy5lbGVtZW50KVxuICAgICAgY29uc3QgaXNJblRoZURvbSA9ICQuY29udGFpbnMoXG4gICAgICAgIHNoYWRvd1Jvb3QgIT09IG51bGwgPyBzaGFkb3dSb290IDogdGhpcy5lbGVtZW50Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LFxuICAgICAgICB0aGlzLmVsZW1lbnRcbiAgICAgIClcblxuICAgICAgaWYgKHNob3dFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSB8fCAhaXNJblRoZURvbSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgY29uc3QgdGlwICAgPSB0aGlzLmdldFRpcEVsZW1lbnQoKVxuICAgICAgY29uc3QgdGlwSWQgPSBVdGlsLmdldFVJRCh0aGlzLmNvbnN0cnVjdG9yLk5BTUUpXG5cbiAgICAgIHRpcC5zZXRBdHRyaWJ1dGUoJ2lkJywgdGlwSWQpXG4gICAgICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWRlc2NyaWJlZGJ5JywgdGlwSWQpXG5cbiAgICAgIHRoaXMuc2V0Q29udGVudCgpXG5cbiAgICAgIGlmICh0aGlzLmNvbmZpZy5hbmltYXRpb24pIHtcbiAgICAgICAgJCh0aXApLmFkZENsYXNzKENsYXNzTmFtZS5GQURFKVxuICAgICAgfVxuXG4gICAgICBjb25zdCBwbGFjZW1lbnQgID0gdHlwZW9mIHRoaXMuY29uZmlnLnBsYWNlbWVudCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IHRoaXMuY29uZmlnLnBsYWNlbWVudC5jYWxsKHRoaXMsIHRpcCwgdGhpcy5lbGVtZW50KVxuICAgICAgICA6IHRoaXMuY29uZmlnLnBsYWNlbWVudFxuXG4gICAgICBjb25zdCBhdHRhY2htZW50ID0gdGhpcy5fZ2V0QXR0YWNobWVudChwbGFjZW1lbnQpXG4gICAgICB0aGlzLmFkZEF0dGFjaG1lbnRDbGFzcyhhdHRhY2htZW50KVxuXG4gICAgICBjb25zdCBjb250YWluZXIgPSB0aGlzLl9nZXRDb250YWluZXIoKVxuICAgICAgJCh0aXApLmRhdGEodGhpcy5jb25zdHJ1Y3Rvci5EQVRBX0tFWSwgdGhpcylcblxuICAgICAgaWYgKCEkLmNvbnRhaW5zKHRoaXMuZWxlbWVudC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgdGhpcy50aXApKSB7XG4gICAgICAgICQodGlwKS5hcHBlbmRUbyhjb250YWluZXIpXG4gICAgICB9XG5cbiAgICAgICQodGhpcy5lbGVtZW50KS50cmlnZ2VyKHRoaXMuY29uc3RydWN0b3IuRXZlbnQuSU5TRVJURUQpXG5cbiAgICAgIHRoaXMuX3BvcHBlciA9IG5ldyBQb3BwZXIodGhpcy5lbGVtZW50LCB0aXAsIHtcbiAgICAgICAgcGxhY2VtZW50OiBhdHRhY2htZW50LFxuICAgICAgICBtb2RpZmllcnM6IHtcbiAgICAgICAgICBvZmZzZXQ6IHtcbiAgICAgICAgICAgIG9mZnNldDogdGhpcy5jb25maWcub2Zmc2V0XG4gICAgICAgICAgfSxcbiAgICAgICAgICBmbGlwOiB7XG4gICAgICAgICAgICBiZWhhdmlvcjogdGhpcy5jb25maWcuZmFsbGJhY2tQbGFjZW1lbnRcbiAgICAgICAgICB9LFxuICAgICAgICAgIGFycm93OiB7XG4gICAgICAgICAgICBlbGVtZW50OiBTZWxlY3Rvci5BUlJPV1xuICAgICAgICAgIH0sXG4gICAgICAgICAgcHJldmVudE92ZXJmbG93OiB7XG4gICAgICAgICAgICBib3VuZGFyaWVzRWxlbWVudDogdGhpcy5jb25maWcuYm91bmRhcnlcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG9uQ3JlYXRlOiAoZGF0YSkgPT4ge1xuICAgICAgICAgIGlmIChkYXRhLm9yaWdpbmFsUGxhY2VtZW50ICE9PSBkYXRhLnBsYWNlbWVudCkge1xuICAgICAgICAgICAgdGhpcy5faGFuZGxlUG9wcGVyUGxhY2VtZW50Q2hhbmdlKGRhdGEpXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBvblVwZGF0ZTogKGRhdGEpID0+IHRoaXMuX2hhbmRsZVBvcHBlclBsYWNlbWVudENoYW5nZShkYXRhKVxuICAgICAgfSlcblxuICAgICAgJCh0aXApLmFkZENsYXNzKENsYXNzTmFtZS5TSE9XKVxuXG4gICAgICAvLyBJZiB0aGlzIGlzIGEgdG91Y2gtZW5hYmxlZCBkZXZpY2Ugd2UgYWRkIGV4dHJhXG4gICAgICAvLyBlbXB0eSBtb3VzZW92ZXIgbGlzdGVuZXJzIHRvIHRoZSBib2R5J3MgaW1tZWRpYXRlIGNoaWxkcmVuO1xuICAgICAgLy8gb25seSBuZWVkZWQgYmVjYXVzZSBvZiBicm9rZW4gZXZlbnQgZGVsZWdhdGlvbiBvbiBpT1NcbiAgICAgIC8vIGh0dHBzOi8vd3d3LnF1aXJrc21vZGUub3JnL2Jsb2cvYXJjaGl2ZXMvMjAxNC8wMi9tb3VzZV9ldmVudF9idWIuaHRtbFxuICAgICAgaWYgKCdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuICAgICAgICAkKGRvY3VtZW50LmJvZHkpLmNoaWxkcmVuKCkub24oJ21vdXNlb3ZlcicsIG51bGwsICQubm9vcClcbiAgICAgIH1cblxuICAgICAgY29uc3QgY29tcGxldGUgPSAoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLmNvbmZpZy5hbmltYXRpb24pIHtcbiAgICAgICAgICB0aGlzLl9maXhUcmFuc2l0aW9uKClcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwcmV2SG92ZXJTdGF0ZSA9IHRoaXMuX2hvdmVyU3RhdGVcbiAgICAgICAgdGhpcy5faG92ZXJTdGF0ZSAgICAgPSBudWxsXG5cbiAgICAgICAgJCh0aGlzLmVsZW1lbnQpLnRyaWdnZXIodGhpcy5jb25zdHJ1Y3Rvci5FdmVudC5TSE9XTilcblxuICAgICAgICBpZiAocHJldkhvdmVyU3RhdGUgPT09IEhvdmVyU3RhdGUuT1VUKSB7XG4gICAgICAgICAgdGhpcy5fbGVhdmUobnVsbCwgdGhpcylcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoJCh0aGlzLnRpcCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkZBREUpKSB7XG4gICAgICAgIGNvbnN0IHRyYW5zaXRpb25EdXJhdGlvbiA9IFV0aWwuZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQodGhpcy50aXApXG5cbiAgICAgICAgJCh0aGlzLnRpcClcbiAgICAgICAgICAub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGNvbXBsZXRlKVxuICAgICAgICAgIC5lbXVsYXRlVHJhbnNpdGlvbkVuZCh0cmFuc2l0aW9uRHVyYXRpb24pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb21wbGV0ZSgpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaGlkZShjYWxsYmFjaykge1xuICAgIGNvbnN0IHRpcCAgICAgICA9IHRoaXMuZ2V0VGlwRWxlbWVudCgpXG4gICAgY29uc3QgaGlkZUV2ZW50ID0gJC5FdmVudCh0aGlzLmNvbnN0cnVjdG9yLkV2ZW50LkhJREUpXG4gICAgY29uc3QgY29tcGxldGUgPSAoKSA9PiB7XG4gICAgICBpZiAodGhpcy5faG92ZXJTdGF0ZSAhPT0gSG92ZXJTdGF0ZS5TSE9XICYmIHRpcC5wYXJlbnROb2RlKSB7XG4gICAgICAgIHRpcC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRpcClcbiAgICAgIH1cblxuICAgICAgdGhpcy5fY2xlYW5UaXBDbGFzcygpXG4gICAgICB0aGlzLmVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWRlc2NyaWJlZGJ5JylcbiAgICAgICQodGhpcy5lbGVtZW50KS50cmlnZ2VyKHRoaXMuY29uc3RydWN0b3IuRXZlbnQuSElEREVOKVxuICAgICAgaWYgKHRoaXMuX3BvcHBlciAhPT0gbnVsbCkge1xuICAgICAgICB0aGlzLl9wb3BwZXIuZGVzdHJveSgpXG4gICAgICB9XG5cbiAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICBjYWxsYmFjaygpXG4gICAgICB9XG4gICAgfVxuXG4gICAgJCh0aGlzLmVsZW1lbnQpLnRyaWdnZXIoaGlkZUV2ZW50KVxuXG4gICAgaWYgKGhpZGVFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgJCh0aXApLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5TSE9XKVxuXG4gICAgLy8gSWYgdGhpcyBpcyBhIHRvdWNoLWVuYWJsZWQgZGV2aWNlIHdlIHJlbW92ZSB0aGUgZXh0cmFcbiAgICAvLyBlbXB0eSBtb3VzZW92ZXIgbGlzdGVuZXJzIHdlIGFkZGVkIGZvciBpT1Mgc3VwcG9ydFxuICAgIGlmICgnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgICQoZG9jdW1lbnQuYm9keSkuY2hpbGRyZW4oKS5vZmYoJ21vdXNlb3ZlcicsIG51bGwsICQubm9vcClcbiAgICB9XG5cbiAgICB0aGlzLl9hY3RpdmVUcmlnZ2VyW1RyaWdnZXIuQ0xJQ0tdID0gZmFsc2VcbiAgICB0aGlzLl9hY3RpdmVUcmlnZ2VyW1RyaWdnZXIuRk9DVVNdID0gZmFsc2VcbiAgICB0aGlzLl9hY3RpdmVUcmlnZ2VyW1RyaWdnZXIuSE9WRVJdID0gZmFsc2VcblxuICAgIGlmICgkKHRoaXMudGlwKS5oYXNDbGFzcyhDbGFzc05hbWUuRkFERSkpIHtcbiAgICAgIGNvbnN0IHRyYW5zaXRpb25EdXJhdGlvbiA9IFV0aWwuZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQodGlwKVxuXG4gICAgICAkKHRpcClcbiAgICAgICAgLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBjb21wbGV0ZSlcbiAgICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKHRyYW5zaXRpb25EdXJhdGlvbilcbiAgICB9IGVsc2Uge1xuICAgICAgY29tcGxldGUoKVxuICAgIH1cblxuICAgIHRoaXMuX2hvdmVyU3RhdGUgPSAnJ1xuICB9XG5cbiAgdXBkYXRlKCkge1xuICAgIGlmICh0aGlzLl9wb3BwZXIgIT09IG51bGwpIHtcbiAgICAgIHRoaXMuX3BvcHBlci5zY2hlZHVsZVVwZGF0ZSgpXG4gICAgfVxuICB9XG5cbiAgLy8gUHJvdGVjdGVkXG5cbiAgaXNXaXRoQ29udGVudCgpIHtcbiAgICByZXR1cm4gQm9vbGVhbih0aGlzLmdldFRpdGxlKCkpXG4gIH1cblxuICBhZGRBdHRhY2htZW50Q2xhc3MoYXR0YWNobWVudCkge1xuICAgICQodGhpcy5nZXRUaXBFbGVtZW50KCkpLmFkZENsYXNzKGAke0NMQVNTX1BSRUZJWH0tJHthdHRhY2htZW50fWApXG4gIH1cblxuICBnZXRUaXBFbGVtZW50KCkge1xuICAgIHRoaXMudGlwID0gdGhpcy50aXAgfHwgJCh0aGlzLmNvbmZpZy50ZW1wbGF0ZSlbMF1cbiAgICByZXR1cm4gdGhpcy50aXBcbiAgfVxuXG4gIHNldENvbnRlbnQoKSB7XG4gICAgY29uc3QgdGlwID0gdGhpcy5nZXRUaXBFbGVtZW50KClcbiAgICB0aGlzLnNldEVsZW1lbnRDb250ZW50KCQodGlwLnF1ZXJ5U2VsZWN0b3JBbGwoU2VsZWN0b3IuVE9PTFRJUF9JTk5FUikpLCB0aGlzLmdldFRpdGxlKCkpXG4gICAgJCh0aXApLnJlbW92ZUNsYXNzKGAke0NsYXNzTmFtZS5GQURFfSAke0NsYXNzTmFtZS5TSE9XfWApXG4gIH1cblxuICBzZXRFbGVtZW50Q29udGVudCgkZWxlbWVudCwgY29udGVudCkge1xuICAgIGNvbnN0IGh0bWwgPSB0aGlzLmNvbmZpZy5odG1sXG4gICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnb2JqZWN0JyAmJiAoY29udGVudC5ub2RlVHlwZSB8fCBjb250ZW50LmpxdWVyeSkpIHtcbiAgICAgIC8vIENvbnRlbnQgaXMgYSBET00gbm9kZSBvciBhIGpRdWVyeVxuICAgICAgaWYgKGh0bWwpIHtcbiAgICAgICAgaWYgKCEkKGNvbnRlbnQpLnBhcmVudCgpLmlzKCRlbGVtZW50KSkge1xuICAgICAgICAgICRlbGVtZW50LmVtcHR5KCkuYXBwZW5kKGNvbnRlbnQpXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICRlbGVtZW50LnRleHQoJChjb250ZW50KS50ZXh0KCkpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICRlbGVtZW50W2h0bWwgPyAnaHRtbCcgOiAndGV4dCddKGNvbnRlbnQpXG4gICAgfVxuICB9XG5cbiAgZ2V0VGl0bGUoKSB7XG4gICAgbGV0IHRpdGxlID0gdGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1vcmlnaW5hbC10aXRsZScpXG5cbiAgICBpZiAoIXRpdGxlKSB7XG4gICAgICB0aXRsZSA9IHR5cGVvZiB0aGlzLmNvbmZpZy50aXRsZSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IHRoaXMuY29uZmlnLnRpdGxlLmNhbGwodGhpcy5lbGVtZW50KVxuICAgICAgICA6IHRoaXMuY29uZmlnLnRpdGxlXG4gICAgfVxuXG4gICAgcmV0dXJuIHRpdGxlXG4gIH1cblxuICAvLyBQcml2YXRlXG5cbiAgX2dldENvbnRhaW5lcigpIHtcbiAgICBpZiAodGhpcy5jb25maWcuY29udGFpbmVyID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIGRvY3VtZW50LmJvZHlcbiAgICB9XG5cbiAgICBpZiAoVXRpbC5pc0VsZW1lbnQodGhpcy5jb25maWcuY29udGFpbmVyKSkge1xuICAgICAgcmV0dXJuICQodGhpcy5jb25maWcuY29udGFpbmVyKVxuICAgIH1cblxuICAgIHJldHVybiAkKGRvY3VtZW50KS5maW5kKHRoaXMuY29uZmlnLmNvbnRhaW5lcilcbiAgfVxuXG4gIF9nZXRBdHRhY2htZW50KHBsYWNlbWVudCkge1xuICAgIHJldHVybiBBdHRhY2htZW50TWFwW3BsYWNlbWVudC50b1VwcGVyQ2FzZSgpXVxuICB9XG5cbiAgX3NldExpc3RlbmVycygpIHtcbiAgICBjb25zdCB0cmlnZ2VycyA9IHRoaXMuY29uZmlnLnRyaWdnZXIuc3BsaXQoJyAnKVxuXG4gICAgdHJpZ2dlcnMuZm9yRWFjaCgodHJpZ2dlcikgPT4ge1xuICAgICAgaWYgKHRyaWdnZXIgPT09ICdjbGljaycpIHtcbiAgICAgICAgJCh0aGlzLmVsZW1lbnQpLm9uKFxuICAgICAgICAgIHRoaXMuY29uc3RydWN0b3IuRXZlbnQuQ0xJQ0ssXG4gICAgICAgICAgdGhpcy5jb25maWcuc2VsZWN0b3IsXG4gICAgICAgICAgKGV2ZW50KSA9PiB0aGlzLnRvZ2dsZShldmVudClcbiAgICAgICAgKVxuICAgICAgfSBlbHNlIGlmICh0cmlnZ2VyICE9PSBUcmlnZ2VyLk1BTlVBTCkge1xuICAgICAgICBjb25zdCBldmVudEluID0gdHJpZ2dlciA9PT0gVHJpZ2dlci5IT1ZFUlxuICAgICAgICAgID8gdGhpcy5jb25zdHJ1Y3Rvci5FdmVudC5NT1VTRUVOVEVSXG4gICAgICAgICAgOiB0aGlzLmNvbnN0cnVjdG9yLkV2ZW50LkZPQ1VTSU5cbiAgICAgICAgY29uc3QgZXZlbnRPdXQgPSB0cmlnZ2VyID09PSBUcmlnZ2VyLkhPVkVSXG4gICAgICAgICAgPyB0aGlzLmNvbnN0cnVjdG9yLkV2ZW50Lk1PVVNFTEVBVkVcbiAgICAgICAgICA6IHRoaXMuY29uc3RydWN0b3IuRXZlbnQuRk9DVVNPVVRcblxuICAgICAgICAkKHRoaXMuZWxlbWVudClcbiAgICAgICAgICAub24oXG4gICAgICAgICAgICBldmVudEluLFxuICAgICAgICAgICAgdGhpcy5jb25maWcuc2VsZWN0b3IsXG4gICAgICAgICAgICAoZXZlbnQpID0+IHRoaXMuX2VudGVyKGV2ZW50KVxuICAgICAgICAgIClcbiAgICAgICAgICAub24oXG4gICAgICAgICAgICBldmVudE91dCxcbiAgICAgICAgICAgIHRoaXMuY29uZmlnLnNlbGVjdG9yLFxuICAgICAgICAgICAgKGV2ZW50KSA9PiB0aGlzLl9sZWF2ZShldmVudClcbiAgICAgICAgICApXG4gICAgICB9XG4gICAgfSlcblxuICAgICQodGhpcy5lbGVtZW50KS5jbG9zZXN0KCcubW9kYWwnKS5vbihcbiAgICAgICdoaWRlLmJzLm1vZGFsJyxcbiAgICAgICgpID0+IHtcbiAgICAgICAgaWYgKHRoaXMuZWxlbWVudCkge1xuICAgICAgICAgIHRoaXMuaGlkZSgpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICApXG5cbiAgICBpZiAodGhpcy5jb25maWcuc2VsZWN0b3IpIHtcbiAgICAgIHRoaXMuY29uZmlnID0ge1xuICAgICAgICAuLi50aGlzLmNvbmZpZyxcbiAgICAgICAgdHJpZ2dlcjogJ21hbnVhbCcsXG4gICAgICAgIHNlbGVjdG9yOiAnJ1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9maXhUaXRsZSgpXG4gICAgfVxuICB9XG5cbiAgX2ZpeFRpdGxlKCkge1xuICAgIGNvbnN0IHRpdGxlVHlwZSA9IHR5cGVvZiB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLW9yaWdpbmFsLXRpdGxlJylcblxuICAgIGlmICh0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKCd0aXRsZScpIHx8IHRpdGxlVHlwZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoXG4gICAgICAgICdkYXRhLW9yaWdpbmFsLXRpdGxlJyxcbiAgICAgICAgdGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZSgndGl0bGUnKSB8fCAnJ1xuICAgICAgKVxuXG4gICAgICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCd0aXRsZScsICcnKVxuICAgIH1cbiAgfVxuXG4gIF9lbnRlcihldmVudCwgY29udGV4dCkge1xuICAgIGNvbnN0IGRhdGFLZXkgPSB0aGlzLmNvbnN0cnVjdG9yLkRBVEFfS0VZXG4gICAgY29udGV4dCA9IGNvbnRleHQgfHwgJChldmVudC5jdXJyZW50VGFyZ2V0KS5kYXRhKGRhdGFLZXkpXG5cbiAgICBpZiAoIWNvbnRleHQpIHtcbiAgICAgIGNvbnRleHQgPSBuZXcgdGhpcy5jb25zdHJ1Y3RvcihcbiAgICAgICAgZXZlbnQuY3VycmVudFRhcmdldCxcbiAgICAgICAgdGhpcy5fZ2V0RGVsZWdhdGVDb25maWcoKVxuICAgICAgKVxuICAgICAgJChldmVudC5jdXJyZW50VGFyZ2V0KS5kYXRhKGRhdGFLZXksIGNvbnRleHQpXG4gICAgfVxuXG4gICAgaWYgKGV2ZW50KSB7XG4gICAgICBjb250ZXh0Ll9hY3RpdmVUcmlnZ2VyW1xuICAgICAgICBldmVudC50eXBlID09PSAnZm9jdXNpbicgPyBUcmlnZ2VyLkZPQ1VTIDogVHJpZ2dlci5IT1ZFUlxuICAgICAgXSA9IHRydWVcbiAgICB9XG5cbiAgICBpZiAoJChjb250ZXh0LmdldFRpcEVsZW1lbnQoKSkuaGFzQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpIHx8IGNvbnRleHQuX2hvdmVyU3RhdGUgPT09IEhvdmVyU3RhdGUuU0hPVykge1xuICAgICAgY29udGV4dC5faG92ZXJTdGF0ZSA9IEhvdmVyU3RhdGUuU0hPV1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY2xlYXJUaW1lb3V0KGNvbnRleHQuX3RpbWVvdXQpXG5cbiAgICBjb250ZXh0Ll9ob3ZlclN0YXRlID0gSG92ZXJTdGF0ZS5TSE9XXG5cbiAgICBpZiAoIWNvbnRleHQuY29uZmlnLmRlbGF5IHx8ICFjb250ZXh0LmNvbmZpZy5kZWxheS5zaG93KSB7XG4gICAgICBjb250ZXh0LnNob3coKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29udGV4dC5fdGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgaWYgKGNvbnRleHQuX2hvdmVyU3RhdGUgPT09IEhvdmVyU3RhdGUuU0hPVykge1xuICAgICAgICBjb250ZXh0LnNob3coKVxuICAgICAgfVxuICAgIH0sIGNvbnRleHQuY29uZmlnLmRlbGF5LnNob3cpXG4gIH1cblxuICBfbGVhdmUoZXZlbnQsIGNvbnRleHQpIHtcbiAgICBjb25zdCBkYXRhS2V5ID0gdGhpcy5jb25zdHJ1Y3Rvci5EQVRBX0tFWVxuICAgIGNvbnRleHQgPSBjb250ZXh0IHx8ICQoZXZlbnQuY3VycmVudFRhcmdldCkuZGF0YShkYXRhS2V5KVxuXG4gICAgaWYgKCFjb250ZXh0KSB7XG4gICAgICBjb250ZXh0ID0gbmV3IHRoaXMuY29uc3RydWN0b3IoXG4gICAgICAgIGV2ZW50LmN1cnJlbnRUYXJnZXQsXG4gICAgICAgIHRoaXMuX2dldERlbGVnYXRlQ29uZmlnKClcbiAgICAgIClcbiAgICAgICQoZXZlbnQuY3VycmVudFRhcmdldCkuZGF0YShkYXRhS2V5LCBjb250ZXh0KVxuICAgIH1cblxuICAgIGlmIChldmVudCkge1xuICAgICAgY29udGV4dC5fYWN0aXZlVHJpZ2dlcltcbiAgICAgICAgZXZlbnQudHlwZSA9PT0gJ2ZvY3Vzb3V0JyA/IFRyaWdnZXIuRk9DVVMgOiBUcmlnZ2VyLkhPVkVSXG4gICAgICBdID0gZmFsc2VcbiAgICB9XG5cbiAgICBpZiAoY29udGV4dC5faXNXaXRoQWN0aXZlVHJpZ2dlcigpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjbGVhclRpbWVvdXQoY29udGV4dC5fdGltZW91dClcblxuICAgIGNvbnRleHQuX2hvdmVyU3RhdGUgPSBIb3ZlclN0YXRlLk9VVFxuXG4gICAgaWYgKCFjb250ZXh0LmNvbmZpZy5kZWxheSB8fCAhY29udGV4dC5jb25maWcuZGVsYXkuaGlkZSkge1xuICAgICAgY29udGV4dC5oaWRlKClcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnRleHQuX3RpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGlmIChjb250ZXh0Ll9ob3ZlclN0YXRlID09PSBIb3ZlclN0YXRlLk9VVCkge1xuICAgICAgICBjb250ZXh0LmhpZGUoKVxuICAgICAgfVxuICAgIH0sIGNvbnRleHQuY29uZmlnLmRlbGF5LmhpZGUpXG4gIH1cblxuICBfaXNXaXRoQWN0aXZlVHJpZ2dlcigpIHtcbiAgICBmb3IgKGNvbnN0IHRyaWdnZXIgaW4gdGhpcy5fYWN0aXZlVHJpZ2dlcikge1xuICAgICAgaWYgKHRoaXMuX2FjdGl2ZVRyaWdnZXJbdHJpZ2dlcl0pIHtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIF9nZXRDb25maWcoY29uZmlnKSB7XG4gICAgY29uZmlnID0ge1xuICAgICAgLi4udGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0LFxuICAgICAgLi4uJCh0aGlzLmVsZW1lbnQpLmRhdGEoKSxcbiAgICAgIC4uLnR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnICYmIGNvbmZpZyA/IGNvbmZpZyA6IHt9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBjb25maWcuZGVsYXkgPT09ICdudW1iZXInKSB7XG4gICAgICBjb25maWcuZGVsYXkgPSB7XG4gICAgICAgIHNob3c6IGNvbmZpZy5kZWxheSxcbiAgICAgICAgaGlkZTogY29uZmlnLmRlbGF5XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBjb25maWcudGl0bGUgPT09ICdudW1iZXInKSB7XG4gICAgICBjb25maWcudGl0bGUgPSBjb25maWcudGl0bGUudG9TdHJpbmcoKVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgY29uZmlnLmNvbnRlbnQgPT09ICdudW1iZXInKSB7XG4gICAgICBjb25maWcuY29udGVudCA9IGNvbmZpZy5jb250ZW50LnRvU3RyaW5nKClcbiAgICB9XG5cbiAgICBVdGlsLnR5cGVDaGVja0NvbmZpZyhcbiAgICAgIE5BTUUsXG4gICAgICBjb25maWcsXG4gICAgICB0aGlzLmNvbnN0cnVjdG9yLkRlZmF1bHRUeXBlXG4gICAgKVxuXG4gICAgcmV0dXJuIGNvbmZpZ1xuICB9XG5cbiAgX2dldERlbGVnYXRlQ29uZmlnKCkge1xuICAgIGNvbnN0IGNvbmZpZyA9IHt9XG5cbiAgICBpZiAodGhpcy5jb25maWcpIHtcbiAgICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMuY29uZmlnKSB7XG4gICAgICAgIGlmICh0aGlzLmNvbnN0cnVjdG9yLkRlZmF1bHRba2V5XSAhPT0gdGhpcy5jb25maWdba2V5XSkge1xuICAgICAgICAgIGNvbmZpZ1trZXldID0gdGhpcy5jb25maWdba2V5XVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbmZpZ1xuICB9XG5cbiAgX2NsZWFuVGlwQ2xhc3MoKSB7XG4gICAgY29uc3QgJHRpcCA9ICQodGhpcy5nZXRUaXBFbGVtZW50KCkpXG4gICAgY29uc3QgdGFiQ2xhc3MgPSAkdGlwLmF0dHIoJ2NsYXNzJykubWF0Y2goQlNDTFNfUFJFRklYX1JFR0VYKVxuICAgIGlmICh0YWJDbGFzcyAhPT0gbnVsbCAmJiB0YWJDbGFzcy5sZW5ndGgpIHtcbiAgICAgICR0aXAucmVtb3ZlQ2xhc3ModGFiQ2xhc3Muam9pbignJykpXG4gICAgfVxuICB9XG5cbiAgX2hhbmRsZVBvcHBlclBsYWNlbWVudENoYW5nZShwb3BwZXJEYXRhKSB7XG4gICAgY29uc3QgcG9wcGVySW5zdGFuY2UgPSBwb3BwZXJEYXRhLmluc3RhbmNlXG4gICAgdGhpcy50aXAgPSBwb3BwZXJJbnN0YW5jZS5wb3BwZXJcbiAgICB0aGlzLl9jbGVhblRpcENsYXNzKClcbiAgICB0aGlzLmFkZEF0dGFjaG1lbnRDbGFzcyh0aGlzLl9nZXRBdHRhY2htZW50KHBvcHBlckRhdGEucGxhY2VtZW50KSlcbiAgfVxuXG4gIF9maXhUcmFuc2l0aW9uKCkge1xuICAgIGNvbnN0IHRpcCA9IHRoaXMuZ2V0VGlwRWxlbWVudCgpXG4gICAgY29uc3QgaW5pdENvbmZpZ0FuaW1hdGlvbiA9IHRoaXMuY29uZmlnLmFuaW1hdGlvblxuXG4gICAgaWYgKHRpcC5nZXRBdHRyaWJ1dGUoJ3gtcGxhY2VtZW50JykgIT09IG51bGwpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgICQodGlwKS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuRkFERSlcbiAgICB0aGlzLmNvbmZpZy5hbmltYXRpb24gPSBmYWxzZVxuICAgIHRoaXMuaGlkZSgpXG4gICAgdGhpcy5zaG93KClcbiAgICB0aGlzLmNvbmZpZy5hbmltYXRpb24gPSBpbml0Q29uZmlnQW5pbWF0aW9uXG4gIH1cblxuICAvLyBTdGF0aWNcblxuICBzdGF0aWMgX2pRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBkYXRhID0gJCh0aGlzKS5kYXRhKERBVEFfS0VZKVxuICAgICAgY29uc3QgX2NvbmZpZyA9IHR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnICYmIGNvbmZpZ1xuXG4gICAgICBpZiAoIWRhdGEgJiYgL2Rpc3Bvc2V8aGlkZS8udGVzdChjb25maWcpKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgZGF0YSA9IG5ldyBUb29sdGlwKHRoaXMsIF9jb25maWcpXG4gICAgICAgICQodGhpcykuZGF0YShEQVRBX0tFWSwgZGF0YSlcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZGF0YVtjb25maWddID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYE5vIG1ldGhvZCBuYW1lZCBcIiR7Y29uZmlnfVwiYClcbiAgICAgICAgfVxuICAgICAgICBkYXRhW2NvbmZpZ10oKVxuICAgICAgfVxuICAgIH0pXG4gIH1cbn1cblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIGpRdWVyeVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuJC5mbltOQU1FXSA9IFRvb2x0aXAuX2pRdWVyeUludGVyZmFjZVxuJC5mbltOQU1FXS5Db25zdHJ1Y3RvciA9IFRvb2x0aXBcbiQuZm5bTkFNRV0ubm9Db25mbGljdCA9ICgpID0+IHtcbiAgJC5mbltOQU1FXSA9IEpRVUVSWV9OT19DT05GTElDVFxuICByZXR1cm4gVG9vbHRpcC5falF1ZXJ5SW50ZXJmYWNlXG59XG5cbmV4cG9ydCBkZWZhdWx0IFRvb2x0aXBcbiIsIi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjQuMi4xKTogcG9wb3Zlci5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuaW1wb3J0ICQgZnJvbSAnanF1ZXJ5J1xuaW1wb3J0IFRvb2x0aXAgZnJvbSAnLi90b29sdGlwJ1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29uc3RhbnRzXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jb25zdCBOQU1FICAgICAgICAgICAgICAgID0gJ3BvcG92ZXInXG5jb25zdCBWRVJTSU9OICAgICAgICAgICAgID0gJzQuMi4xJ1xuY29uc3QgREFUQV9LRVkgICAgICAgICAgICA9ICdicy5wb3BvdmVyJ1xuY29uc3QgRVZFTlRfS0VZICAgICAgICAgICA9IGAuJHtEQVRBX0tFWX1gXG5jb25zdCBKUVVFUllfTk9fQ09ORkxJQ1QgID0gJC5mbltOQU1FXVxuY29uc3QgQ0xBU1NfUFJFRklYICAgICAgICA9ICdicy1wb3BvdmVyJ1xuY29uc3QgQlNDTFNfUFJFRklYX1JFR0VYICA9IG5ldyBSZWdFeHAoYChefFxcXFxzKSR7Q0xBU1NfUFJFRklYfVxcXFxTK2AsICdnJylcblxuY29uc3QgRGVmYXVsdCA9IHtcbiAgLi4uVG9vbHRpcC5EZWZhdWx0LFxuICBwbGFjZW1lbnQgOiAncmlnaHQnLFxuICB0cmlnZ2VyICAgOiAnY2xpY2snLFxuICBjb250ZW50ICAgOiAnJyxcbiAgdGVtcGxhdGUgIDogJzxkaXYgY2xhc3M9XCJwb3BvdmVyXCIgcm9sZT1cInRvb2x0aXBcIj4nICtcbiAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJhcnJvd1wiPjwvZGl2PicgK1xuICAgICAgICAgICAgICAnPGgzIGNsYXNzPVwicG9wb3Zlci1oZWFkZXJcIj48L2gzPicgK1xuICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cInBvcG92ZXItYm9keVwiPjwvZGl2PjwvZGl2Pidcbn1cblxuY29uc3QgRGVmYXVsdFR5cGUgPSB7XG4gIC4uLlRvb2x0aXAuRGVmYXVsdFR5cGUsXG4gIGNvbnRlbnQgOiAnKHN0cmluZ3xlbGVtZW50fGZ1bmN0aW9uKSdcbn1cblxuY29uc3QgQ2xhc3NOYW1lID0ge1xuICBGQURFIDogJ2ZhZGUnLFxuICBTSE9XIDogJ3Nob3cnXG59XG5cbmNvbnN0IFNlbGVjdG9yID0ge1xuICBUSVRMRSAgIDogJy5wb3BvdmVyLWhlYWRlcicsXG4gIENPTlRFTlQgOiAnLnBvcG92ZXItYm9keSdcbn1cblxuY29uc3QgRXZlbnQgPSB7XG4gIEhJREUgICAgICAgOiBgaGlkZSR7RVZFTlRfS0VZfWAsXG4gIEhJRERFTiAgICAgOiBgaGlkZGVuJHtFVkVOVF9LRVl9YCxcbiAgU0hPVyAgICAgICA6IGBzaG93JHtFVkVOVF9LRVl9YCxcbiAgU0hPV04gICAgICA6IGBzaG93biR7RVZFTlRfS0VZfWAsXG4gIElOU0VSVEVEICAgOiBgaW5zZXJ0ZWQke0VWRU5UX0tFWX1gLFxuICBDTElDSyAgICAgIDogYGNsaWNrJHtFVkVOVF9LRVl9YCxcbiAgRk9DVVNJTiAgICA6IGBmb2N1c2luJHtFVkVOVF9LRVl9YCxcbiAgRk9DVVNPVVQgICA6IGBmb2N1c291dCR7RVZFTlRfS0VZfWAsXG4gIE1PVVNFRU5URVIgOiBgbW91c2VlbnRlciR7RVZFTlRfS0VZfWAsXG4gIE1PVVNFTEVBVkUgOiBgbW91c2VsZWF2ZSR7RVZFTlRfS0VZfWBcbn1cblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENsYXNzIERlZmluaXRpb25cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNsYXNzIFBvcG92ZXIgZXh0ZW5kcyBUb29sdGlwIHtcbiAgLy8gR2V0dGVyc1xuXG4gIHN0YXRpYyBnZXQgVkVSU0lPTigpIHtcbiAgICByZXR1cm4gVkVSU0lPTlxuICB9XG5cbiAgc3RhdGljIGdldCBEZWZhdWx0KCkge1xuICAgIHJldHVybiBEZWZhdWx0XG4gIH1cblxuICBzdGF0aWMgZ2V0IE5BTUUoKSB7XG4gICAgcmV0dXJuIE5BTUVcbiAgfVxuXG4gIHN0YXRpYyBnZXQgREFUQV9LRVkoKSB7XG4gICAgcmV0dXJuIERBVEFfS0VZXG4gIH1cblxuICBzdGF0aWMgZ2V0IEV2ZW50KCkge1xuICAgIHJldHVybiBFdmVudFxuICB9XG5cbiAgc3RhdGljIGdldCBFVkVOVF9LRVkoKSB7XG4gICAgcmV0dXJuIEVWRU5UX0tFWVxuICB9XG5cbiAgc3RhdGljIGdldCBEZWZhdWx0VHlwZSgpIHtcbiAgICByZXR1cm4gRGVmYXVsdFR5cGVcbiAgfVxuXG4gIC8vIE92ZXJyaWRlc1xuXG4gIGlzV2l0aENvbnRlbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0VGl0bGUoKSB8fCB0aGlzLl9nZXRDb250ZW50KClcbiAgfVxuXG4gIGFkZEF0dGFjaG1lbnRDbGFzcyhhdHRhY2htZW50KSB7XG4gICAgJCh0aGlzLmdldFRpcEVsZW1lbnQoKSkuYWRkQ2xhc3MoYCR7Q0xBU1NfUFJFRklYfS0ke2F0dGFjaG1lbnR9YClcbiAgfVxuXG4gIGdldFRpcEVsZW1lbnQoKSB7XG4gICAgdGhpcy50aXAgPSB0aGlzLnRpcCB8fCAkKHRoaXMuY29uZmlnLnRlbXBsYXRlKVswXVxuICAgIHJldHVybiB0aGlzLnRpcFxuICB9XG5cbiAgc2V0Q29udGVudCgpIHtcbiAgICBjb25zdCAkdGlwID0gJCh0aGlzLmdldFRpcEVsZW1lbnQoKSlcblxuICAgIC8vIFdlIHVzZSBhcHBlbmQgZm9yIGh0bWwgb2JqZWN0cyB0byBtYWludGFpbiBqcyBldmVudHNcbiAgICB0aGlzLnNldEVsZW1lbnRDb250ZW50KCR0aXAuZmluZChTZWxlY3Rvci5USVRMRSksIHRoaXMuZ2V0VGl0bGUoKSlcbiAgICBsZXQgY29udGVudCA9IHRoaXMuX2dldENvbnRlbnQoKVxuICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY29udGVudCA9IGNvbnRlbnQuY2FsbCh0aGlzLmVsZW1lbnQpXG4gICAgfVxuICAgIHRoaXMuc2V0RWxlbWVudENvbnRlbnQoJHRpcC5maW5kKFNlbGVjdG9yLkNPTlRFTlQpLCBjb250ZW50KVxuXG4gICAgJHRpcC5yZW1vdmVDbGFzcyhgJHtDbGFzc05hbWUuRkFERX0gJHtDbGFzc05hbWUuU0hPV31gKVxuICB9XG5cbiAgLy8gUHJpdmF0ZVxuXG4gIF9nZXRDb250ZW50KCkge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWNvbnRlbnQnKSB8fFxuICAgICAgdGhpcy5jb25maWcuY29udGVudFxuICB9XG5cbiAgX2NsZWFuVGlwQ2xhc3MoKSB7XG4gICAgY29uc3QgJHRpcCA9ICQodGhpcy5nZXRUaXBFbGVtZW50KCkpXG4gICAgY29uc3QgdGFiQ2xhc3MgPSAkdGlwLmF0dHIoJ2NsYXNzJykubWF0Y2goQlNDTFNfUFJFRklYX1JFR0VYKVxuICAgIGlmICh0YWJDbGFzcyAhPT0gbnVsbCAmJiB0YWJDbGFzcy5sZW5ndGggPiAwKSB7XG4gICAgICAkdGlwLnJlbW92ZUNsYXNzKHRhYkNsYXNzLmpvaW4oJycpKVxuICAgIH1cbiAgfVxuXG4gIC8vIFN0YXRpY1xuXG4gIHN0YXRpYyBfalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IGRhdGEgPSAkKHRoaXMpLmRhdGEoREFUQV9LRVkpXG4gICAgICBjb25zdCBfY29uZmlnID0gdHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcgPyBjb25maWcgOiBudWxsXG5cbiAgICAgIGlmICghZGF0YSAmJiAvZGlzcG9zZXxoaWRlLy50ZXN0KGNvbmZpZykpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGlmICghZGF0YSkge1xuICAgICAgICBkYXRhID0gbmV3IFBvcG92ZXIodGhpcywgX2NvbmZpZylcbiAgICAgICAgJCh0aGlzKS5kYXRhKERBVEFfS0VZLCBkYXRhKVxuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBkYXRhW2NvbmZpZ10gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgTm8gbWV0aG9kIG5hbWVkIFwiJHtjb25maWd9XCJgKVxuICAgICAgICB9XG4gICAgICAgIGRhdGFbY29uZmlnXSgpXG4gICAgICB9XG4gICAgfSlcbiAgfVxufVxuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogalF1ZXJ5XG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG4kLmZuW05BTUVdID0gUG9wb3Zlci5falF1ZXJ5SW50ZXJmYWNlXG4kLmZuW05BTUVdLkNvbnN0cnVjdG9yID0gUG9wb3ZlclxuJC5mbltOQU1FXS5ub0NvbmZsaWN0ID0gKCkgPT4ge1xuICAkLmZuW05BTUVdID0gSlFVRVJZX05PX0NPTkZMSUNUXG4gIHJldHVybiBQb3BvdmVyLl9qUXVlcnlJbnRlcmZhY2Vcbn1cblxuZXhwb3J0IGRlZmF1bHQgUG9wb3ZlclxuIiwiLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NC4yLjEpOiBzY3JvbGxzcHkuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmltcG9ydCAkIGZyb20gJ2pxdWVyeSdcbmltcG9ydCBVdGlsIGZyb20gJy4vdXRpbCdcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvbnN0YW50c1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuY29uc3QgTkFNRSAgICAgICAgICAgICAgID0gJ3Njcm9sbHNweSdcbmNvbnN0IFZFUlNJT04gICAgICAgICAgICA9ICc0LjIuMSdcbmNvbnN0IERBVEFfS0VZICAgICAgICAgICA9ICdicy5zY3JvbGxzcHknXG5jb25zdCBFVkVOVF9LRVkgICAgICAgICAgPSBgLiR7REFUQV9LRVl9YFxuY29uc3QgREFUQV9BUElfS0VZICAgICAgID0gJy5kYXRhLWFwaSdcbmNvbnN0IEpRVUVSWV9OT19DT05GTElDVCA9ICQuZm5bTkFNRV1cblxuY29uc3QgRGVmYXVsdCA9IHtcbiAgb2Zmc2V0IDogMTAsXG4gIG1ldGhvZCA6ICdhdXRvJyxcbiAgdGFyZ2V0IDogJydcbn1cblxuY29uc3QgRGVmYXVsdFR5cGUgPSB7XG4gIG9mZnNldCA6ICdudW1iZXInLFxuICBtZXRob2QgOiAnc3RyaW5nJyxcbiAgdGFyZ2V0IDogJyhzdHJpbmd8ZWxlbWVudCknXG59XG5cbmNvbnN0IEV2ZW50ID0ge1xuICBBQ1RJVkFURSAgICAgIDogYGFjdGl2YXRlJHtFVkVOVF9LRVl9YCxcbiAgU0NST0xMICAgICAgICA6IGBzY3JvbGwke0VWRU5UX0tFWX1gLFxuICBMT0FEX0RBVEFfQVBJIDogYGxvYWQke0VWRU5UX0tFWX0ke0RBVEFfQVBJX0tFWX1gXG59XG5cbmNvbnN0IENsYXNzTmFtZSA9IHtcbiAgRFJPUERPV05fSVRFTSA6ICdkcm9wZG93bi1pdGVtJyxcbiAgRFJPUERPV05fTUVOVSA6ICdkcm9wZG93bi1tZW51JyxcbiAgQUNUSVZFICAgICAgICA6ICdhY3RpdmUnXG59XG5cbmNvbnN0IFNlbGVjdG9yID0ge1xuICBEQVRBX1NQWSAgICAgICAgOiAnW2RhdGEtc3B5PVwic2Nyb2xsXCJdJyxcbiAgQUNUSVZFICAgICAgICAgIDogJy5hY3RpdmUnLFxuICBOQVZfTElTVF9HUk9VUCAgOiAnLm5hdiwgLmxpc3QtZ3JvdXAnLFxuICBOQVZfTElOS1MgICAgICAgOiAnLm5hdi1saW5rJyxcbiAgTkFWX0lURU1TICAgICAgIDogJy5uYXYtaXRlbScsXG4gIExJU1RfSVRFTVMgICAgICA6ICcubGlzdC1ncm91cC1pdGVtJyxcbiAgRFJPUERPV04gICAgICAgIDogJy5kcm9wZG93bicsXG4gIERST1BET1dOX0lURU1TICA6ICcuZHJvcGRvd24taXRlbScsXG4gIERST1BET1dOX1RPR0dMRSA6ICcuZHJvcGRvd24tdG9nZ2xlJ1xufVxuXG5jb25zdCBPZmZzZXRNZXRob2QgPSB7XG4gIE9GRlNFVCAgIDogJ29mZnNldCcsXG4gIFBPU0lUSU9OIDogJ3Bvc2l0aW9uJ1xufVxuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ2xhc3MgRGVmaW5pdGlvblxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuY2xhc3MgU2Nyb2xsU3B5IHtcbiAgY29uc3RydWN0b3IoZWxlbWVudCwgY29uZmlnKSB7XG4gICAgdGhpcy5fZWxlbWVudCAgICAgICA9IGVsZW1lbnRcbiAgICB0aGlzLl9zY3JvbGxFbGVtZW50ID0gZWxlbWVudC50YWdOYW1lID09PSAnQk9EWScgPyB3aW5kb3cgOiBlbGVtZW50XG4gICAgdGhpcy5fY29uZmlnICAgICAgICA9IHRoaXMuX2dldENvbmZpZyhjb25maWcpXG4gICAgdGhpcy5fc2VsZWN0b3IgICAgICA9IGAke3RoaXMuX2NvbmZpZy50YXJnZXR9ICR7U2VsZWN0b3IuTkFWX0xJTktTfSxgICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYCR7dGhpcy5fY29uZmlnLnRhcmdldH0gJHtTZWxlY3Rvci5MSVNUX0lURU1TfSxgICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYCR7dGhpcy5fY29uZmlnLnRhcmdldH0gJHtTZWxlY3Rvci5EUk9QRE9XTl9JVEVNU31gXG4gICAgdGhpcy5fb2Zmc2V0cyAgICAgICA9IFtdXG4gICAgdGhpcy5fdGFyZ2V0cyAgICAgICA9IFtdXG4gICAgdGhpcy5fYWN0aXZlVGFyZ2V0ICA9IG51bGxcbiAgICB0aGlzLl9zY3JvbGxIZWlnaHQgID0gMFxuXG4gICAgJCh0aGlzLl9zY3JvbGxFbGVtZW50KS5vbihFdmVudC5TQ1JPTEwsIChldmVudCkgPT4gdGhpcy5fcHJvY2VzcyhldmVudCkpXG5cbiAgICB0aGlzLnJlZnJlc2goKVxuICAgIHRoaXMuX3Byb2Nlc3MoKVxuICB9XG5cbiAgLy8gR2V0dGVyc1xuXG4gIHN0YXRpYyBnZXQgVkVSU0lPTigpIHtcbiAgICByZXR1cm4gVkVSU0lPTlxuICB9XG5cbiAgc3RhdGljIGdldCBEZWZhdWx0KCkge1xuICAgIHJldHVybiBEZWZhdWx0XG4gIH1cblxuICAvLyBQdWJsaWNcblxuICByZWZyZXNoKCkge1xuICAgIGNvbnN0IGF1dG9NZXRob2QgPSB0aGlzLl9zY3JvbGxFbGVtZW50ID09PSB0aGlzLl9zY3JvbGxFbGVtZW50LndpbmRvd1xuICAgICAgPyBPZmZzZXRNZXRob2QuT0ZGU0VUIDogT2Zmc2V0TWV0aG9kLlBPU0lUSU9OXG5cbiAgICBjb25zdCBvZmZzZXRNZXRob2QgPSB0aGlzLl9jb25maWcubWV0aG9kID09PSAnYXV0bydcbiAgICAgID8gYXV0b01ldGhvZCA6IHRoaXMuX2NvbmZpZy5tZXRob2RcblxuICAgIGNvbnN0IG9mZnNldEJhc2UgPSBvZmZzZXRNZXRob2QgPT09IE9mZnNldE1ldGhvZC5QT1NJVElPTlxuICAgICAgPyB0aGlzLl9nZXRTY3JvbGxUb3AoKSA6IDBcblxuICAgIHRoaXMuX29mZnNldHMgPSBbXVxuICAgIHRoaXMuX3RhcmdldHMgPSBbXVxuXG4gICAgdGhpcy5fc2Nyb2xsSGVpZ2h0ID0gdGhpcy5fZ2V0U2Nyb2xsSGVpZ2h0KClcblxuICAgIGNvbnN0IHRhcmdldHMgPSBbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5fc2VsZWN0b3IpKVxuXG4gICAgdGFyZ2V0c1xuICAgICAgLm1hcCgoZWxlbWVudCkgPT4ge1xuICAgICAgICBsZXQgdGFyZ2V0XG4gICAgICAgIGNvbnN0IHRhcmdldFNlbGVjdG9yID0gVXRpbC5nZXRTZWxlY3RvckZyb21FbGVtZW50KGVsZW1lbnQpXG5cbiAgICAgICAgaWYgKHRhcmdldFNlbGVjdG9yKSB7XG4gICAgICAgICAgdGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXRTZWxlY3RvcilcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0YXJnZXQpIHtcbiAgICAgICAgICBjb25zdCB0YXJnZXRCQ1IgPSB0YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgICAgICAgICBpZiAodGFyZ2V0QkNSLndpZHRoIHx8IHRhcmdldEJDUi5oZWlnaHQpIHtcbiAgICAgICAgICAgIC8vIFRPRE8gKGZhdCk6IHJlbW92ZSBza2V0Y2ggcmVsaWFuY2Ugb24galF1ZXJ5IHBvc2l0aW9uL29mZnNldFxuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgJCh0YXJnZXQpW29mZnNldE1ldGhvZF0oKS50b3AgKyBvZmZzZXRCYXNlLFxuICAgICAgICAgICAgICB0YXJnZXRTZWxlY3RvclxuICAgICAgICAgICAgXVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgfSlcbiAgICAgIC5maWx0ZXIoKGl0ZW0pID0+IGl0ZW0pXG4gICAgICAuc29ydCgoYSwgYikgPT4gYVswXSAtIGJbMF0pXG4gICAgICAuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICB0aGlzLl9vZmZzZXRzLnB1c2goaXRlbVswXSlcbiAgICAgICAgdGhpcy5fdGFyZ2V0cy5wdXNoKGl0ZW1bMV0pXG4gICAgICB9KVxuICB9XG5cbiAgZGlzcG9zZSgpIHtcbiAgICAkLnJlbW92ZURhdGEodGhpcy5fZWxlbWVudCwgREFUQV9LRVkpXG4gICAgJCh0aGlzLl9zY3JvbGxFbGVtZW50KS5vZmYoRVZFTlRfS0VZKVxuXG4gICAgdGhpcy5fZWxlbWVudCAgICAgICA9IG51bGxcbiAgICB0aGlzLl9zY3JvbGxFbGVtZW50ID0gbnVsbFxuICAgIHRoaXMuX2NvbmZpZyAgICAgICAgPSBudWxsXG4gICAgdGhpcy5fc2VsZWN0b3IgICAgICA9IG51bGxcbiAgICB0aGlzLl9vZmZzZXRzICAgICAgID0gbnVsbFxuICAgIHRoaXMuX3RhcmdldHMgICAgICAgPSBudWxsXG4gICAgdGhpcy5fYWN0aXZlVGFyZ2V0ICA9IG51bGxcbiAgICB0aGlzLl9zY3JvbGxIZWlnaHQgID0gbnVsbFxuICB9XG5cbiAgLy8gUHJpdmF0ZVxuXG4gIF9nZXRDb25maWcoY29uZmlnKSB7XG4gICAgY29uZmlnID0ge1xuICAgICAgLi4uRGVmYXVsdCxcbiAgICAgIC4uLnR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnICYmIGNvbmZpZyA/IGNvbmZpZyA6IHt9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBjb25maWcudGFyZ2V0ICE9PSAnc3RyaW5nJykge1xuICAgICAgbGV0IGlkID0gJChjb25maWcudGFyZ2V0KS5hdHRyKCdpZCcpXG4gICAgICBpZiAoIWlkKSB7XG4gICAgICAgIGlkID0gVXRpbC5nZXRVSUQoTkFNRSlcbiAgICAgICAgJChjb25maWcudGFyZ2V0KS5hdHRyKCdpZCcsIGlkKVxuICAgICAgfVxuICAgICAgY29uZmlnLnRhcmdldCA9IGAjJHtpZH1gXG4gICAgfVxuXG4gICAgVXRpbC50eXBlQ2hlY2tDb25maWcoTkFNRSwgY29uZmlnLCBEZWZhdWx0VHlwZSlcblxuICAgIHJldHVybiBjb25maWdcbiAgfVxuXG4gIF9nZXRTY3JvbGxUb3AoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Njcm9sbEVsZW1lbnQgPT09IHdpbmRvd1xuICAgICAgPyB0aGlzLl9zY3JvbGxFbGVtZW50LnBhZ2VZT2Zmc2V0IDogdGhpcy5fc2Nyb2xsRWxlbWVudC5zY3JvbGxUb3BcbiAgfVxuXG4gIF9nZXRTY3JvbGxIZWlnaHQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Njcm9sbEVsZW1lbnQuc2Nyb2xsSGVpZ2h0IHx8IE1hdGgubWF4KFxuICAgICAgZG9jdW1lbnQuYm9keS5zY3JvbGxIZWlnaHQsXG4gICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsSGVpZ2h0XG4gICAgKVxuICB9XG5cbiAgX2dldE9mZnNldEhlaWdodCgpIHtcbiAgICByZXR1cm4gdGhpcy5fc2Nyb2xsRWxlbWVudCA9PT0gd2luZG93XG4gICAgICA/IHdpbmRvdy5pbm5lckhlaWdodCA6IHRoaXMuX3Njcm9sbEVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0XG4gIH1cblxuICBfcHJvY2VzcygpIHtcbiAgICBjb25zdCBzY3JvbGxUb3AgICAgPSB0aGlzLl9nZXRTY3JvbGxUb3AoKSArIHRoaXMuX2NvbmZpZy5vZmZzZXRcbiAgICBjb25zdCBzY3JvbGxIZWlnaHQgPSB0aGlzLl9nZXRTY3JvbGxIZWlnaHQoKVxuICAgIGNvbnN0IG1heFNjcm9sbCAgICA9IHRoaXMuX2NvbmZpZy5vZmZzZXQgK1xuICAgICAgc2Nyb2xsSGVpZ2h0IC1cbiAgICAgIHRoaXMuX2dldE9mZnNldEhlaWdodCgpXG5cbiAgICBpZiAodGhpcy5fc2Nyb2xsSGVpZ2h0ICE9PSBzY3JvbGxIZWlnaHQpIHtcbiAgICAgIHRoaXMucmVmcmVzaCgpXG4gICAgfVxuXG4gICAgaWYgKHNjcm9sbFRvcCA+PSBtYXhTY3JvbGwpIHtcbiAgICAgIGNvbnN0IHRhcmdldCA9IHRoaXMuX3RhcmdldHNbdGhpcy5fdGFyZ2V0cy5sZW5ndGggLSAxXVxuXG4gICAgICBpZiAodGhpcy5fYWN0aXZlVGFyZ2V0ICE9PSB0YXJnZXQpIHtcbiAgICAgICAgdGhpcy5fYWN0aXZhdGUodGFyZ2V0KVxuICAgICAgfVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2FjdGl2ZVRhcmdldCAmJiBzY3JvbGxUb3AgPCB0aGlzLl9vZmZzZXRzWzBdICYmIHRoaXMuX29mZnNldHNbMF0gPiAwKSB7XG4gICAgICB0aGlzLl9hY3RpdmVUYXJnZXQgPSBudWxsXG4gICAgICB0aGlzLl9jbGVhcigpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCBvZmZzZXRMZW5ndGggPSB0aGlzLl9vZmZzZXRzLmxlbmd0aFxuICAgIGZvciAobGV0IGkgPSBvZmZzZXRMZW5ndGg7IGktLTspIHtcbiAgICAgIGNvbnN0IGlzQWN0aXZlVGFyZ2V0ID0gdGhpcy5fYWN0aXZlVGFyZ2V0ICE9PSB0aGlzLl90YXJnZXRzW2ldICYmXG4gICAgICAgICAgc2Nyb2xsVG9wID49IHRoaXMuX29mZnNldHNbaV0gJiZcbiAgICAgICAgICAodHlwZW9mIHRoaXMuX29mZnNldHNbaSArIDFdID09PSAndW5kZWZpbmVkJyB8fFxuICAgICAgICAgICAgICBzY3JvbGxUb3AgPCB0aGlzLl9vZmZzZXRzW2kgKyAxXSlcblxuICAgICAgaWYgKGlzQWN0aXZlVGFyZ2V0KSB7XG4gICAgICAgIHRoaXMuX2FjdGl2YXRlKHRoaXMuX3RhcmdldHNbaV0pXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgX2FjdGl2YXRlKHRhcmdldCkge1xuICAgIHRoaXMuX2FjdGl2ZVRhcmdldCA9IHRhcmdldFxuXG4gICAgdGhpcy5fY2xlYXIoKVxuXG4gICAgY29uc3QgcXVlcmllcyA9IHRoaXMuX3NlbGVjdG9yXG4gICAgICAuc3BsaXQoJywnKVxuICAgICAgLm1hcCgoc2VsZWN0b3IpID0+IGAke3NlbGVjdG9yfVtkYXRhLXRhcmdldD1cIiR7dGFyZ2V0fVwiXSwke3NlbGVjdG9yfVtocmVmPVwiJHt0YXJnZXR9XCJdYClcblxuICAgIGNvbnN0ICRsaW5rID0gJChbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwocXVlcmllcy5qb2luKCcsJykpKSlcblxuICAgIGlmICgkbGluay5oYXNDbGFzcyhDbGFzc05hbWUuRFJPUERPV05fSVRFTSkpIHtcbiAgICAgICRsaW5rLmNsb3Nlc3QoU2VsZWN0b3IuRFJPUERPV04pLmZpbmQoU2VsZWN0b3IuRFJPUERPV05fVE9HR0xFKS5hZGRDbGFzcyhDbGFzc05hbWUuQUNUSVZFKVxuICAgICAgJGxpbmsuYWRkQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSlcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU2V0IHRyaWdnZXJlZCBsaW5rIGFzIGFjdGl2ZVxuICAgICAgJGxpbmsuYWRkQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSlcbiAgICAgIC8vIFNldCB0cmlnZ2VyZWQgbGlua3MgcGFyZW50cyBhcyBhY3RpdmVcbiAgICAgIC8vIFdpdGggYm90aCA8dWw+IGFuZCA8bmF2PiBtYXJrdXAgYSBwYXJlbnQgaXMgdGhlIHByZXZpb3VzIHNpYmxpbmcgb2YgYW55IG5hdiBhbmNlc3RvclxuICAgICAgJGxpbmsucGFyZW50cyhTZWxlY3Rvci5OQVZfTElTVF9HUk9VUCkucHJldihgJHtTZWxlY3Rvci5OQVZfTElOS1N9LCAke1NlbGVjdG9yLkxJU1RfSVRFTVN9YCkuYWRkQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSlcbiAgICAgIC8vIEhhbmRsZSBzcGVjaWFsIGNhc2Ugd2hlbiAubmF2LWxpbmsgaXMgaW5zaWRlIC5uYXYtaXRlbVxuICAgICAgJGxpbmsucGFyZW50cyhTZWxlY3Rvci5OQVZfTElTVF9HUk9VUCkucHJldihTZWxlY3Rvci5OQVZfSVRFTVMpLmNoaWxkcmVuKFNlbGVjdG9yLk5BVl9MSU5LUykuYWRkQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSlcbiAgICB9XG5cbiAgICAkKHRoaXMuX3Njcm9sbEVsZW1lbnQpLnRyaWdnZXIoRXZlbnQuQUNUSVZBVEUsIHtcbiAgICAgIHJlbGF0ZWRUYXJnZXQ6IHRhcmdldFxuICAgIH0pXG4gIH1cblxuICBfY2xlYXIoKSB7XG4gICAgW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHRoaXMuX3NlbGVjdG9yKSlcbiAgICAgIC5maWx0ZXIoKG5vZGUpID0+IG5vZGUuY2xhc3NMaXN0LmNvbnRhaW5zKENsYXNzTmFtZS5BQ1RJVkUpKVxuICAgICAgLmZvckVhY2goKG5vZGUpID0+IG5vZGUuY2xhc3NMaXN0LnJlbW92ZShDbGFzc05hbWUuQUNUSVZFKSlcbiAgfVxuXG4gIC8vIFN0YXRpY1xuXG4gIHN0YXRpYyBfalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IGRhdGEgPSAkKHRoaXMpLmRhdGEoREFUQV9LRVkpXG4gICAgICBjb25zdCBfY29uZmlnID0gdHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcgJiYgY29uZmlnXG5cbiAgICAgIGlmICghZGF0YSkge1xuICAgICAgICBkYXRhID0gbmV3IFNjcm9sbFNweSh0aGlzLCBfY29uZmlnKVxuICAgICAgICAkKHRoaXMpLmRhdGEoREFUQV9LRVksIGRhdGEpXG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAodHlwZW9mIGRhdGFbY29uZmlnXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBObyBtZXRob2QgbmFtZWQgXCIke2NvbmZpZ31cImApXG4gICAgICAgIH1cbiAgICAgICAgZGF0YVtjb25maWddKClcbiAgICAgIH1cbiAgICB9KVxuICB9XG59XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBEYXRhIEFwaSBpbXBsZW1lbnRhdGlvblxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuJCh3aW5kb3cpLm9uKEV2ZW50LkxPQURfREFUQV9BUEksICgpID0+IHtcbiAgY29uc3Qgc2Nyb2xsU3B5cyA9IFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChTZWxlY3Rvci5EQVRBX1NQWSkpXG4gIGNvbnN0IHNjcm9sbFNweXNMZW5ndGggPSBzY3JvbGxTcHlzLmxlbmd0aFxuXG4gIGZvciAobGV0IGkgPSBzY3JvbGxTcHlzTGVuZ3RoOyBpLS07KSB7XG4gICAgY29uc3QgJHNweSA9ICQoc2Nyb2xsU3B5c1tpXSlcbiAgICBTY3JvbGxTcHkuX2pRdWVyeUludGVyZmFjZS5jYWxsKCRzcHksICRzcHkuZGF0YSgpKVxuICB9XG59KVxuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogalF1ZXJ5XG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG4kLmZuW05BTUVdID0gU2Nyb2xsU3B5Ll9qUXVlcnlJbnRlcmZhY2VcbiQuZm5bTkFNRV0uQ29uc3RydWN0b3IgPSBTY3JvbGxTcHlcbiQuZm5bTkFNRV0ubm9Db25mbGljdCA9ICgpID0+IHtcbiAgJC5mbltOQU1FXSA9IEpRVUVSWV9OT19DT05GTElDVFxuICByZXR1cm4gU2Nyb2xsU3B5Ll9qUXVlcnlJbnRlcmZhY2Vcbn1cblxuZXhwb3J0IGRlZmF1bHQgU2Nyb2xsU3B5XG4iLCIvKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY0LjIuMSk6IHRhYi5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuaW1wb3J0ICQgZnJvbSAnanF1ZXJ5J1xuaW1wb3J0IFV0aWwgZnJvbSAnLi91dGlsJ1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29uc3RhbnRzXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jb25zdCBOQU1FICAgICAgICAgICAgICAgPSAndGFiJ1xuY29uc3QgVkVSU0lPTiAgICAgICAgICAgID0gJzQuMi4xJ1xuY29uc3QgREFUQV9LRVkgICAgICAgICAgID0gJ2JzLnRhYidcbmNvbnN0IEVWRU5UX0tFWSAgICAgICAgICA9IGAuJHtEQVRBX0tFWX1gXG5jb25zdCBEQVRBX0FQSV9LRVkgICAgICAgPSAnLmRhdGEtYXBpJ1xuY29uc3QgSlFVRVJZX05PX0NPTkZMSUNUID0gJC5mbltOQU1FXVxuXG5jb25zdCBFdmVudCA9IHtcbiAgSElERSAgICAgICAgICAgOiBgaGlkZSR7RVZFTlRfS0VZfWAsXG4gIEhJRERFTiAgICAgICAgIDogYGhpZGRlbiR7RVZFTlRfS0VZfWAsXG4gIFNIT1cgICAgICAgICAgIDogYHNob3cke0VWRU5UX0tFWX1gLFxuICBTSE9XTiAgICAgICAgICA6IGBzaG93biR7RVZFTlRfS0VZfWAsXG4gIENMSUNLX0RBVEFfQVBJIDogYGNsaWNrJHtFVkVOVF9LRVl9JHtEQVRBX0FQSV9LRVl9YFxufVxuXG5jb25zdCBDbGFzc05hbWUgPSB7XG4gIERST1BET1dOX01FTlUgOiAnZHJvcGRvd24tbWVudScsXG4gIEFDVElWRSAgICAgICAgOiAnYWN0aXZlJyxcbiAgRElTQUJMRUQgICAgICA6ICdkaXNhYmxlZCcsXG4gIEZBREUgICAgICAgICAgOiAnZmFkZScsXG4gIFNIT1cgICAgICAgICAgOiAnc2hvdydcbn1cblxuY29uc3QgU2VsZWN0b3IgPSB7XG4gIERST1BET1dOICAgICAgICAgICAgICA6ICcuZHJvcGRvd24nLFxuICBOQVZfTElTVF9HUk9VUCAgICAgICAgOiAnLm5hdiwgLmxpc3QtZ3JvdXAnLFxuICBBQ1RJVkUgICAgICAgICAgICAgICAgOiAnLmFjdGl2ZScsXG4gIEFDVElWRV9VTCAgICAgICAgICAgICA6ICc+IGxpID4gLmFjdGl2ZScsXG4gIERBVEFfVE9HR0xFICAgICAgICAgICA6ICdbZGF0YS10b2dnbGU9XCJ0YWJcIl0sIFtkYXRhLXRvZ2dsZT1cInBpbGxcIl0sIFtkYXRhLXRvZ2dsZT1cImxpc3RcIl0nLFxuICBEUk9QRE9XTl9UT0dHTEUgICAgICAgOiAnLmRyb3Bkb3duLXRvZ2dsZScsXG4gIERST1BET1dOX0FDVElWRV9DSElMRCA6ICc+IC5kcm9wZG93bi1tZW51IC5hY3RpdmUnXG59XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDbGFzcyBEZWZpbml0aW9uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jbGFzcyBUYWIge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50KSB7XG4gICAgdGhpcy5fZWxlbWVudCA9IGVsZW1lbnRcbiAgfVxuXG4gIC8vIEdldHRlcnNcblxuICBzdGF0aWMgZ2V0IFZFUlNJT04oKSB7XG4gICAgcmV0dXJuIFZFUlNJT05cbiAgfVxuXG4gIC8vIFB1YmxpY1xuXG4gIHNob3coKSB7XG4gICAgaWYgKHRoaXMuX2VsZW1lbnQucGFyZW50Tm9kZSAmJlxuICAgICAgICB0aGlzLl9lbGVtZW50LnBhcmVudE5vZGUubm9kZVR5cGUgPT09IE5vZGUuRUxFTUVOVF9OT0RFICYmXG4gICAgICAgICQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSkgfHxcbiAgICAgICAgJCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuRElTQUJMRUQpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBsZXQgdGFyZ2V0XG4gICAgbGV0IHByZXZpb3VzXG4gICAgY29uc3QgbGlzdEVsZW1lbnQgPSAkKHRoaXMuX2VsZW1lbnQpLmNsb3Nlc3QoU2VsZWN0b3IuTkFWX0xJU1RfR1JPVVApWzBdXG4gICAgY29uc3Qgc2VsZWN0b3IgPSBVdGlsLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQodGhpcy5fZWxlbWVudClcblxuICAgIGlmIChsaXN0RWxlbWVudCkge1xuICAgICAgY29uc3QgaXRlbVNlbGVjdG9yID0gbGlzdEVsZW1lbnQubm9kZU5hbWUgPT09ICdVTCcgfHwgbGlzdEVsZW1lbnQubm9kZU5hbWUgPT09ICdPTCcgPyBTZWxlY3Rvci5BQ1RJVkVfVUwgOiBTZWxlY3Rvci5BQ1RJVkVcbiAgICAgIHByZXZpb3VzID0gJC5tYWtlQXJyYXkoJChsaXN0RWxlbWVudCkuZmluZChpdGVtU2VsZWN0b3IpKVxuICAgICAgcHJldmlvdXMgPSBwcmV2aW91c1twcmV2aW91cy5sZW5ndGggLSAxXVxuICAgIH1cblxuICAgIGNvbnN0IGhpZGVFdmVudCA9ICQuRXZlbnQoRXZlbnQuSElERSwge1xuICAgICAgcmVsYXRlZFRhcmdldDogdGhpcy5fZWxlbWVudFxuICAgIH0pXG5cbiAgICBjb25zdCBzaG93RXZlbnQgPSAkLkV2ZW50KEV2ZW50LlNIT1csIHtcbiAgICAgIHJlbGF0ZWRUYXJnZXQ6IHByZXZpb3VzXG4gICAgfSlcblxuICAgIGlmIChwcmV2aW91cykge1xuICAgICAgJChwcmV2aW91cykudHJpZ2dlcihoaWRlRXZlbnQpXG4gICAgfVxuXG4gICAgJCh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKHNob3dFdmVudClcblxuICAgIGlmIChzaG93RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgfHxcbiAgICAgICAgaGlkZUV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgIHRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpXG4gICAgfVxuXG4gICAgdGhpcy5fYWN0aXZhdGUoXG4gICAgICB0aGlzLl9lbGVtZW50LFxuICAgICAgbGlzdEVsZW1lbnRcbiAgICApXG5cbiAgICBjb25zdCBjb21wbGV0ZSA9ICgpID0+IHtcbiAgICAgIGNvbnN0IGhpZGRlbkV2ZW50ID0gJC5FdmVudChFdmVudC5ISURERU4sIHtcbiAgICAgICAgcmVsYXRlZFRhcmdldDogdGhpcy5fZWxlbWVudFxuICAgICAgfSlcblxuICAgICAgY29uc3Qgc2hvd25FdmVudCA9ICQuRXZlbnQoRXZlbnQuU0hPV04sIHtcbiAgICAgICAgcmVsYXRlZFRhcmdldDogcHJldmlvdXNcbiAgICAgIH0pXG5cbiAgICAgICQocHJldmlvdXMpLnRyaWdnZXIoaGlkZGVuRXZlbnQpXG4gICAgICAkKHRoaXMuX2VsZW1lbnQpLnRyaWdnZXIoc2hvd25FdmVudClcbiAgICB9XG5cbiAgICBpZiAodGFyZ2V0KSB7XG4gICAgICB0aGlzLl9hY3RpdmF0ZSh0YXJnZXQsIHRhcmdldC5wYXJlbnROb2RlLCBjb21wbGV0ZSlcbiAgICB9IGVsc2Uge1xuICAgICAgY29tcGxldGUoKVxuICAgIH1cbiAgfVxuXG4gIGRpc3Bvc2UoKSB7XG4gICAgJC5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsIERBVEFfS0VZKVxuICAgIHRoaXMuX2VsZW1lbnQgPSBudWxsXG4gIH1cblxuICAvLyBQcml2YXRlXG5cbiAgX2FjdGl2YXRlKGVsZW1lbnQsIGNvbnRhaW5lciwgY2FsbGJhY2spIHtcbiAgICBjb25zdCBhY3RpdmVFbGVtZW50cyA9IGNvbnRhaW5lciAmJiAoY29udGFpbmVyLm5vZGVOYW1lID09PSAnVUwnIHx8IGNvbnRhaW5lci5ub2RlTmFtZSA9PT0gJ09MJylcbiAgICAgID8gJChjb250YWluZXIpLmZpbmQoU2VsZWN0b3IuQUNUSVZFX1VMKVxuICAgICAgOiAkKGNvbnRhaW5lcikuY2hpbGRyZW4oU2VsZWN0b3IuQUNUSVZFKVxuXG4gICAgY29uc3QgYWN0aXZlID0gYWN0aXZlRWxlbWVudHNbMF1cbiAgICBjb25zdCBpc1RyYW5zaXRpb25pbmcgPSBjYWxsYmFjayAmJiAoYWN0aXZlICYmICQoYWN0aXZlKS5oYXNDbGFzcyhDbGFzc05hbWUuRkFERSkpXG4gICAgY29uc3QgY29tcGxldGUgPSAoKSA9PiB0aGlzLl90cmFuc2l0aW9uQ29tcGxldGUoXG4gICAgICBlbGVtZW50LFxuICAgICAgYWN0aXZlLFxuICAgICAgY2FsbGJhY2tcbiAgICApXG5cbiAgICBpZiAoYWN0aXZlICYmIGlzVHJhbnNpdGlvbmluZykge1xuICAgICAgY29uc3QgdHJhbnNpdGlvbkR1cmF0aW9uID0gVXRpbC5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudChhY3RpdmUpXG5cbiAgICAgICQoYWN0aXZlKVxuICAgICAgICAucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpXG4gICAgICAgIC5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgY29tcGxldGUpXG4gICAgICAgIC5lbXVsYXRlVHJhbnNpdGlvbkVuZCh0cmFuc2l0aW9uRHVyYXRpb24pXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbXBsZXRlKClcbiAgICB9XG4gIH1cblxuICBfdHJhbnNpdGlvbkNvbXBsZXRlKGVsZW1lbnQsIGFjdGl2ZSwgY2FsbGJhY2spIHtcbiAgICBpZiAoYWN0aXZlKSB7XG4gICAgICAkKGFjdGl2ZSkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSlcblxuICAgICAgY29uc3QgZHJvcGRvd25DaGlsZCA9ICQoYWN0aXZlLnBhcmVudE5vZGUpLmZpbmQoXG4gICAgICAgIFNlbGVjdG9yLkRST1BET1dOX0FDVElWRV9DSElMRFxuICAgICAgKVswXVxuXG4gICAgICBpZiAoZHJvcGRvd25DaGlsZCkge1xuICAgICAgICAkKGRyb3Bkb3duQ2hpbGQpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5BQ1RJVkUpXG4gICAgICB9XG5cbiAgICAgIGlmIChhY3RpdmUuZ2V0QXR0cmlidXRlKCdyb2xlJykgPT09ICd0YWInKSB7XG4gICAgICAgIGFjdGl2ZS5zZXRBdHRyaWJ1dGUoJ2FyaWEtc2VsZWN0ZWQnLCBmYWxzZSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICAkKGVsZW1lbnQpLmFkZENsYXNzKENsYXNzTmFtZS5BQ1RJVkUpXG4gICAgaWYgKGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdyb2xlJykgPT09ICd0YWInKSB7XG4gICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1zZWxlY3RlZCcsIHRydWUpXG4gICAgfVxuXG4gICAgVXRpbC5yZWZsb3coZWxlbWVudClcbiAgICAkKGVsZW1lbnQpLmFkZENsYXNzKENsYXNzTmFtZS5TSE9XKVxuXG4gICAgaWYgKGVsZW1lbnQucGFyZW50Tm9kZSAmJiAkKGVsZW1lbnQucGFyZW50Tm9kZSkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkRST1BET1dOX01FTlUpKSB7XG4gICAgICBjb25zdCBkcm9wZG93bkVsZW1lbnQgPSAkKGVsZW1lbnQpLmNsb3Nlc3QoU2VsZWN0b3IuRFJPUERPV04pWzBdXG5cbiAgICAgIGlmIChkcm9wZG93bkVsZW1lbnQpIHtcbiAgICAgICAgY29uc3QgZHJvcGRvd25Ub2dnbGVMaXN0ID0gW10uc2xpY2UuY2FsbChkcm9wZG93bkVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChTZWxlY3Rvci5EUk9QRE9XTl9UT0dHTEUpKVxuXG4gICAgICAgICQoZHJvcGRvd25Ub2dnbGVMaXN0KS5hZGRDbGFzcyhDbGFzc05hbWUuQUNUSVZFKVxuICAgICAgfVxuXG4gICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsIHRydWUpXG4gICAgfVxuXG4gICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICBjYWxsYmFjaygpXG4gICAgfVxuICB9XG5cbiAgLy8gU3RhdGljXG5cbiAgc3RhdGljIF9qUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCAkdGhpcyA9ICQodGhpcylcbiAgICAgIGxldCBkYXRhID0gJHRoaXMuZGF0YShEQVRBX0tFWSlcblxuICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgIGRhdGEgPSBuZXcgVGFiKHRoaXMpXG4gICAgICAgICR0aGlzLmRhdGEoREFUQV9LRVksIGRhdGEpXG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAodHlwZW9mIGRhdGFbY29uZmlnXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBObyBtZXRob2QgbmFtZWQgXCIke2NvbmZpZ31cImApXG4gICAgICAgIH1cbiAgICAgICAgZGF0YVtjb25maWddKClcbiAgICAgIH1cbiAgICB9KVxuICB9XG59XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBEYXRhIEFwaSBpbXBsZW1lbnRhdGlvblxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuJChkb2N1bWVudClcbiAgLm9uKEV2ZW50LkNMSUNLX0RBVEFfQVBJLCBTZWxlY3Rvci5EQVRBX1RPR0dMRSwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIFRhYi5falF1ZXJ5SW50ZXJmYWNlLmNhbGwoJCh0aGlzKSwgJ3Nob3cnKVxuICB9KVxuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogalF1ZXJ5XG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG4kLmZuW05BTUVdID0gVGFiLl9qUXVlcnlJbnRlcmZhY2VcbiQuZm5bTkFNRV0uQ29uc3RydWN0b3IgPSBUYWJcbiQuZm5bTkFNRV0ubm9Db25mbGljdCA9ICgpID0+IHtcbiAgJC5mbltOQU1FXSA9IEpRVUVSWV9OT19DT05GTElDVFxuICByZXR1cm4gVGFiLl9qUXVlcnlJbnRlcmZhY2Vcbn1cblxuZXhwb3J0IGRlZmF1bHQgVGFiXG4iLCIvKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY0LjIuMSk6IHRvYXN0LmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5pbXBvcnQgJCBmcm9tICdqcXVlcnknXG5pbXBvcnQgVXRpbCBmcm9tICcuL3V0aWwnXG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb25zdGFudHNcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNvbnN0IE5BTUUgICAgICAgICAgICAgICA9ICd0b2FzdCdcbmNvbnN0IFZFUlNJT04gICAgICAgICAgICA9ICc0LjIuMSdcbmNvbnN0IERBVEFfS0VZICAgICAgICAgICA9ICdicy50b2FzdCdcbmNvbnN0IEVWRU5UX0tFWSAgICAgICAgICA9IGAuJHtEQVRBX0tFWX1gXG5jb25zdCBKUVVFUllfTk9fQ09ORkxJQ1QgPSAkLmZuW05BTUVdXG5cbmNvbnN0IEV2ZW50ID0ge1xuICBDTElDS19ESVNNSVNTIDogYGNsaWNrLmRpc21pc3Mke0VWRU5UX0tFWX1gLFxuICBISURFICAgICAgICAgIDogYGhpZGUke0VWRU5UX0tFWX1gLFxuICBISURERU4gICAgICAgIDogYGhpZGRlbiR7RVZFTlRfS0VZfWAsXG4gIFNIT1cgICAgICAgICAgOiBgc2hvdyR7RVZFTlRfS0VZfWAsXG4gIFNIT1dOICAgICAgICAgOiBgc2hvd24ke0VWRU5UX0tFWX1gXG59XG5cbmNvbnN0IENsYXNzTmFtZSA9IHtcbiAgRkFERSAgICA6ICdmYWRlJyxcbiAgSElERSAgICA6ICdoaWRlJyxcbiAgU0hPVyAgICA6ICdzaG93JyxcbiAgU0hPV0lORyA6ICdzaG93aW5nJ1xufVxuXG5jb25zdCBEZWZhdWx0VHlwZSA9IHtcbiAgYW5pbWF0aW9uIDogJ2Jvb2xlYW4nLFxuICBhdXRvaGlkZSAgOiAnYm9vbGVhbicsXG4gIGRlbGF5ICAgICA6ICdudW1iZXInXG59XG5cbmNvbnN0IERlZmF1bHQgPSB7XG4gIGFuaW1hdGlvbiA6IHRydWUsXG4gIGF1dG9oaWRlICA6IHRydWUsXG4gIGRlbGF5ICAgICA6IDUwMFxufVxuXG5jb25zdCBTZWxlY3RvciA9IHtcbiAgREFUQV9ESVNNSVNTIDogJ1tkYXRhLWRpc21pc3M9XCJ0b2FzdFwiXSdcbn1cblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENsYXNzIERlZmluaXRpb25cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNsYXNzIFRvYXN0IHtcbiAgY29uc3RydWN0b3IoZWxlbWVudCwgY29uZmlnKSB7XG4gICAgdGhpcy5fZWxlbWVudCA9IGVsZW1lbnRcbiAgICB0aGlzLl9jb25maWcgID0gdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZylcbiAgICB0aGlzLl90aW1lb3V0ID0gbnVsbFxuICAgIHRoaXMuX3NldExpc3RlbmVycygpXG4gIH1cblxuICAvLyBHZXR0ZXJzXG5cbiAgc3RhdGljIGdldCBWRVJTSU9OKCkge1xuICAgIHJldHVybiBWRVJTSU9OXG4gIH1cblxuICBzdGF0aWMgZ2V0IERlZmF1bHRUeXBlKCkge1xuICAgIHJldHVybiBEZWZhdWx0VHlwZVxuICB9XG5cbiAgLy8gUHVibGljXG5cbiAgc2hvdygpIHtcbiAgICAkKHRoaXMuX2VsZW1lbnQpLnRyaWdnZXIoRXZlbnQuU0hPVylcblxuICAgIGlmICh0aGlzLl9jb25maWcuYW5pbWF0aW9uKSB7XG4gICAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoQ2xhc3NOYW1lLkZBREUpXG4gICAgfVxuXG4gICAgY29uc3QgY29tcGxldGUgPSAoKSA9PiB7XG4gICAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoQ2xhc3NOYW1lLlNIT1dJTkcpXG4gICAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoQ2xhc3NOYW1lLlNIT1cpXG5cbiAgICAgICQodGhpcy5fZWxlbWVudCkudHJpZ2dlcihFdmVudC5TSE9XTilcblxuICAgICAgaWYgKHRoaXMuX2NvbmZpZy5hdXRvaGlkZSkge1xuICAgICAgICB0aGlzLmhpZGUoKVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShDbGFzc05hbWUuSElERSlcbiAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoQ2xhc3NOYW1lLlNIT1dJTkcpXG4gICAgaWYgKHRoaXMuX2NvbmZpZy5hbmltYXRpb24pIHtcbiAgICAgIGNvbnN0IHRyYW5zaXRpb25EdXJhdGlvbiA9IFV0aWwuZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQodGhpcy5fZWxlbWVudClcblxuICAgICAgJCh0aGlzLl9lbGVtZW50KVxuICAgICAgICAub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGNvbXBsZXRlKVxuICAgICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQodHJhbnNpdGlvbkR1cmF0aW9uKVxuICAgIH0gZWxzZSB7XG4gICAgICBjb21wbGV0ZSgpXG4gICAgfVxuICB9XG5cbiAgaGlkZSh3aXRob3V0VGltZW91dCkge1xuICAgIGlmICghdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoQ2xhc3NOYW1lLlNIT1cpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAkKHRoaXMuX2VsZW1lbnQpLnRyaWdnZXIoRXZlbnQuSElERSlcblxuICAgIGlmICh3aXRob3V0VGltZW91dCkge1xuICAgICAgdGhpcy5fY2xvc2UoKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl90aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRoaXMuX2Nsb3NlKClcbiAgICAgIH0sIHRoaXMuX2NvbmZpZy5kZWxheSlcbiAgICB9XG4gIH1cblxuICBkaXNwb3NlKCkge1xuICAgIGNsZWFyVGltZW91dCh0aGlzLl90aW1lb3V0KVxuICAgIHRoaXMuX3RpbWVvdXQgPSBudWxsXG5cbiAgICBpZiAodGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoQ2xhc3NOYW1lLlNIT1cpKSB7XG4gICAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoQ2xhc3NOYW1lLlNIT1cpXG4gICAgfVxuXG4gICAgJCh0aGlzLl9lbGVtZW50KS5vZmYoRXZlbnQuQ0xJQ0tfRElTTUlTUylcblxuICAgICQucmVtb3ZlRGF0YSh0aGlzLl9lbGVtZW50LCBEQVRBX0tFWSlcbiAgICB0aGlzLl9lbGVtZW50ID0gbnVsbFxuICAgIHRoaXMuX2NvbmZpZyAgPSBudWxsXG4gIH1cblxuICAvLyBQcml2YXRlXG5cbiAgX2dldENvbmZpZyhjb25maWcpIHtcbiAgICBjb25maWcgPSB7XG4gICAgICAuLi5EZWZhdWx0LFxuICAgICAgLi4uJCh0aGlzLl9lbGVtZW50KS5kYXRhKCksXG4gICAgICAuLi50eXBlb2YgY29uZmlnID09PSAnb2JqZWN0JyAmJiBjb25maWcgPyBjb25maWcgOiB7fVxuICAgIH1cblxuICAgIFV0aWwudHlwZUNoZWNrQ29uZmlnKFxuICAgICAgTkFNRSxcbiAgICAgIGNvbmZpZyxcbiAgICAgIHRoaXMuY29uc3RydWN0b3IuRGVmYXVsdFR5cGVcbiAgICApXG5cbiAgICByZXR1cm4gY29uZmlnXG4gIH1cblxuICBfc2V0TGlzdGVuZXJzKCkge1xuICAgICQodGhpcy5fZWxlbWVudCkub24oXG4gICAgICBFdmVudC5DTElDS19ESVNNSVNTLFxuICAgICAgU2VsZWN0b3IuREFUQV9ESVNNSVNTLFxuICAgICAgKCkgPT4gdGhpcy5oaWRlKHRydWUpXG4gICAgKVxuICB9XG5cbiAgX2Nsb3NlKCkge1xuICAgIGNvbnN0IGNvbXBsZXRlID0gKCkgPT4ge1xuICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKENsYXNzTmFtZS5ISURFKVxuICAgICAgJCh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKEV2ZW50LkhJRERFTilcbiAgICB9XG5cbiAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoQ2xhc3NOYW1lLlNIT1cpXG4gICAgaWYgKHRoaXMuX2NvbmZpZy5hbmltYXRpb24pIHtcbiAgICAgIGNvbnN0IHRyYW5zaXRpb25EdXJhdGlvbiA9IFV0aWwuZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQodGhpcy5fZWxlbWVudClcblxuICAgICAgJCh0aGlzLl9lbGVtZW50KVxuICAgICAgICAub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGNvbXBsZXRlKVxuICAgICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQodHJhbnNpdGlvbkR1cmF0aW9uKVxuICAgIH0gZWxzZSB7XG4gICAgICBjb21wbGV0ZSgpXG4gICAgfVxuICB9XG5cbiAgLy8gU3RhdGljXG5cbiAgc3RhdGljIF9qUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCAkZWxlbWVudCA9ICQodGhpcylcbiAgICAgIGxldCBkYXRhICAgICAgID0gJGVsZW1lbnQuZGF0YShEQVRBX0tFWSlcbiAgICAgIGNvbnN0IF9jb25maWcgID0gdHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcgJiYgY29uZmlnXG5cbiAgICAgIGlmICghZGF0YSkge1xuICAgICAgICBkYXRhID0gbmV3IFRvYXN0KHRoaXMsIF9jb25maWcpXG4gICAgICAgICRlbGVtZW50LmRhdGEoREFUQV9LRVksIGRhdGEpXG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAodHlwZW9mIGRhdGFbY29uZmlnXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBObyBtZXRob2QgbmFtZWQgXCIke2NvbmZpZ31cImApXG4gICAgICAgIH1cblxuICAgICAgICBkYXRhW2NvbmZpZ10odGhpcylcbiAgICAgIH1cbiAgICB9KVxuICB9XG59XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBqUXVlcnlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbiQuZm5bTkFNRV0gICAgICAgICAgICAgPSBUb2FzdC5falF1ZXJ5SW50ZXJmYWNlXG4kLmZuW05BTUVdLkNvbnN0cnVjdG9yID0gVG9hc3RcbiQuZm5bTkFNRV0ubm9Db25mbGljdCAgPSAoKSA9PiB7XG4gICQuZm5bTkFNRV0gPSBKUVVFUllfTk9fQ09ORkxJQ1RcbiAgcmV0dXJuIFRvYXN0Ll9qUXVlcnlJbnRlcmZhY2Vcbn1cblxuZXhwb3J0IGRlZmF1bHQgVG9hc3RcbiIsImltcG9ydCAkIGZyb20gJ2pxdWVyeSdcbmltcG9ydCBBbGVydCBmcm9tICcuL2FsZXJ0J1xuaW1wb3J0IEJ1dHRvbiBmcm9tICcuL2J1dHRvbidcbmltcG9ydCBDYXJvdXNlbCBmcm9tICcuL2Nhcm91c2VsJ1xuaW1wb3J0IENvbGxhcHNlIGZyb20gJy4vY29sbGFwc2UnXG5pbXBvcnQgRHJvcGRvd24gZnJvbSAnLi9kcm9wZG93bidcbmltcG9ydCBNb2RhbCBmcm9tICcuL21vZGFsJ1xuaW1wb3J0IFBvcG92ZXIgZnJvbSAnLi9wb3BvdmVyJ1xuaW1wb3J0IFNjcm9sbHNweSBmcm9tICcuL3Njcm9sbHNweSdcbmltcG9ydCBUYWIgZnJvbSAnLi90YWInXG5pbXBvcnQgVG9hc3QgZnJvbSAnLi90b2FzdCdcbmltcG9ydCBUb29sdGlwIGZyb20gJy4vdG9vbHRpcCdcbmltcG9ydCBVdGlsIGZyb20gJy4vdXRpbCdcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NC4yLjEpOiBpbmRleC5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuKCgpID0+IHtcbiAgaWYgKHR5cGVvZiAkID09PSAndW5kZWZpbmVkJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Jvb3RzdHJhcFxcJ3MgSmF2YVNjcmlwdCByZXF1aXJlcyBqUXVlcnkuIGpRdWVyeSBtdXN0IGJlIGluY2x1ZGVkIGJlZm9yZSBCb290c3RyYXBcXCdzIEphdmFTY3JpcHQuJylcbiAgfVxuXG4gIGNvbnN0IHZlcnNpb24gPSAkLmZuLmpxdWVyeS5zcGxpdCgnICcpWzBdLnNwbGl0KCcuJylcbiAgY29uc3QgbWluTWFqb3IgPSAxXG4gIGNvbnN0IGx0TWFqb3IgPSAyXG4gIGNvbnN0IG1pbk1pbm9yID0gOVxuICBjb25zdCBtaW5QYXRjaCA9IDFcbiAgY29uc3QgbWF4TWFqb3IgPSA0XG5cbiAgaWYgKHZlcnNpb25bMF0gPCBsdE1ham9yICYmIHZlcnNpb25bMV0gPCBtaW5NaW5vciB8fCB2ZXJzaW9uWzBdID09PSBtaW5NYWpvciAmJiB2ZXJzaW9uWzFdID09PSBtaW5NaW5vciAmJiB2ZXJzaW9uWzJdIDwgbWluUGF0Y2ggfHwgdmVyc2lvblswXSA+PSBtYXhNYWpvcikge1xuICAgIHRocm93IG5ldyBFcnJvcignQm9vdHN0cmFwXFwncyBKYXZhU2NyaXB0IHJlcXVpcmVzIGF0IGxlYXN0IGpRdWVyeSB2MS45LjEgYnV0IGxlc3MgdGhhbiB2NC4wLjAnKVxuICB9XG59KSgpXG5cbmV4cG9ydCB7XG4gIFV0aWwsXG4gIEFsZXJ0LFxuICBCdXR0b24sXG4gIENhcm91c2VsLFxuICBDb2xsYXBzZSxcbiAgRHJvcGRvd24sXG4gIE1vZGFsLFxuICBQb3BvdmVyLFxuICBTY3JvbGxzcHksXG4gIFRhYixcbiAgVG9hc3QsXG4gIFRvb2x0aXBcbn1cbiJdfQ==
